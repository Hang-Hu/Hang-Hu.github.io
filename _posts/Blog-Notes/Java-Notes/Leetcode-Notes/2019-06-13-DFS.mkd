---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 329. Longest Increasing Path in a Matrix

### Description

```
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
```


### Solution


1. Start from every node to do dfs.

2. If `matrix[x][y]<=previousVal`, then reject by returning -1

3. Plus one distance of current node

4. Use `distance` array to store the distance of current node in case it's been calculated before. Since a node can be right of left node, left of right node, down of upper node and up of down node, at most can be dfs and calculated 4 times.

5. Must check if this val bigger than previous one before checking distance[x][y] to avoid a >= number making use of the start node of real Longest Increasing Path.


```
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length == 0)  return 0;
        int[][] distance = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                max = Math.max(max, dfs(matrix, i, j, Long.MIN_VALUE, distance));
            }
        }
        return max;
    }
    private int dfs(int[][] matrix, int x, int y, long previousVal, int[][] distance){
        if(x<0 || x>=matrix.length || y<0 || y>=matrix[0].length)   return -1;
        if(matrix[x][y]<=previousVal)                               return -1;
        if(distance[x][y]!=0)                                       return distance[x][y];
        int max = 0;
        int val = matrix[x][y];
        max = Math.max(max, dfs(matrix, x-1, y, val, distance));
        max = Math.max(max, dfs(matrix, x+1, y, val, distance));
        max = Math.max(max, dfs(matrix, x, y-1, val, distance));
        max = Math.max(max, dfs(matrix, x, y+1, val, distance));
        int ans = max+1;
        distance[x][y] = ans;
        return ans;
    }
}
```


Time: O(m*n). Suppose one dfs visits every node, then it just goes further enough, say m*n is length of its Longest Increasing Path, then every dfs is calculated. Then the m*n-1 dfs each takes O(1) by `distance[x][y]`. So the time complexity is m*n+(m*n-1)*1 = O(m*n). The idea is similiar to other case where one dfs not visiting all nodes. It takes only O(m*n) to compute distance for each slot in m*n try. So it's m*n+m*n, basically O(m*n). Just like the idea of m+n in dijkstra algo.

Space: O(m*n), the distance array is m*n in shape.


## 109. Convert Sorted List to Binary Search Tree


### Description


```
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
```


### First Solution - get length and find middle


buildTree recursively, find length and then middle node(this takes space O(1), build a list as index will take space O(n)), build root node with it, assign left list to buildTree(), `root.left = buildTree(leftList)`, the same as right list.


```
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        return buildTree(head);
    }
    private TreeNode buildTree(ListNode head){
        int length = getLength(head);
        if(length==0)   return null;
        if(length==1){
            head.next = null;
            return new TreeNode(head.val);
        }
        ListNode cur = head;
        ListNode pre = null;
        for(int i=0; i<length/2; i++){
            pre = cur;
            cur = cur.next;
        }
        pre.next = null;
        TreeNode root = new TreeNode(cur.val);
        TreeNode treeNode = root;
        root.left = buildTree(head);
        root.right = buildTree(cur.next);
        return root;
    }
    private int getLength(ListNode head){
        ListNode cur = head;
        int length = 0;
        while(cur!=null){
            length++;
            cur=cur.next;
        }
        return length;
    }
}
```


Time: O(nlogn)

Space: O(1)


### Second Solution - use list to find middle by O(1)



Time: O(n)

Space: O(n)


### Final Solution - Simulate inorder traversal


Idea: Doing inorder traversal on binary search tree will get ascending sort list. Therefor simulate inorder traversal will work to build binary search tree now that I already have ascendingly sorted array.


Start building the tree recursively using inorder traversal, only set the val when it's visiting the node in the second time. Use global curListNode, and set it to its next after using the val. Use start and end index to check if it's leaf node.


```
left=build(start, mid)
root=new TreeNode(this.cur.val) // mid
right=build(mid+1, end)
```


```
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private ListNode curListNode;
    public TreeNode sortedListToBST(ListNode head) {
        this.curListNode = head;
        int len = getLength(head);
        return buildTree(0, len);
    }
    // start inclusive, end exclusive
    private TreeNode buildTree(int start, int end){
        if(end-start<1)     return null;
        int mid = (start+end)/2;
        TreeNode left = buildTree(start, mid);
        TreeNode root = new TreeNode(this.curListNode.val); // mid
        this.curListNode = this.curListNode.next;
        root.left = left;
        root.right = buildTree(mid+1, end);
        return root;
    }
    private int getLength(ListNode head){
        ListNode cur = head;
        int length = 0;
        while(cur!=null){
            length++;
            cur=cur.next;
        }
        return length;
    }
}
```


Time: O(n)

Space: O(1), if consider Java's stack mechanism, then O(logn)

## 490. The Maze

### Description

[The Maze](https://leetcode.com/problems/the-maze/)

### Final Solution - DFS+Set

1. if cur position same as dest, return true
2. Go up/right/down/left until hitting the wall, call dfs with new position.
3. If false in 4 directions, return false
4. if one of 4 directions is valid, return true
5. Use `Set` to store all positions the ball stops, avoid repeated stop position, because if the ball stopped in this position before, it has already explored all directions. Explorig repeatedly will cause stack overflow.

```
class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        return dfs(maze, start, destination, new HashSet<Integer>());
    }
    private boolean dfs(int[][] maze, int[] cur, int[] destination, Set<Integer> set){
        int i = cur[0], j = cur[1];
        int position = position(i, j, maze[0].length);
        if(set.contains(position)) return false;
        set.add(position);
        if(i==destination[0] && j==destination[1]) return true;
        // up
        int upI = i;
        while(upI>0 && maze[upI-1][j]==0) upI--;
        if(upI!=i && dfs(maze, new int[]{upI, j}, destination, set)) return true;
        // right
        int rightJ = j;
        while(rightJ<maze[0].length-1 && maze[i][rightJ+1]==0) rightJ++;
        if(rightJ!=j && dfs(maze, new int[]{i, rightJ}, destination, set)) return true;
        // down
        int downI = i;
        while(downI<maze.length-1 && maze[downI+1][j]==0) downI++;
        if(downI!=i && dfs(maze, new int[]{downI, j}, destination, set)) return true;
        // left
        int leftJ = j;
        while(leftJ>0 && maze[i][leftJ-1]==0) leftJ--;
        if(leftJ!=j && dfs(maze, new int[]{i, leftJ}, destination, set)) return true;
        return false;
    }
    private int position(int i, int j, int colLen){
        return i*colLen+j;
    }
}
```


m is maze.length, n is maze[0].length.


Time: O(mn). Because of the set check, each position can be stopped once. I have mn slots, so at most stop in every slots, which is mn stops.


Space: O(mn)

## 529. Minesweeper

### Description

```
Let's play the minesweeper game (Wikipedia, online game)!

You are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.

Now given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:

If a mine ('M') is revealed, then the game is over - change it to 'X'.
If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.
If an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
Return the board when no more squares will be revealed.
 

Example 1:

Input: 

[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']]

Click : [3,0]

Output: 

[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]

Explanation:

Example 2:

Input: 

[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]

Click : [1,2]

Output: 

[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'X', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]

Explanation:

 

Note:

The range of the input matrix's height and width is [1,50].
The click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.
The input board won't be a stage when game is over (some mines have been revealed).
For simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.
```

### Final Solution - DFS

If mine: update cell to be 'X'
If empty: call reveal

reveal:

1. check 8 adjacent cells and return num of mines
2. If num>0: update celll to be Digit
3. If num==0: update cell to be 'B' and call reveal() on all 8 adjacent cells.

Use `boolean[][] revealed` to remember revealed cells to avoid repeated visiting and stack overflow.

```
class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int x = click[0], y=click[1];
        if(board[x][y]=='M'){
            board[x][y] = 'X';
        }else if(board[x][y]=='E'){
            boolean[][] revealed = new boolean[board.length][board[0].length];
            reveal(x, y, board, revealed);
        }else{
            System.out.println("Illegal click on "+board[x][y]);
        }
        return board;
    }
    private void reveal(int x, int y, char[][] board, boolean[][] revealed){
        if(board[x][y]!='E'|| revealed[x][y]) return;
        int mineNum = mineNumInAdjacentCells(x, y, board);
        revealed[x][y] = true;
        if(mineNum>0){
            board[x][y] = (char)(mineNum+'0');
        }else{ // mineNum==0
            board[x][y] = 'B';
            for(int i=-1; i<=1; i++){ // i = -1, 0, +1
                for(int j=-1; j<=1; j++){ // j = -1, 0, +1
                    if(i==0 && j==0) continue;
                    if(x+i<0 || x+i>=board.length || y+j<0 || y+j>=board[0].length) continue; 
                    reveal(x+i, y+j, board, revealed);
                }
            }
        }
    }
    private int mineNumInAdjacentCells(int x, int y, char[][] board){
        int count = 0;
        for(int i=-1; i<=1; i++){ // i = -1, 0, +1
            for(int j=-1; j<=1; j++){ // j = -1, 0, +1
                if(i==0 && j==0) continue;
                if(x+i<0 || x+i>=board.length || y+j<0 || y+j>=board[0].length) continue; 
                if(board[x+i][y+j]=='M') count++;
            }
        }
        return count;
    }
}
```


## 1192. Critical Connections in a Network

### Description

```
There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections.
```

### Solution - Tarjan's Algo(TLE)

```
class Solution {
    private int nextId = 0;
    Map<Integer, List<Integer>> graph = new HashMap<>(); // (node num, list of neighbor's node num)
    Map<Integer, Integer> lowLinkVal = new HashMap<>(); // (node num, node's low link value)
    Map<Integer, Set<Integer>> lowLinkToNum = new HashMap<>(); // (node's low link value, node num)
    Set<Integer> scc = new HashSet<>(); // low link values that are already completed SCC
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> ans = new ArrayList<>();
        initGraph(connections, graph);
        scc(0, n);
        for(List<Integer> conn: connections){
            if(lowLinkVal.get(conn.get(0))!=lowLinkVal.get(conn.get(1))) ans.add(conn);
        }
        return ans;
    }
    private void scc(int nodeNum, int n){
        for(int i=0; i<n; i++){
            dfs(i, n, -1);
        }
    }

    private int dfs(int nodeNum, int n, int parent){
        if(lowLinkVal.containsKey(nodeNum)) return lowLinkVal.get(nodeNum);
        int nodeId = nextId++;
        lowLinkVal.put(nodeNum, nodeId);
        lowLinkToNum.put(nodeId, new HashSet<Integer>(){{add(nodeNum);}});
        List<Integer> neighbors = graph.get(nodeNum);
        for(int i=0; neighbors!=null && i<neighbors.size(); i++){
            int neighbor = neighbors.get(i);
            if(neighbor==parent) continue; // avoid getting low link from parent the same way as parent visits neighbor
            int returnedLowLink = dfs(neighbor, n, nodeNum);
            if(scc.contains(lowLinkVal.get(neighbor))==false){ // use min low link value if neighbor is not completed SCC
                int curLowLink = lowLinkVal.get(nodeNum);
                if(returnedLowLink<curLowLink){ // update all node using the same low link with returned one
                    Iterator<Integer> iter = lowLinkToNum.get(curLowLink).iterator();
                    while(iter.hasNext()){
                        int node = iter.next();
                        lowLinkVal.put(node, returnedLowLink);
                        lowLinkToNum.get(returnedLowLink).add(node);
                        iter.remove();
                    }
                    
                }
            }
        }
        // after all neighbors visited, if id equals low link value, add id to completed SCC set
        if(nodeId==lowLinkVal.get(nodeNum)){ // complete SCC
            scc.add(nodeId);
        }
        return lowLinkVal.get(nodeNum);
    }
    private void initGraph(List<List<Integer>> connections, Map<Integer, List<Integer>> graph){
        for(List<Integer> conn: connections){
            int a = conn.get(0);
            int b = conn.get(1);
            if(graph.containsKey(a)==false) graph.put(a, new ArrayList<Integer>());
            graph.get(a).add(b);
            if(graph.containsKey(b)==false) graph.put(b, new ArrayList<Integer>());
            graph.get(b).add(a);
        }
    }
}
```

### Final Solution

If node's discovery time is smaller than minimum discovery time(low link value) reachable from neighbor x, the the edge between this node and x is the only path connectiong them. Once removed, you cannot reach x from this node.

Explanation:

If node's discovery time is smaller than minimum discovery time reachable from neighbor x(excluding parent path), there is no cycle containing this node and x, the edge is the only path from node to x.

If there is a cycle, the min discovery time from x can be equal to or even smaller than node's discovery time.
time,low:   1,1   2,2   3,3
            1  -  2  -  3

time,low:   1,1   2,2   3,2
            1  -  2  -  3
                   \   /
                     4
                    4,2

As shown in the example 2, 2,3,4 have the same low link value 2(reachable minimum discovery time excluding parent path) since they are in a cycle, so 2 is reachable for 3, 4 in 2 paths, even exclude the parent path, there still exists 1 path to reach 2. Then no discovery time in the cycle can be smaller than 2, so there is no critical connection here. And 1's dicovery time 1 is smaller than 2's low link value 2, showing they are not in a cycle, otherwise 2's low can be as small as 1. Therefore edge (1, 2) is a critical connection.

[articulation-points-and-bridges](https://www.hackerearth.com/zh/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/)

```
class Solution {
    private int nextId = 1;
    List<Integer>[] graph;
    int[] lowLinkVal;
    List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        graph = new ArrayList[n+1]; // (node num, list of neighbor's node num)
        for(int i=0; i<graph.length; i++) graph[i] = new ArrayList<>();
        lowLinkVal = new int[n+1]; // (node num, node's low link value)
        initGraph(connections);
        dfs(0, n, -1);
        return ans;
    }
    private int dfs(int nodeNum, int n, int parent){
        if(lowLinkVal[nodeNum]!=0) return lowLinkVal[nodeNum];
        int nodeId = nextId++;
        lowLinkVal[nodeNum] = nodeId;
        List<Integer> neighbors = graph[nodeNum];
        for(int i=0; neighbors!=null && i<neighbors.size(); i++){
            int neighbor = neighbors.get(i);
            if(neighbor==parent) continue; // avoid getting low link from parent the same way as parent visits neighbor
            int returnedLowLink = dfs(neighbor, n, nodeNum);
            lowLinkVal[nodeNum] = Math.min(lowLinkVal[nodeNum], returnedLowLink);
            if(nodeId<returnedLowLink) ans.add(Arrays.asList(nodeNum, neighbor));
        }
        return lowLinkVal[nodeNum];
    }
    private void initGraph(List<List<Integer>> connections){
        for(List<Integer> conn: connections){
            int a = conn.get(0);
            int b = conn.get(1);
            graph[a].add(b);
            graph[b].add(a);
        }
    }
}
```