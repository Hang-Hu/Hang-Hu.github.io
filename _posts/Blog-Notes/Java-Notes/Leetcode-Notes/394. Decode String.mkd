## Description

```
Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

```



## Solution


```
class Solution {
    int rightIndex = -1;
    public String decodeString(String s) {
        StringBuilder sb = new StringBuilder(s);
        decode(sb, 0);
        return sb.toString();
    }
    private void decode(StringBuilder sb, int start) {
        int i=start;
        while(i<sb.length()){
            char c = sb.charAt(i);
            if(Character.isDigit(c)){
                int d = i; // d is exclusive of digit
                while(Character.isDigit(sb.charAt(d))) d++;
                int k = Integer.parseInt(sb.substring(i, d));
                int l = d+1;
                int r = l+1; // r is exclusive of letter
                while(sb.charAt(r)!=']'){
                    if(Character.isLetter(sb.charAt(r))){
                        r++;
                    }else if(Character.isDigit(sb.charAt(r))){
                        decode(sb, r);
                    }else{
                        System.out.println("It should be eiter letter or digit, but get "+sb.charAt(r));
                    }
                }
                // r point to ]
                sb.replace(i, r+1, stringMul(k, sb.substring(l, r)));
                if(i==0){
                    i = r+1; // TODO change it to comply with length of replaced string from stringMul
                }else{
                    return;
                }
                
            }else if(Character.isLetter(c)){
                sb.append(c);
                i++;
            }else{
                System.out.println(i+" "+sb.charAt(i)+" "+sb);
                System.out.println("Character "+c+" is illegal.");
            }
        }
    }
    private String stringMul(int k, String s){
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<k; i++) sb.append(s);
        return sb.toString();
    }


}
```