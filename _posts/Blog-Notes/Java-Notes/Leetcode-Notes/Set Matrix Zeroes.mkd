## Brute force

```java
class Solution {    
    public void setZeroes(int[][] matrix) {
        // int max = matrix[0][0];
        // for(int i=0; i<matrix.length; i++){
        //     for(int j=0; j<matrix[0].length; j++){
        //         if(matrix[i][j]>max){
        //             max = matrix[i][j];
        //         }
        //     }
        // }
        // int dummy = max+1;
        int dummy = -1000000;
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    setRow(matrix, i, dummy);
                    setCol(matrix, j, dummy);
                }
            }
        }
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == dummy){
                    matrix[i][j] = 0;
                }
            }
        }
    }
    private void setRow(int[][] matrix, int row, int dummy){
        for(int j=0; j<matrix[row].length; j++){
            if(matrix[row][j] != 0){
                matrix[row][j] = dummy;
            }
        }
    }
    private void setCol(int[][] matrix, int col, int dummy){
        for(int i=0; i<matrix.length; i++){
            if(matrix[i][col] != 0){
                matrix[i][col] = dummy;            
            }
        }
    }
}
```

Time Complexity: O((M*N)*(M+N))
Space Complexity: O(1)

## Remember cols and rows

```
class Solution {
    public void setZeroes(int[][] matrix) {
        Set<Integer> rows = new HashSet<>();
        Set<Integer> cols = new HashSet<>();
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    rows.add(i);
                    cols.add(j);
                }
            }
        }
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(rows.contains(i) || cols.contains(j)){
                    matrix[i][j] = 0;
                }
            }
        }
    }
}
```

Time Complexity: O(M*N)
Space Complexity: O(M+N)

## Best Solution: 