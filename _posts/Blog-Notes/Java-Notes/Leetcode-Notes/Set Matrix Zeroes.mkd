## Brute force

```java
class Solution {    
    public void setZeroes(int[][] matrix) {
        // int max = matrix[0][0];
        // for(int i=0; i<matrix.length; i++){
        //     for(int j=0; j<matrix[0].length; j++){
        //         if(matrix[i][j]>max){
        //             max = matrix[i][j];
        //         }
        //     }
        // }
        // int dummy = max+1;
        int dummy = -1000000;
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    setRow(matrix, i, dummy);
                    setCol(matrix, j, dummy);
                }
            }
        }
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == dummy){
                    matrix[i][j] = 0;
                }
            }
        }
    }
    private void setRow(int[][] matrix, int row, int dummy){
        for(int j=0; j<matrix[row].length; j++){
            if(matrix[row][j] != 0){
                matrix[row][j] = dummy;
            }
        }
    }
    private void setCol(int[][] matrix, int col, int dummy){
        for(int i=0; i<matrix.length; i++){
            if(matrix[i][col] != 0){
                matrix[i][col] = dummy;            
            }
        }
    }
}
```

Time Complexity: O((M*N)*(M+N))
Space Complexity: O(1)

## Remember cols and rows

```
class Solution {
    public void setZeroes(int[][] matrix) {
        Set<Integer> rows = new HashSet<>();
        Set<Integer> cols = new HashSet<>();
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    rows.add(i);
                    cols.add(j);
                }
            }
        }
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(rows.contains(i) || cols.contains(j)){
                    matrix[i][j] = 0;
                }
            }
        }
    }
}
```

Time Complexity: O(M*N)
Space Complexity: O(M+N)

## Best Solution: 0th row and 0th col as guard

```
class Solution {
    public void setZeroes(int[][] matrix) {
        boolean row = false;
        boolean col = false;
        //set 0 mark in judge line, and set row, col for matrix[0][0]
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                    // TODO: use one row and one col iteration to do that
                    if(i==0){
                        row = true;
                    }
                    if(j==0){
                        col = true;
                    }
                }
            }
        }
        // zero everything not in the judge line
        for(int i=1; i<matrix.length; i++){
            for(int j=1; j<matrix[0].length; j++){
                if(matrix[0][j]==0 || matrix[i][0]==0){
                    matrix[i][j]=0;
                }
            }
        }
        //then zero first row by matrix[0][0]
        if(matrix[0][0]==0 && row==true){
            for(int j=1; matrix.length>0 && j<matrix[0].length; j++){
                matrix[0][j]=0;
            }
        }
        // zero first column by matrix[0][0]
        if(matrix[0][0]==0 && col==true){
            for(int i=1; i<matrix.length; i++){
                matrix[i][0]=0;
            }
        }
    }
}
```