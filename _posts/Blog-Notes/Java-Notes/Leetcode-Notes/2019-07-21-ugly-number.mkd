---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 264. Ugly Number II

### Description

Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 

Example:

Input: n = 10
Output: 12
Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
Note:  

1 is typically treated as an ugly number.
n does not exceed 1690.

### First Solution DP+Map - TLE

Use map because I don't know how many times final (i-1)/n can be, previously I used 2*n but exceeds.

opt(i) = opt(i/2) if i%2==0
       = opt(i/3) if i%3==0
       = opt(i/5) if i%5==0
       = (i==1)   o.w. 

```
class Solution {
    public int nthUglyNumber(int n) {
        if(n==0) return 0;
        Map<Integer, Boolean> opt = new HashMap<>(); // (i, is ugly number or not)
        int i=1;
        int count=0;
        while(count<n){
            if(isUglyNumber(i, opt)){
                count++;
            }
            i++;
        }
        return i-1;
    }
    private boolean isUglyNumber(int i, Map<Integer, Boolean> opt){
        if(i%2==0){
            opt.put(i, opt.get(i/2));
        }else if(i%3==0){
            opt.put(i, opt.get(i/3));
        }else if(i%5==0){
            opt.put(i, opt.get(i/5));
        }else{
            opt.put(i, i==1);
        }
        return opt.get(i);
    }
}
```


### Final Solution - pre compute + 3 pointers + DP


Use static to pre compute result for each possible input n since `n<=1690`.


opt(n) is the nth ugly number.


```
opt(n) = min(opt(i2)*2, opt(i3)*3, opt(i5)*5)
```


If used `ix`, then `ix++`.


I used opt(i2) instead of i2 becuase i2 cannot be numbers like 7, so it must use ugly number from small to big.


```
// 3 pointers
class Solution {
    private static int[] opt = preCompute();
    private static int[] preCompute(){
        int[] opt = new int[1691];
        opt[1] = 1;
        int n = 2;
        int i2 = 1;
        int i3 = 1;
        int i5 = 1;
        while(n<opt.length){
            // use opt[i] because idx cannot be number like 7, must use valid number, which is all in opt
            opt[n] = min(opt[i2]*2, opt[i3]*3, opt[i5]*5);
            if(opt[n]==opt[i2]*2) i2++;
            if(opt[n]==opt[i3]*3) i3++;
            if(opt[n]==opt[i5]*5) i5++;
            n++;
        }
        return opt;
    }
    private static int min(int a, int b, int c){
        return Math.min(a, Math.min(b, c));
    }
    public int nthUglyNumber(int n) {
        return opt[n];
    }
}
```


## 313. Super Ugly Number


### Description


```
Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.

Example:

Input: n = 12, primes = [2,7,13,19]
Output: 32 
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
             super ugly numbers given primes = [2,7,13,19] of size 4.
Note:

1 is a super ugly number for any given primes.
The given numbers in primes are in ascending order.
0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
The nth super ugly number is guaranteed to fit in a 32-bit signed integer.
```


### Final Solution


Similar to Ugly number II 3 pointers. Use `iArr` to store idx for each given prime in `primes` array. `opt[i]` cannot be the same as `opt[i-1]`, so have to filter out this case.


```
opt[i] = min{ opt[iArr[j]] * primes[j] } (0<=j<primes.length)
```


For the `j` used, update its idx by `iArr[j]++`.


```
class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        if(n==0 || primes.length==0) return 0;
        int[] iArr = new int[primes.length];
        int[] opt = new int[n];
        opt[0] = 1;
        for(int i=1; i<opt.length; i++){
            int res = 0;
            do{
                res = minAfterMultiple(opt, iArr, primes);
            }while(res<=opt[i-1]);
            opt[i] = res;
        }
        return opt[n-1];
    }
    private int minAfterMultiple(int[] opt, int[] iArr, int[] primes){
        int min = opt[iArr[0]] * primes[0];
        int minIdx = 0;
        for(int i=1; i<primes.length; i++){
            int cur = opt[iArr[i]] * primes[i];
            if(cur < min){
                min = cur;
                minIdx = i;
            }
        }
        iArr[minIdx]++;
        return min;
    }
}
```


## 300. Longest Increasing Subsequence


### Description


```
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
```


### First Solution - DP




```
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length==0) return 0;
        int[] opt = new int[nums.length];
        init(opt);
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<i; j++){
                if(nums[i]>nums[j]) opt[i] = Math.max(opt[i], 1+opt[j]);
            }
        }
        return max(opt);
    }
    private int max(int[] opt){
        int ans = 0;
        for(int n: opt){
            ans = Math.max(ans, n);
        }
        return ans;
    }
    private void init(int[] opt){
        for(int i=0; i<opt.length; i++){
            opt[i] = 1;
        }
    }
}
```


Time: O(n^2)

Space: O(n)


### Final Solution - Array + BinarySearch


```
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length==0) return 0;
        int[] arr = new int[nums.length]; // max is nums.length if nums is asc
        int len = 0;
        for(int i=0; i<nums.length; i++){
            int j = Arrays.binarySearch(arr, 0, len, nums[i]);
            if(j<0) j = -j-1;
            arr[j] = nums[i];
            if(j>len-1) len++;
        }
        return len;
    }
}
```

