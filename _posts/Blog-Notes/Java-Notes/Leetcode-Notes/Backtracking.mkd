Backtracking is a special DFS where code stops halfway when it's not posisble at all.

## 216. Combination Sum III

### Description

```
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

    All numbers will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
```

### Final Solution - DFS+Backtracking

Use dfs to walk through numbers from `start` to 9. If remainNum and remainTarget are 0, then add to `solutions`.

`dfs(int remainNum, int remainTarget, List<List<Integer>> solutions, List<Integer> path, int start)`

Use `start` to make sure each number is unique in one solution by assigning `i+1`.

If one or more of `remainNum`, `remainTarget`, or `start` are illegal then stop.

If `9-remainNum+1` adding up to `9` is smaller than `remainTarget`, then it's not possible to fullfill `remainTarget`, so stop.

```
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> solutions = new ArrayList<>();
        dfs(k, n, solutions, new ArrayList<Integer>(), 1);
        return solutions;
    }
    private void dfs(int remainNum, int remainTarget, List<List<Integer>> solutions, List<Integer> path, int start){
        if(remainNum==0 && remainTarget==0){
            solutions.add(new ArrayList<Integer>(path));
            return;
        }
        if(remainNum<=0 || remainTarget<=0) return;
        if(start>9) return;
        if((9+9-remainNum+1)*remainNum/2<remainTarget) return;
        for(int i=start; i<=9; i++){
            path.add(i);
            dfs(remainNum-1, remainTarget-i, solutions, path, i+1);
            path.remove(path.size()-1);
        }
    }
}
```
