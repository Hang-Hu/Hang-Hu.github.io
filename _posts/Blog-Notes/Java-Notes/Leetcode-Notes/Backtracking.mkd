Backtracking is a special DFS where code stops halfway when it's not posisble at all.

## 39. Combination Sum

### Description

```
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

```

### Final Solution - DFS+Backtracking+SortFirst

I used dfs and walk through the array to try to add every number, the recursive function is `dfs(int remain, List<Integer> path, int start)`, where remain is remaining target, path is current numbers selected, `start` is the index to start with.

To remove duplicate solution, I sort array first, then assign current index i to the start index, so that next `dfs` will only use this number and numbers bigger than that.

```
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, new ArrayList<Integer>(), ans, 0);
        return ans;
    }
    private void dfs(int[] candidates, int remain, List<Integer> path, List<List<Integer>> solutions, int start){
        if(remain==0){
            solutions.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i=start; i<candidates.length; i++){
            if(remain-candidates[i]>=0){
                path.add(candidates[i]);
                dfs(candidates, remain-candidates[i], path, solutions, i);
                path.remove(path.size()-1);    
            }
        }
    }
}
```