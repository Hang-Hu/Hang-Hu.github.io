## 131. Palindrome Partitioning

### Description

```
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]
```

### Final Solution

1. Use `path.remove(index)` instead of `path.remove(str)` to avoid bug since there are duplicates string.
2. If to partition on cur index, check if the substring I sliced is valid or not, only continue recursion if it's valid.
3. Recursion with some index params, path, ans param is best solution to permutation.
4. If no good solution, first consider brute force, then improve on that, which may result in a good solution.

Use start index, cur index:

not partition in cur: `partition(start, cur+1)`
partition in cur if `s.substring(start, cur+1)` is palindrome: `partition(cur+1, cur+1)`

Have a path to remember substrings, add and remove with index, in the end add to `ans`.

```
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> path = new ArrayList<>();
        if(s.length()==0){
            ans.add(path);
            return ans;
        }
        partition(s, 0, 0, ans, path);
        return ans;
    }
    // if partition in cur, then cur belongs to previous substring
    // start, cur both inclusive
    private void partition(String s, int start, int cur, List<List<String>> ans, List<String> path){
        if(cur==s.length()-1){
            String sub = s.substring(start, cur+1);
            if(valid(sub)){
                path.add(sub);
                ans.add(new ArrayList<String>(path));
                path.remove(path.size()-1);    
            }
            return;
        }
        partition(s, start, cur+1, ans, path); // not partition in cur
        // partition in cur
        String sub = s.substring(start, cur+1);
        if(valid(sub)){
            path.add(sub);
            int removeIndex = path.size()-1;
            partition(s, cur+1, cur+1, ans, path);
            path.remove(removeIndex);    
        }
    }
    private boolean valid(String s){
        for(int i=0; i<s.length()-1; i++){
            if(s.charAt(i)!=s.charAt(s.length()-i-1)) return false;
        }
        return true;
    }
}
```

## 132. Palindrome Partitioning II

### Description

```
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:

Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
```

### Solution DP

`opt(start, i)` is the minimum number of cut from start to s.length-1, and every partition is a palindrome.

```
opt(start, i) = min{
    1+opt(i+1, i+1) if valid(s[start, i]) else Integer.MAX_VALUE // cut in index i
    opt(start, i+1) // not cut
}

if i==s.length()-1, since current one is last index, definitely have to cut.

if s[start, len-1] is palindrome:   opt(start, len-1)=1
else                                opt(start, len-1)=-1 // invalid
```

```
class Solution {
    public int minCut(String s) {
        int[][] opt = new int[s.length()][s.length()];
        for(int start=0; start<s.length(); start++){
            if(valid(s, start, s.length()-1))   opt[start][s.length()-1] = 0;
            else                                opt[start][s.length()-1] = -1;
        }
        for(int start=s.length()-1; start>=0; start--){
            for(int i=s.length()-2; i>=0; i--){
                if(valid(s, start, i)){
                    int min = -1;
                    if(opt[i+1][i+1]!=-1) min = 1+opt[i+1][i+1];
                    if(opt[start][i+1]!=-1) min = Math.min(min, opt[start][i+1]);
                    opt[start][i] = min;
                }else{
                    opt[start][i] = opt[start][i+1];
                }
            }
        }
        return opt[0][0];
    }
    // start and end inclusive
    private boolean valid(String s, int start, int end){
        for(int i=start; i<=end; i++){
            if(s.charAt(i)!=s.charAt(start+end-i)) return false;
        }
        return true;
    }
}
```

Time: O(n^3)
Space: O(n^2)

### Solution DP improved

Improve: instead of traverse to check if valid. Have an array[i][j] to store if si...sj is palindrome or not. Start from (i, i) and (i, i+1) to calculate all palindrome.

```
class Solution {
    public int minCut(String s) {
        int[][] opt = new int[s.length()][s.length()];
        boolean[][] palindrome = new boolean[s.length()][s.length()]; // i, j are both inclusive
        initPalindrome(palindrome, s);
        for(int start=0; start<s.length(); start++){
            if(valid(s, start, s.length()-1, palindrome))   opt[start][s.length()-1] = 0;
            else                                            opt[start][s.length()-1] = -1;
        }
        for(int start=s.length()-1; start>=0; start--){
            for(int i=s.length()-2; i>=0; i--){
                if(valid(s, start, i, palindrome)){
                    int min = -1;
                    if(opt[i+1][i+1]!=-1)   min = 1+opt[i+1][i+1];
                    if(opt[start][i+1]!=-1) min = Math.min(min, opt[start][i+1]);
                    opt[start][i] = min;
                }else{
                    opt[start][i] = opt[start][i+1];
                }
            }
        }
        return opt[0][0];
    }
    private void initPalindrome(boolean[][] palindrome, String s){
        for(int i=0; i<s.length(); i++){
            palindrome[i][i] = true;
            initPalindrome(palindrome, s, i-1, i+1);
        }
        for(int i=0; i+1<s.length(); i++){
            if(s.charAt(i)==s.charAt(i+1)){
                palindrome[i][i+1] = true;
                initPalindrome(palindrome, s, i-1, i+2);
            }
        }
    }
    private void initPalindrome(boolean[][] palindrome, String s, int i, int j){
        if(i<0 || j>=s.length()) return;
        if(s.charAt(i)==s.charAt(j)){
            palindrome[i][j] = true;
            initPalindrome(palindrome, s, i-1, j+1);   
        }
    }
    // start and end inclusive
    private boolean valid(String s, int start, int end, boolean[][] palindrome){
        return palindrome[start][end];
    }
}
```

Time: O(n^2)
Space: O(n^2)

## 214. Shortest Palindrome


### Description

```

Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

Example 1:

Input: "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: "abcd"
Output: "dcbabcd"
```

### Solution

```
class Solution {
    public String shortestPalindrome(String s) {
        boolean[][] palindrome = new boolean[s.length()][s.length()]; // palindrome[i][j], i,j are inclusive
        initPalindrome(palindrome, s);
    }
    private void initPalindrome(boolean[][] palindrome, String s){
        for(int i=0; i<s.length(); i++){
            palindrome[i][i] = true;
            initPalindrome(palindrome, s, i-1, i+1);
        }
        for(int i=0; i+1<s.length(); i++){
            if(s.charAt(i)==s.charAt(i+1)){
                palindrome[i][i+1] = true;
                initPalindrome(palindrome, s, i-1, i+2);
            }
        }
    }
    // i, j are inclusive
    private void initPalindrome(boolean[][] palindrome, String s, int i, int j){
        
    }
}
```