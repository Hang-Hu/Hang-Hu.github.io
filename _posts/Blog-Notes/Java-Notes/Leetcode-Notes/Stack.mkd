## 456. 132 Pattern


```
Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:
Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
Example 2:
Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:
Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

```

### First Solution - Brute Force TLE

```
class Solution {
    public boolean find132pattern(int[] nums) {
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]<nums[j]){
                    for(int k=j+1; k<nums.length; k++){
                        if(nums[k]<nums[j]&&nums[k]>nums[i]){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
}
```

Time: O(n^3)

Space: O(1)

### Improved on Brute Force Solution

Keep `nums[i]` the minimum number so that the range for nums[k] can be as large as possible. Traverse j on array, once <= iNum, then set it to iNum and continue, otherwise one valid j is found, then just check the k based on that.

```
class Solution {
    public boolean find132pattern(int[] nums) {
        int iNum=Integer.MAX_VALUE;
        for(int j=0; j<nums.length; j++){
            if(nums[j]<=iNum){
                iNum = nums[j];
                continue;
            }else{ // nums[j]>nums[i]
                for(int k=j+1; k<nums.length; k++){
                    if(nums[k]>iNum&&nums[k]<nums[j]){
                        return true;
                    }
                }
            }
            
        }
        return false;
    }
}
```

Time: O(n^2)

Space: O(1)

```
class Solution {
    public boolean find132pattern(int[] nums) {
        Stack<Integer> stack = new LinkedList<>();
        int[] min = new int[nums.length];
        min[0] = nums[0];
        for(int i=1; i<nums.length; i++){
            min[i] = Math.min(min[i-1], nums[i]);
        }
        for(int j=nums.length-1; j>=0; j--){
            if(nums[j]==min[j]) continue;
            // cannot be >
            // when nums[j]<nums[i]
            while(True){
                if(stack.peek()>nums[j]){
                    stack.push(nums[j]);
                    continue;
                }else if(stack.peek()==nums[j]){
                    continue;
                }else{ // nums[j]>nums[k]
                    int kNum = stack.pop();
                    if(kNum>min[j]){ // nums[k]>nums[i]
                        return true;
                    }    
                }
            }
        }
        return false;
    }
}
```