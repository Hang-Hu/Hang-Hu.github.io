## 642. Design Search Autocomplete System

### Description

https://leetcode.com/problems/design-search-autocomplete-system/

### Final Solution

```
class AutocompleteSystem {
    private Trie trie;
    public AutocompleteSystem(String[] sentences, int[] times) {
        trie = new Trie();
        for(int i=0; i<sentences.length; i++){
            trie.insert(sentences[i], times[i]);
        }
    }
    
    public List<String> input(char c) {
        if(c=='#'){
            trie.saveSearchAsHistory();
            return new ArrayList<String>();
        }
        List<Pair> l = trie.search(c);
        Collections.sort(l, new Comparator<Pair>(){
           @Override
            public int compare(Pair p1, Pair p2){
                if(p2.frequency != p1.frequency) return p2.frequency - p1.frequency;
                return p1.s.compareTo(p2.s);
            }
        });
        List<String> ans = new ArrayList<>();
        for(int i=0; i<3 && i<l.size(); i++){
            ans.add(l.get(i).s);
        }
        return ans;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
class Node{
    Map<Character, Node> children;
    boolean endOfWord;
    int frequency;
    public Node(){
        children = new HashMap<>();
        endOfWord = false;
    }
}
class Trie{
    private Node root;
    private Node searchCur;
    private StringBuilder searchStr;
    private boolean canFind;
    public Trie(){
        root = new Node();
        searchCur = root;
        searchStr = new StringBuilder();
        canFind = true;
    }
    public void saveSearchAsHistory(){
        searchCur.endOfWord = true;
        searchCur.frequency += 1;
        searchCur = root;
        searchStr = new StringBuilder();
        canFind = true;
    }
    public void insert(String s, int frequency){
        Node cur = root;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(cur.children.get(c)==null){
                cur.children.put(c, new Node());
            }
            cur = cur.children.get(c);
        }
        cur.endOfWord = true;
        cur.frequency = frequency;
    }
    public List<Pair> search(char c){
        searchStr.append(c);
        if(canFind==false){
            insert(c);
            return new ArrayList<Pair>();
        }
        if(searchCur.children.get(c)==null){
            canFind = false;
            insert(c);
            return new ArrayList<Pair>();
        }else{
            searchCur = searchCur.children.get(c);
            return getWords(searchCur, new StringBuilder(searchStr));
        }
    }
    private void insert(char c){
        searchCur.children.put(c, new Node());
        searchCur = searchCur.children.get(c);
    }
    private List<Pair> getWords(Node node, StringBuilder path){
        List<Pair> ans = new ArrayList<>();
        // endOfWord is not the end, there maybe ab and abcd both exist
        if(node.endOfWord==true) ans.add(new Pair(path.toString(), node.frequency));
        for(Map.Entry<Character, Node> e: node.children.entrySet()){
            path.append(e.getKey());
            ans.addAll(getWords(e.getValue(), path));
            path.deleteCharAt(path.length()-1);
        }
        return ans;
    }
}
class Pair{
    String s;
    int frequency;
    public Pair(String s, int frequency){
        this.s = s;
        this.frequency = frequency;
    }
}
```


## 472. Concatenated Words

### Description

```
Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.
```

### Final Solution - Trie + DFS

```
class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> ans = new ArrayList<>();
        if(words.length==0) return ans;
        Trie trie = new Trie();
        initTrie(words, trie);
        for(String w: words){
            if(trie.isConcatenated(w, 0, 0)) ans.add(w);
        }
        return ans;
    }

    private void initTrie(String[] words, Trie trie){
        for(String s: words){
            trie.insert(s);
        }
    }
}
class Trie{
    private Node root;
    public Trie(){
        root = new Node();
    }
    public void insert(String s){
        Node cur = root;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(cur.children.containsKey(c)==false) cur.children.put(c, new Node());
            cur = cur.children.get(c);
        }
        cur.endOfWord = true;
    }
    public boolean isConcatenated(String s, int startIdx, int numOfWords){
        if(startIdx>=s.length()) return numOfWords>1;
        Node cur = root;
        for(int i=startIdx; i<s.length(); i++){
            char c = s.charAt(i);
            if(cur.children.containsKey(c)==false) return false;
            cur = cur.children.get(c);
            if(cur.endOfWord && isConcatenated(s, i+1, numOfWords+1)) return true;
        }
        return false;
    }
}
class Node{
    Map<Character, Node> children;
    boolean endOfWord;
    public Node(){
        children = new HashMap<>();
        endOfWord = false;
    }
}
```

### Improved upon final one but not as fast - Trie + DFS + DP

```
class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> ans = new ArrayList<>();
        if(words.length==0) return ans;
        Trie trie = new Trie();
        initTrie(words, trie);
        for(String w: words){
            if(trie.maxConcatenatedNum(w, 0)>=2) ans.add(w);
        }
        return ans;
    }

    private void initTrie(String[] words, Trie trie){
        for(String s: words){
            trie.insert(s);
        }
    }
}
class Trie{
    private Node root;
    private Map<String, Integer> wordMaxNum;
    public Trie(){
        root = new Node();
        wordMaxNum = new HashMap<>();
    }
    public void insert(String s){
        wordMaxNum.put(s, 1);
        Node cur = root;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(cur.children.containsKey(c)==false) cur.children.put(c, new Node());
            cur = cur.children.get(c);
        }
        cur.endOfWord = true;
    }
    public int maxConcatenatedNum(String s, int numOfWords){
        if(s.length()==0) return numOfWords;
        if(wordMaxNum.containsKey(s) && numOfWords+wordMaxNum.get(s)>=2) return numOfWords+wordMaxNum.get(s);
        Node cur = root;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(cur.children.containsKey(c)==false) return -1; // error
            cur = cur.children.get(c);
            if(cur.endOfWord){
                int res = maxConcatenatedNum(s.substring(i+1), numOfWords+1);
                if(res>=2){
                    wordMaxNum.put(s, res);
                    return res;    
                }
                
            }
        }
        return 1;
    }
}
class Node{
    Map<Character, Node> children;
    boolean endOfWord;
    public Node(){
        children = new HashMap<>();
        endOfWord = false;
    }
}
```