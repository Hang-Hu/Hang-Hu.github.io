---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 54. Spiral Matrix

### Description

Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

```
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
```


Example 2:


```
Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
```


### Code


```
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        // special case: []
        if(matrix.length == 0)  return res;
        // special case: one col mul rows
        if(matrix[0].length==1){
            for(int i=0; i<matrix.length; i++){
                res.add(matrix[i][0]);
            }
            return res;
        }
        int m = matrix.length-1;// steps along row
        int n = matrix[0].length-1;// steps along col
        boolean firstRow = true;// if it's the firstRow
        int i=0; int j=0;//current position i, j
        boolean colAdd = true;// j++ or j--
        boolean rowAdd = true;// i++ or i--
        while(n>0 && m>=0){
            //along col
            for(int x=0; x<n; x++){
                res.add(matrix[i][j]);
                j = changeVal(j, colAdd);
            }
            colAdd = !colAdd;
            if(firstRow){
                firstRow = false;    
            }else{
                n--;
            }
            //along row
            for(int x=0; x<m; x++){
                res.add(matrix[i][j]);
                i = changeVal(i, rowAdd);
            }
            rowAdd = !rowAdd;
            m--;
        }
        // the last one
        res.add(matrix[i][j]);
        return res;
    }
    // ++ or --
    private int changeVal(int val, boolean add){
        if(add == true){
            return val+1;
        }else{
            return val-1;
        }
    }
}
```


N is the number of elements in matrix. N = m*n.

Time Complexity: O(N)

Space Complexity: O(N)




## 59. Spiral Matrix II


### Description


Given a positive integer n, generate a square matrix filled with elements from 1 to n^2 in spiral order.


Example:


```
Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
```


### Code


```
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] ans = new int[n][n];
        if(n==0){
            return ans;
        }
        int i=0; int j=0;
        boolean colAdd = true; boolean rowAdd = true;
        boolean firstRow = true;
        n = n-1;//n is col step
        int m=n;//m is row step 
        int val = 1; // from 1 to n^2
        while(n>0 && m>=0){
            // along col
            for(int x=0; x<n; x++){
                ans[i][j] = val++;
                j = changeVal(j, colAdd);
            }
            if(firstRow == true){
                firstRow = false;
            }else{
                n--;
            }
            colAdd = !colAdd;
            // along row
            for(int x=0; x<m; x++){
                ans[i][j] = val++;
                i = changeVal(i, rowAdd);
            }
            m--;
            rowAdd = !rowAdd;
        }
        ans[i][j] = val;
        return ans;
    }
    // ++ or --
    private int changeVal(int val, boolean add){
        if(add == true){
            return val+1;
        }else{
            return val-1;
        }
    }
}
```


N is the number of elements in matrix. N = m*n.

Time Complexity: O(N)

Space Complexity: O(N)


## 885. Spiral Matrix III


### Description


On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.


Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.


Now, we walk in a clockwise spiral shape to visit every position in this grid. 


Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 


Eventually, we reach all R * C spaces of the grid.


Return a list of coordinates representing the positions of the grid in the order they were visited.


```
Example 1:

Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]
 
Example 2:

Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
```


### Code


```
class Solution {
    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {
        int[][] ans = new int[R*C][2];
        int i = r0; int j = c0;// current position (i, j)
        int m = 1; int n=1;// step for row and col
        boolean rowAdd = true; boolean colAdd = true; // ++/--
        int count = 0; // num of grids visited
        while(count<R*C){
            // along col
            for(int x=0; x<n; x++){
                if(insideGrid(i, j, R, C) == true){
                    ans[count++] = new int[] {i, j};
                }
                j = changeVal(j, colAdd);
            }
            n++;
            colAdd = !colAdd;
            // along row
            for(int x=0; x<m; x++){
                if(insideGrid(i, j, R, C) == true){
                    ans[count++] = new int[] {i, j};
                }
                i = changeVal(i, rowAdd);
            }
            m++;
            rowAdd = !rowAdd;
        }
        return ans;
    }
    private boolean insideGrid(int i, int j, int R, int C){
        if(i>=0 && i<R && j>=0 && j<C){
            return true;
        }else{
            return false;
        }
    }
    // ++/--
    private int changeVal(int val, boolean add){
        if(add == true){
            return val+1;
        }else{
            return val-1;
        }
    }
}
```


Max time is (2*max(R, C)-1)^2, therefore time complexity is O((max(R, C))^2)

Space complexity: O(R*C)
