---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## Best Time to Buy and Sell Stock

### Divide and Conquer Solution

Don't use array/tuple, it's hard to extend that, use class and object to make it easier to understand and add function.


#### Using OOP

```java
// divide and conquer, O(nlogn)
// get i and j
class Solution {
    int max;
    public int maxProfit(int[] prices) {
        if(prices.length==0)    return 0;
        return Math.max(maxProfit(prices, 0, prices.length).maxProfit, 0);
    }
    // start inclusive, end exclusive
    // left part return index of min price, right half returns index of max price
    private ResObject maxProfit(int[] prices, int start, int end) {
        // end if there is only one number
        if(start+1==end){
            return new ResObject(start, start, 0);
        }
        int middle = (start+end)/2;
        ResObject l = maxProfit(prices, start, middle);
        ResObject r = maxProfit(prices, middle, end);
        int minPriceIndex = prices[l.minPriceIndex]<prices[r.minPriceIndex]?l.minPriceIndex:r.minPriceIndex;
        int maxPriceIndex = prices[l.maxPriceIndex]>prices[r.maxPriceIndex]?l.maxPriceIndex:r.maxPriceIndex;
        int rightMaxMinusLeftMin = prices[r.maxPriceIndex] - prices[l.minPriceIndex];
        int maxProfit = max(l.maxProfit, r.maxProfit, rightMaxMinusLeftMin);
        
        return new ResObject(minPriceIndex, maxPriceIndex, maxProfit);
        
    }
    private int max(int a, int b, int c){
        return Math.max(a, Math.max(b, c));
    }
    
}
class ResObject{
    int minPriceIndex;
    int maxPriceIndex;
    int maxProfit;
    public ResObject(int minPriceIndex, int maxPriceIndex, int maxProfit){
        this.minPriceIndex = minPriceIndex;
        this.maxPriceIndex = maxPriceIndex;
        this.maxProfit = maxProfit;
    }
}
```


#### To know buy on which day and sell on which day 


It's much more easier to devise complex solution using OOP


```java
// divide and conquer, O(nlogn)
// get i and j
class Solution {
    int max;
    public int maxProfit(int[] prices) {
        if(prices.length==0)    return 0;
        ResObject resObject = maxProfit(prices, 0, prices.length);
        //System.out.println("buyIndexOfMaxProfit: "+resObject.buyIndexOfMaxProfit+", sellIndexOfMaxProfit: "+resObject.sellIndexOfMaxProfit);
        return Math.max(0, resObject.maxProfit);
    }
    // start inclusive, end exclusive
    // left part return index of min price, right half returns index of max price
    private ResObject maxProfit(int[] prices, int start, int end) {
        // end if there is only one number
        if(start+1==end){
            return new ResObject(start, start, 0, -1, -1);
        }
        int middle = (start+end)/2;
        ResObject l = maxProfit(prices, start, middle);
        ResObject r = maxProfit(prices, middle, end);
        int minPriceIndex = prices[l.minPriceIndex]<prices[r.minPriceIndex]?l.minPriceIndex:r.minPriceIndex;
        int maxPriceIndex = prices[l.maxPriceIndex]>prices[r.maxPriceIndex]?l.maxPriceIndex:r.maxPriceIndex;
        int rightMaxMinusLeftMin = prices[r.maxPriceIndex] - prices[l.minPriceIndex];
        int maxProfit = max(l.maxProfit, r.maxProfit, rightMaxMinusLeftMin);
        int buyIndexOfMaxProfit=-1;
        int sellIndexOfMaxProfit=-1;
        if(maxProfit==l.maxProfit){
            buyIndexOfMaxProfit = l.buyIndexOfMaxProfit;
            sellIndexOfMaxProfit = l.sellIndexOfMaxProfit;
        }else if(maxProfit==r.maxProfit){
            buyIndexOfMaxProfit = l.buyIndexOfMaxProfit;
            sellIndexOfMaxProfit = l.sellIndexOfMaxProfit;
        }else{//maxProfit==rightMaxMinusLeftMin
            buyIndexOfMaxProfit = r.maxPriceIndex;
            sellIndexOfMaxProfit = l.minPriceIndex;
        }
        
        // System.out.println("buyIndexOfMaxProfit: "+buyIndexOfMaxProfit+", sellIndexOfMaxProfit: "+sellIndexOfMaxProfit +" "+(maxProfit==rightMaxMinusLeftMin));
        ResObject res = new ResObject(minPriceIndex, maxPriceIndex, maxProfit, buyIndexOfMaxProfit, sellIndexOfMaxProfit);
        return res;
        
    }
    private int max(int a, int b, int c){
        return Math.max(a, Math.max(b, c));
    }
    
}
class ResObject{
    int minPriceIndex;
    int maxPriceIndex;
    int maxProfit;
    int buyIndexOfMaxProfit;
    int sellIndexOfMaxProfit;
    public ResObject(int minPriceIndex, int maxPriceIndex, int maxProfit, int buyIndexOfMaxProfit, int sellIndexOfMaxProfit){
        this.minPriceIndex = minPriceIndex;
        this.maxPriceIndex = maxPriceIndex;
        this.maxProfit = maxProfit;
        this.buyIndexOfMaxProfit = buyIndexOfMaxProfit;
        this.sellIndexOfMaxProfit = sellIndexOfMaxProfit;
    }
    @Override
    public String toString(){
        return minPriceIndex+" "+maxPriceIndex+" "+maxProfit+" "+buyIndexOfMaxProfit+" "+sellIndexOfMaxProfit;
    }
}
```


#### Using array/tuple


```
// divide and conquer, O(nlogn)
// get i and j
class Solution {
    int max;
    public int maxProfit(int[] prices) {
        if(prices.length==0)    return 0;
        return Math.max(maxProfit(prices, 0, prices.length)[2], 0);
    }
    // start inclusive, end exclusive
    // returns minPrice, maxPrice and maxProfit
    private int[] maxProfit(int[] prices, int start, int end) {
        // end if there is only one number
        if(start+1==end){
            return new int[] {prices[start], prices[start], 0};
        }
        int middle = (start+end)/2;
        int[] l = maxProfit(prices, start, middle);
        int[] r = maxProfit(prices, middle, end);
        // maxProfit compares left maxProfit, right maxProfit, and right max price - left min price
        return new int[] {Math.min(l[0], r[0]), Math.max(l[1], r[1]), max(l[2], r[2], r[1]-l[0])};
    }
    private int max(int a, int b, int c){
        return Math.max(a, Math.max(b, c));
    }
    
}
```


### Complex DP Solution


```
// max of current choice
// 3 choices: buy/sell/do nothing
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0)    return 0;
        int[][] dp = new int[prices.length][3];// (length days, transaction stage not buy, bought, sold)
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        dp[0][2] = Integer.MIN_VALUE;
        for(int i=1; i<dp.length; i++){
            dp[i][0] = dp[i-1][0];
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]-prices[i]);
            dp[i][2] = Math.max(dp[i-1][2], dp[i-1][1]+prices[i]);
        }
        return Math.max(dp[prices.length-1][2], 0);
    }
}
```


### Final Solution(DP)


min, res are changing as I walk through prices, in case no price after min then I have to buy in a low price but not min price.


```
class Solution {
    public int maxProfit(int[] prices) {
        int res = 0;
        int min = Integer.MAX_VALUE;
        for(int i=0; i<prices.length; i++){
            if(prices[i]<min)       min = prices[i];
            if(prices[i]-min>res)   res = prices[i]-min;
        }
        return res;
    }
}
```


Time: O(n)


## Best Time to Buy and Sell Stock II


### Description


```
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

```


### Final Solution


```
class Solution {
    public int maxProfit(int[] prices) {
        int res = 0;
        for(int i=1; i<prices.length; i++){
            int todayMinusYes = prices[i]-prices[i-1];
            if(todayMinusYes>0) res+=todayMinusYes;
        }
        return res;
    }
}
```



## 188. Best Time to Buy and Sell Stock IV


Main idea is DP, 3 dimensional array.


First days. 


Second remaining transactions(k, k-1, ..., 1, 0), so k+1 length.


Third is whether holding stock or not. 1 is holding stock, while 0 is not holding stock.


To avoid memory limit exceed, if allowed transactions so many that it's >= prices.length/2, treat it as many transactions as I like. Because even when no transaction limit, I can only buy and sell every day to reach the max transactions, which is prices.length/2(1 day to buy and 1 day to sell, I need 2 days at least to complete 1 transaction).


```
// buy/sell/nothing
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length==0||k==0)    return 0;
        if(k>=prices.length/2){
            int res = 0;
            for(int i=1; i<prices.length; i++){
                int todayMinusYes = prices[i]-prices[i-1];
                if(todayMinusYes>0) res+=todayMinusYes;
            }
            return res;
        }
        int[][][] dp = new int[prices.length][k+1][2];//days, remaining transactions(k, k-1, ..., 1, 0), 1 is holding stock(0 is not holding stock)
        dp[0][k][0] = 0;
        dp[0][k][1] = -prices[0];
        for(int i=0; i<k; i++){
            dp[0][i][0] = Integer.MIN_VALUE/4;
            dp[0][i][1] = Integer.MIN_VALUE/4;
        }
        for(int i=1; i<prices.length; i++){
            for(int j=0; j<k+1; j++){
                if(j+1<k+1) dp[i][j][0] = Math.max(dp[i-1][j+1][1]+prices[i], dp[i-1][j][0]);
                else      dp[i][j][0] = dp[i-1][j][0];
                dp[i][j][1] = Math.max(dp[i-1][j][0]-prices[i], dp[i-1][j][1]);
            }
        }
        int max = 0;
        for(int i=0; i<k; i++){
            for(int j=0; j<2; j++){
                int num = dp[prices.length-1][i][j];
                if(num>max) max = num;
            }
        }
        return max;
    }
}
```
