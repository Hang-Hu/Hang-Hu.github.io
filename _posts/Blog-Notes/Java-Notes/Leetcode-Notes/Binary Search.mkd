## 74. Search a 2D Matrix

### Description

```
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
```

### Final Solution

Convert from 1D index to x and y. Search just like 1D array.

```
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0) return false;
        return binarySearch(matrix, target, 0, matrix.length*matrix[0].length);
    }
    // startIdx is inclusive, endIdx is exclusive
    private boolean binarySearch(int[][] matrix, int target, int startIdx, int endIdx){
        if(startIdx==endIdx) return false;
        int mid = (startIdx+endIdx)/2;
        int value = valueInMatrix(matrix, mid);
        if(target==value){
            return true;
        }else if(target<value){
            return binarySearch(matrix, target, startIdx, mid);
        }else{ // >
            return binarySearch(matrix, target, mid+1, endIdx);
        }
    }
    private int valueInMatrix(int[][] matrix, int index1D){
        int colLen = matrix[0].length;
        int x = index1D/colLen;
        int y = index1D%colLen;
        return matrix[x][y];
    }
}
```

## 240. Search a 2D Matrix II

### Description

```
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.
```

### Solution - Binary Search

```
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0) return false;
        int idx = arcSearch(matrix, target, 0, Math.min(matrix.length-1, matrix[0].length-1));
        // System.out.println(idx);
        if(idx==-1) return false;
        if(idx==-2) return true;
        /*
        Check
        **??
        **??
        ??i
        ??
        */
        int count = 0;
        for(; idx<=Math.max(matrix.length-1, matrix[0].length-1); idx++){
            if(idx-1-count<matrix.length && idx<matrix[0].length && verticalBinarySearch(0, idx-1-count, idx, matrix, target)) return true;
            if(idx<matrix.length && idx-1-count<matrix[0].length && horizontalBinarySearch(idx, 0, idx-1-count, matrix, target)) return true;
            count++;
        }
        return false;
        
    }
    // startIdx is inclusive, endIdx is inclusive
    private boolean verticalBinarySearch(int xStart, int xEnd, int y, int[][] matrix, int target){
        if(xStart>xEnd) return false;
        int mid = (xStart+xEnd)/2;
        if(target==matrix[mid][y]){
            return true;
        }else if(target<matrix[mid][y]){
            return verticalBinarySearch(xStart, mid-1, y, matrix, target);
        }else{ // >
            return verticalBinarySearch(mid+1, xEnd, y, matrix, target);   
        }
    }
    // startIdx is inclusive, endIdx is inclusive
    private boolean horizontalBinarySearch(int x, int yStart, int yEnd, int[][] matrix, int target){
        
        if(yStart>yEnd) return false;
        int mid = (yStart+yEnd)/2;
        // System.out.println(x+" "+yStart+" "+yEnd+" "+matrix[x][mid]);
        if(target==matrix[x][mid]){
            return true;
        }else if(target<matrix[x][mid]){
            return horizontalBinarySearch(x, yStart, mid-1, matrix, target);
        }else{ // >
            return horizontalBinarySearch(x, mid+1, yEnd, matrix, target);   
        }
    }
    
    // startIdx is inclusive, endIdx is inclusive
    // -1 is false, -2 is true, -3 is exceeding part, otherwise it's index to look at
    private int arcSearch(int[][] matrix, int target, int startIdx, int endIdx){
        
        if(startIdx>endIdx) return -1;
        int mid = (startIdx+endIdx)/2;
        // System.out.println(startIdx+" "+endIdx+" "+mid+" "+matrix[mid][mid]);
        if(target==matrix[mid][mid]){
            return -2;
        }else if(target<matrix[mid][mid]){
            if(startIdx>mid-1){
                return mid;
            }
            return arcSearch(matrix, target, startIdx, mid-1);
        }else{ // >
            if(mid+1>endIdx){
                return mid+1;
            }
            return arcSearch(matrix, target, mid+1, endIdx);
        }
    }
}
```

### Solution - Binary Search every row

```
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0; i<matrix.length; i++){
            if(binarySearch(matrix, target, i, 0, matrix[0].length)) return true;
        }
        return false;
    }
    // colStart is inclusive, colEnd is exclusive
    public boolean binarySearch(int[][] matrix, int target, int rowIdx, int colStart, int colEnd){
        if(colStart>=colEnd) return false;
        int mid = (colStart+colEnd)/2;
        if(target==matrix[rowIdx][mid]){
            return true;
        }else if(target<matrix[rowIdx][mid]){
            return binarySearch(matrix, target, rowIdx, colStart, mid);
        }else{
            return binarySearch(matrix, target, rowIdx, mid+1, colEnd);
        }
    }
}
```

```
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        return divideAndConquer(matrix, target, 0, matrix[0].length, 0, matrix.length);
    }
    // left, top is inclusive, right, bottom is exclusive
    private boolean divideAndConquer(int[][] matrix, int target, int left, int right, int top, int bottom){
        int midRow = (top+bottom)/2;
        binarySearch();
    }    
    private binarySearch(int[][] matrix, int target, int rowIdx, int colStart, int colEnd){
        
    }
}
```