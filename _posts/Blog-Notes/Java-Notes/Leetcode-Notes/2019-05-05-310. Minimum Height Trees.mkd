---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## Description



## Solution 

Take every node as root, and compute the height, nodes with min height will be returned. I used dfs to compute the height, with depth as parameter. Trick to decrease time is, if current height is bigger than current minHeight in dfs height(), stop recursion and return directly (there is no need to compute any more).

But still Time Exceeds Limit.

```
class Solution {
    private int minHeight;
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Node> nodes = new ArrayList<>();
        for(int i=0; i<n; i++){
            nodes.add(new Node());
        }
        for(int[] pair: edges){
            nodes.get(pair[0]).neighbors.add(pair[1]);
            nodes.get(pair[1]).neighbors.add(pair[0]);
        }
        this.minHeight = n-1;
        List<Integer> rootsOfMHT = new ArrayList<>();
        for(int i=0; i<n; i++){
            setUnvisited(nodes);
            int height = height(i, nodes, 0);
            if(height<this.minHeight){
                this.minHeight = height;
                rootsOfMHT.clear();
                rootsOfMHT.add(i);
            }else if(height==this.minHeight){
                rootsOfMHT.add(i);
            }
        }
        return rootsOfMHT;
    }
    private int height(int root, List<Node> nodes, int depth){
        if(depth>this.minHeight)    return depth;
        nodes.get(root).visited = true;
        int max = depth;
        for(int neighbor: nodes.get(root).neighbors){
            Node neighborNode = nodes.get(neighbor);
            if(neighborNode.visited == false){
                max = Math.max(max, height(neighbor, nodes, depth+1));
            }
        }
        return max;
    }
    private void setUnvisited(List<Node> nodes){
        for(Node node: nodes){
            node.visited = false;
        }   
    }
}
class Node {
    boolean visited = false;
    List<Integer> neighbors = new ArrayList<>();
}
```


n is number of nodes, m is number of edges.


Time: O(nlogn)

Space: O(n+m)


## First Non Time Exceed Solution


Based on typological order. Remove leaves until one node or no node left. If one node left, this one is the one in the middle, whose MHT is minimum. If no node left, the previous set of nodes is MHT.


For example, remove leaves 0, 2, 3, 1 left


```
Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]
```


Example 2, remove leaves 0, 1, 2, 5, I have 3, 4 left, remove leaves 3, 4, nothing remains in graph. Then the previous nodes in graph [3, 4] is the answer.


```
Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]
```


```
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        Node[] nodes = new Node[n];
        initNodes(nodes);
        addEdges(nodes, edges);
        List<Node> nodeList = new ArrayList<>();
        initNodeList(nodeList, nodes);
        List<Node> preList = new ArrayList<>();
        while(nodeList.size()>1){
            preList = new ArrayList<>(nodeList);
            removeNodeOfOneNeighbor(nodeList);
        }
        if(nodeList.size()==0)  return nodeListToIntList(preList);
        else                    return nodeListToIntList(nodeList);
    }
    private void initNodes(Node[] nodes){
        for(int i=0; i<nodes.length; i++){
            nodes[i] = new Node(i);
        }
    }
    private Node findNodeByVal(int val, Node[] nodes){
        return nodes[val];
    }
    private void addEdges(Node[] nodes, int[][] edges){
        for(int i=0; i<edges.length; i++){
            Node node1 = findNodeByVal(edges[i][0], nodes);
            Node node2 = findNodeByVal(edges[i][1], nodes);
            node1.addNeighbor(node2);
            node2.addNeighbor(node1);
        }
    }
    private void removeNodeOfOneNeighbor(List<Node> nodeList){
        List<Node> nodesToRemove = new ArrayList<>();
        for(int i=0; i<nodeList.size(); i++){
            Node node = nodeList.get(i);
            if(node.neighbors.size()==1){
                nodesToRemove.add(node);
            }
        }
        for(Node nodeToRemove: nodesToRemove){
            nodeList.remove(nodeToRemove);
            if(!nodeToRemove.neighbors.isEmpty())   nodeToRemove.neighbors.get(0).removeNeighbor(nodeToRemove);
        }
    }
    private void initNodeList(List<Node> nodeList, Node[] nodes){
        for(int i=0; i<nodes.length; i++){
            nodeList.add(nodes[i]);
        }
    }
    private List<Integer> nodeListToIntList(List<Node> nodeList){
        List<Integer> ans = new ArrayList<>();
        for(Node node: nodeList){
            ans.add(node.val);
        }
        return ans;
    }
}
class Node {
    int val;
    List<Node> neighbors;
    public Node(int val) {
        this.val = val;
        this.neighbors = new ArrayList<>();
    }
    public void addNeighbor(Node neighbor){
        neighbors.add(neighbor);
    }
    public void removeNeighbor(Node neighbor){
        neighbors.remove(neighbor);
    }
    @Override
    public String toString(){
        return "" + this.val;
    }
}
```


Time: O(n^2)

Space: O(n^2)


## Version 2


First BFS to find a leaf, second BFS from that leaf to mark level for every node. DFS to find nodes with middle level in the path to maxLevel.



```
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        Node[] nodes = new Node[n];
        initNodes(nodes);
        addEdges(nodes, edges);
        Node leaf = bfs(findNodeByVal(0, nodes));
        
        setNotVisited(nodes);
        int maxLevel = bfs(leaf).level;
        
        List<Node> res = new ArrayList<>();
        setNotVisited(nodes);
        Set<Integer> levelSet = new HashSet<>();
        levelSet.add(maxLevel/2);
        if(maxLevel%2==0){
            dfs(leaf, res, levelSet, maxLevel);
        }else{
            levelSet.add(maxLevel/2+1);
            dfs(leaf, res, levelSet, maxLevel);
        }
        
        return res.stream().map(node -> node.val).collect(Collectors.toList());
    }
    private boolean dfs(Node node, List<Node> res, Set<Integer> levelSet, int maxLevel){
        if(node.visited==true)              return false;
        if(levelSet.contains(node.level))   res.add(node);
        if(node.level == maxLevel)          return true;
        node.visited = true;
        for(Node next: node.neighbors){
            if(dfs(next, res, levelSet, maxLevel)==true)   return true;
        }
        res.remove(node);
        return false;
    }
    private void setNotVisited(Node[] nodes){
        for(Node node: nodes){
            node.visited = false;
        }
    }
    private Node bfs(Node node){
        Queue<Node> q = new LinkedList<>();
        q.add(node);
        node.level = 0;
        Node pollNode = null;
        while(!q.isEmpty()){
            pollNode = q.poll();
            pollNode.visited = true;
            for(Node next: pollNode.neighbors){
                if(next.visited==false){
                    q.add(next);
                    next.level = pollNode.level+1;
                }
            }
        }
        return pollNode;
    }
    private void initNodes(Node[] nodes){
        for(int i=0; i<nodes.length; i++){
            nodes[i] = new Node(i);
        }
    }
    private Node findNodeByVal(int val, Node[] nodes){
        return nodes[val];
    }
    private void addEdges(Node[] nodes, int[][] edges){
        for(int i=0; i<edges.length; i++){
            Node node1 = findNodeByVal(edges[i][0], nodes);
            Node node2 = findNodeByVal(edges[i][1], nodes);
            node1.addNeighbor(node2);
            node2.addNeighbor(node1);
        }
    }


}
class Node {
    int val;
    List<Node> neighbors;
    int level;
    boolean visited;
    public Node(int val) {
        this.val = val;
        this.neighbors = new ArrayList<>();
        this.visited = false;
    }
    public void addNeighbor(Node neighbor){
        neighbors.add(neighbor);
    }
    public void removeNeighbor(Node neighbor){
        neighbors.remove(neighbor);
    }
    @Override
    public String toString(){
        return " " + this.val + " " + this.level;
    }
}
```



Time: O(n)

Space: O(n)
