---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 39. Combination Sum

### Description

```
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

```


### Final Solution - DFS+Backtracking+SortFirst


I used dfs and walk through the array to try to add every number, the recursive function is `dfs(int remain, List<Integer> path, int start)`, where remain is remaining target, path is current numbers selected, `start` is the index to start with.


To remove same solution with different order, like `1,1,2`, `1,2,1` and `2,1,1`, I sort array first, then assign current index i to the start index, so that next `dfs` will only use this number and numbers bigger than that.


```
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, new ArrayList<Integer>(), ans, 0);
        return ans;
    }
    private void dfs(int[] candidates, int remain, List<Integer> path, List<List<Integer>> solutions, int start){
        if(remain==0){
            solutions.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i=start; i<candidates.length; i++){
            if(remain-candidates[i]>=0){
                path.add(candidates[i]);
                dfs(candidates, remain-candidates[i], path, solutions, i);
                path.remove(path.size()-1);    
            }
        }
    }
}
```


## 40. Combination Sum II


### Description


```
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
```


### Final Solution - DFS+Backtracking+SortFirst


Use dfs to walk through array from `start` to last element. 


`dfs(int remain, List<Integer> path, int start)`


Sort first and use `start` and assign `i+1` to make sure each element is used once.


Use `pre` for previous candidates[i] and check `pre!=candidates[i]` to make sure repeat number not used repeatedly to construct many solutions that are the same. For candidates `[1,1,2]` and target `3`, first `1` and `2` selected, second `1` and `2` selected, then the result is `[[1,2],[1,2]]`.


```
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> solutions = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, new ArrayList<Integer>(), solutions, 0);
        return solutions;
    }
    private void dfs(int[] candidates, int remain, List<Integer> path, List<List<Integer>> solutions, int start){
        if(remain==0){
            solutions.add(new ArrayList<Integer>(path));
            return;
        }
        int pre = -1;
        for(int i=start; i<candidates.length; i++){
            if(remain-candidates[i]>=0 && pre!=candidates[i]){
                path.add(candidates[i]);
                dfs(candidates, remain-candidates[i], path, solutions, i+1);
                path.remove(path.size()-1);    
                pre = candidates[i];
            }
        }
    }
}
```


## 377. Combination Sum IV


### Description


```
Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:

nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.
 

Follow up:
What if negative numbers are allowed in the given array?
How does it change the problem?
What limitation we need to add to the question to allow negative numbers?
```


### Final Solution - DFS+DP Memorization


Use dfs to walk through the array and select each element.


`dfs(int target)`


Use `int[] memo` to store the param and result of `dfs`, init memo[i] to be -1 to check if it's calculated or not.


```
class Solution {
    private int[] memo;
    public int combinationSum4(int[] nums, int target) {
        memo = new int[target+1];
        init(memo);
        return dfs(nums, target);
    }
    private void init(int[] memo){
        for(int i=0; i<memo.length; i++) memo[i] = -1;
    }
    private int dfs(int[] nums, int target){
        if(target==0) return 1;
        if(memo[target]!=-1) return memo[target];
        int count = 0;
        for(int i=0; i<nums.length; i++){
            if(target-nums[i]>=0){
                count += dfs(nums, target-nums[i]);
            }
        }
        memo[target] = count;
        return count;
    }
}
```
