---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
##  Course Schedule I

### Description

```
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
```


### Solution


Find all sources, start from each to detect any cycle(dfs+set). If no cycle, check if exist component that has cycle so there is no source(exist node that not visited but points to other course).



```
// Since 0 to n-1 uniquesly represents the node, use hashmap for node -> nextNodes
class Solution {
    Map<Integer, List<Integer>> map = new HashMap<>();
    Map<Integer, Integer> incomingEdgesMap = new HashMap<>(); // (courseNo, number of incoming edges for this course)
    Set<Integer> visitedCourses = new HashSet<>();
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(prerequisites.length==0) return true;
        initGraph(prerequisites);
        List<Integer> sourceList = findSources(numCourses);
        if(sourceList.size()==0)  return false;
        // try all sources, if one has cycle, then cannot finish
        for(Integer source: sourceList){
            if(hasCycle(source))    return false;
        }
        // for any courses not visited, if it has next course, it shows that it's not visited from source, indicating there is a cycle so cannot find a source that can visit this course.
        // 1--->2
        //  \<-/
        for(int i=0; i<numCourses; i++){
            if(!this.visitedCourses.contains(i) && this.map.containsKey(i)){
                 return false;
            }
        }
        return true;
    }
    private List<Integer> findSources(int numCourses){
        List<Integer> ans = new ArrayList<>();
        
        for(int i=0; i<numCourses; i++){
            // source has not imcoming edges, and must have next nodes
            if(this.incomingEdgesMap.containsKey(i)==false && this.map.containsKey(i)) ans.add(i);
        }
        return ans;
    }
    private boolean hasCycle(int sourceCourse){
        Set<Integer> visitedPath = new HashSet<>();
        return dfs(visitedPath, sourceCourse);
    }
    private boolean dfs(Set<Integer> visitedPath, int courseNum){
        this.visitedCourses.add(courseNum);
        if(visitedPath.contains(courseNum))  return true;
        visitedPath.add(courseNum);
        if(this.map.get(courseNum) == null) return false;
        for(Integer next: this.map.get(courseNum)){
            if(dfs(visitedPath, next))   return true;
            visitedPath.remove(next);
        }
        // cannot use visitedPath.remove(courseNum); instead of next here because 3rd line return without going through this line, then not remove at all
        return false;
    }
    private void initGraph(int[][] prerequisites){
        for(int i=0; i<prerequisites.length; i++){
            int course = prerequisites[i][0];
            int preCourse = prerequisites[i][1];
            if(this.incomingEdgesMap.containsKey(course)){
                this.incomingEdgesMap.put(course, this.incomingEdgesMap.get(course)+1);
            }else{
                this.incomingEdgesMap.put(course, 1);
            }
            if(this.map.containsKey(preCourse)){
                this.map.get(preCourse).add(course);
            }else{
                this.map.put(preCourse, new ArrayList<Integer>(){{add(course);}});
            }
        }
    }
}
```



##  Course Schedule II


### Description


### TP Order Solution


Init graph with hashmap, find all sources(no incoming edge but has next node), loop with each source. For each source, remove node with no incoming edges until so such node, at removal time add the removed node to ans. Finishing all sources, if still remains edge, it shows cycle exists in graph, return empty array. Otherwise add nodes not in prerequisites to ans, with the help of bit map. First round mark node in prerequisites to true, second round add false node to ans.


```
class Solution {
    Map<Integer, List<Integer>> map = new HashMap<>();
    Map<Integer, Integer> incomingEdgesMap = new HashMap<>();
    Set<Integer> nodesWithNoIncomingEdge = new HashSet<>();
    List<Integer> ansList = new ArrayList<>();
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        initGraph(prerequisites);
        List<Integer> sources = findSources(numCourses);
        for(int source: sources){
            this.nodesWithNoIncomingEdge.add(source);
            while(this.nodesWithNoIncomingEdge.isEmpty() == false){
                removeNode();
            }
        }
        // if the remian graph has edge after typological order removal, there exists cycle
        if(anyRemainingEdges()){
            return new int[]{};
        }else{
            boolean[] nodesInPrerequisitesBitMap = new boolean[numCourses];
            for(int node: ansList){
                nodesInPrerequisitesBitMap[node] = true;
            }
            for(int i=0; i<nodesInPrerequisitesBitMap.length; i++){
                if(nodesInPrerequisitesBitMap[i]==false)    this.ansList.add(i);
            }
            return this.ansList.stream().mapToInt(i->i).toArray();
        }
    }
    private void removeNode(){
        Set<Integer> nextSet = new HashSet<>();
        for(int node: this.nodesWithNoIncomingEdge){
            this.ansList.add(node);
            List<Integer> nextNodes = this.map.get(node);
            for(int i=0; nextNodes!=null && i<nextNodes.size(); i++){
                int nextNode = nextNodes.get(i);
                int originalNum = this.incomingEdgesMap.get(nextNode);
                this.incomingEdgesMap.put(nextNode, originalNum-1);
                if(originalNum-1 == 0)  nextSet.add(nextNode);
            }
        }
        this.nodesWithNoIncomingEdge = nextSet;
    }
    private void initGraph(int[][] prerequisites){
        for(int i=0; i<prerequisites.length; i++){
            int course = prerequisites[i][0];
            int pre = prerequisites[i][1];
            
            if(this.map.containsKey(pre)){
                this.map.get(pre).add(course);
            }else{
                this.map.put(pre, new ArrayList<Integer>(){{add(course);}});
            }
            this.incomingEdgesMap.put(course, this.incomingEdgesMap.getOrDefault(course, 0)+1);
        }
    }
    private List<Integer> findSources(int numCourses){
        List<Integer> sources = new ArrayList<>();
        for(int i=0; i<numCourses; i++){
            // source must have no incoming edges, and points to at least one node
            if(this.map.containsKey(i)==true && (this.incomingEdgesMap.get(i)==null || this.incomingEdgesMap.get(i)==0))    sources.add(i);
        }
        return sources;
    }
    // if exist any node without incoming edge >=1, showing the graph still has edge
    private boolean anyRemainingEdges(){
        for(int num: this.incomingEdgesMap.values()){
            if(num!=0)  return true;
        }
        return false;
    }
}
```


Time: O(m). m is number of edges, which equals prerequisites.length.

Space: O(m).


But the official solution ignores m, they just used O(n) for both time and space complexity.


### DFS Solution


Also O(n) for space and time complexity in official solution.


Use the post number from big to small to represent the tp order. When there is no next node, add this node to ans list. Finally, reverse the ans list to get the tp order.
