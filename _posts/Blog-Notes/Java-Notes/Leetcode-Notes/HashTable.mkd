## 957. Prison Cells After N Days


### Description

```
There are 8 prison cells in a row, and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:

If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
(Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.)

We describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.

Given the initial state of the prison, return the state of the prison after N days (and N such changes described above.)

 

Example 1:

Input: cells = [0,1,0,1,1,0,0,1], N = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: 
The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

Example 2:

Input: cells = [1,0,0,1,0,0,1,0], N = 1000000000
Output: [0,0,1,1,1,1,1,0]
 

Note:

cells.length == 8
cells[i] is in {0, 1}
1 <= N <= 10^9
```

### Final Solution - Repetition + Map

1. simulate the update day by day
2. Use cells and cells2 to in turn update status
2. That will exceed the time limit. As there are 2^8=256 possibilities. There will definitely be repetition of status. Store each day's value and i for ith day to Map, when it comes to the same value, use % to cut the repeated status.


```
class Solution {
    public int[] prisonAfterNDays(int[] cells, int N) {
        int[] cells2 = new int[cells.length];
        Map<Integer, Integer> map = new HashMap<>(); // (cell integer, i)
        boolean found = false;
        int[] cellsUsed = cells;
        int[] cellsToUse = cells2;
        for(int i=0; i<N; i++){
            int value = toValue(cellsUsed);
            if(found==false && map.containsKey(value)){
                found = true;
                i = N-(N-i)%(i-map.get(value))-1;
                continue;
            }
            map.put(value, i);
            for(int j=0; j<cellsToUse.length; j++){
                if(j==0 || j==cells.length-1) cellsToUse[j] = 0;
                else cellsToUse[j] = updateState(cellsUsed[j-1], cellsUsed[j+1]);                    
            }
            // switch
            if(cellsUsed==cells){
                cellsUsed = cells2;
                cellsToUse = cells;
            }else{
                cellsUsed = cells;
                cellsToUse = cells2;
            }
        }
        return cellsUsed==cells ? cells : cells2;
    }
    private int toValue(int[] arr){
        int ans = 0;
        for(int i=0; i<arr.length; i++){
            ans = ans*10;
            ans += arr[i];
        }
        return ans;
    }
    private int updateState(int n1, int n2){
        if(n1==n2) return 1;
        else return 0;
    }
}
```

## 692. Top K Frequent Words


### Description

### First Solution - Map

1. Put all words in map (word, occurrence)
2. From k to 1, find the word largest occurrence, add to `ans`, set its occurrence to be 0 to void it for next round.

```
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>(); // (word, occurrence)
        for(String w: words){
            map.put(w, map.getOrDefault(w, 0)+1);
        }
        List<String> ans = new ArrayList<>();
        while(k>0){
            int maxOccurrence = 0;
            String wordWithMaxOccurrence = "";
            for(Map.Entry<String, Integer> e: map.entrySet()){
                if(e.getValue()>maxOccurrence){
                    maxOccurrence = e.getValue();
                    wordWithMaxOccurrence = e.getKey();
                }else if(e.getValue()==maxOccurrence && e.getKey().compareTo(wordWithMaxOccurrence)<0){
                    wordWithMaxOccurrence = e.getKey();
                }
            }
            map.put(wordWithMaxOccurrence, 0);
            ans.add(wordWithMaxOccurrence);
            k--;
        }
        return ans;
    }
}
```

Time: O(k*n)

Space: O(n)

### Solution - Map+Heap

Map is same usage as before. Use maxHeap to output k words with largest occurrence.

```
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>(); // (word, occurrence)
        for(String w: words){
            map.put(w, map.getOrDefault(w, 0)+1);
        }
        List<String> ans = new ArrayList<>();
        Queue<Map.Entry<String, Integer>> q = new PriorityQueue<>(new Comparator<Map.Entry<String, Integer>>(){
            @Override
            public int compare(Map.Entry<String, Integer> e1, Map.Entry<String, Integer> e2){
                int occur = e2.getValue()-e1.getValue();
                if(occur!=0) return occur;
                return e1.getKey().compareTo(e2.getKey())<0?-1:1;
            }
        });
        for(Map.Entry<String, Integer> e: map.entrySet()) q.add(e);
        for(int i=0; i<k; i++) ans.add(q.poll().getKey());
        return ans;
    }
}
```

Time: O(n)+O(nlogn)+O(klogn) = O(nlogn)

Space: O(n)+O(n) = O(n)

### Final Solution - freqMap+minHeap+Poll if heap size > K. 

The improvement from last one is that, I used minHeap instead of maxHeap. And when adding into heap, once size>k, I poll out those small entries. So that size of heap is always <= k instead of n. 

Finally, I just reverse `ans` to get the result.

```
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>(); // (word, occurrence)
        for(String w: words){
            map.put(w, map.getOrDefault(w, 0)+1);
        }
        List<String> ans = new ArrayList<>();
        Queue<Map.Entry<String, Integer>> minHeap = new PriorityQueue<>(new Comparator<Map.Entry<String, Integer>>(){
            @Override
            public int compare(Map.Entry<String, Integer> e1, Map.Entry<String, Integer> e2){
                int occur = e1.getValue()-e2.getValue();
                if(occur!=0) return occur;
                return e1.getKey().compareTo(e2.getKey())<0?1:-1;
            }
        });
        for(Map.Entry<String, Integer> e: map.entrySet()){
            minHeap.add(e);
            if(minHeap.size()>k) minHeap.poll();
        }
        for(int i=0; i<k; i++) ans.add(minHeap.poll().getKey());
        Collections.reverse(ans);
        return ans;
    }
}
```

Time: O(n)+O((n+n-k)*logk)+O(klogk) = O(nlogk). `n+n-k` because n added into minHeap, then n-k polled from minHeap.

Space: O(n)+O(k) = O(n)
