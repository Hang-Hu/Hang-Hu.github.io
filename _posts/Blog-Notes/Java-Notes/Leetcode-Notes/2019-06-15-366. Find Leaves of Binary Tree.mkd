---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## Solution 1 - TP sort - 3 ms(19.24%)

Use graph's topological sort to do the job.

```
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root==null)  return ans;
        Map<TreeNode, Integer> graph = new HashMap<>(); // (Node, edges incident)
        Map<TreeNode, TreeNode> parentMap = new HashMap<>(); // (Node, parent node)
        Set<TreeNode> leaves = new HashSet<>();
        graph.put(root, 0);
        initGraph(graph, root, leaves, parentMap);
        while(leaves.isEmpty()==false){
            addToAns(ans, leaves);
            leaves = update(graph, leaves, parentMap);
        }
        return ans;
    }
    private void addToAns(List<List<Integer>> ans, Set<TreeNode> leaves){
        List<Integer> l = new ArrayList<>();
        for(TreeNode n: leaves) l.add(n.val);
        ans.add(l);
    }
    private Set<TreeNode> update(Map<TreeNode, Integer> graph, Set<TreeNode> leaves, Map<TreeNode, TreeNode> parentMap){
        Set<TreeNode> newLeaves = new HashSet<>();
        for(TreeNode leaf: leaves){
            graph.put(leaf, 0);
            TreeNode parent = parentMap.get(leaf);
            if(parent!=null){
                graph.put(parent, graph.get(parent)-1);
                if(parentMap.containsKey(parent)){ // parent is not root
                    if(graph.get(parent)==1) newLeaves.add(parent);
                }else{ // parent is root
                    if(graph.get(parent)==0) newLeaves.add(parent);
                }
            }
        }
        return newLeaves;
    }
    private void initGraph(Map<TreeNode, Integer> graph, TreeNode root, Set<TreeNode> leaves, Map<TreeNode, TreeNode> parentMap){
        if(root.left==null && root.right==null) leaves.add(root);
        if(root.left!=null){
            graph.put(root, graph.get(root)+1);
            graph.put(root.left, 1);
            parentMap.put(root.left, root);
            initGraph(graph, root.left, leaves, parentMap);
        }
        if(root.right!=null){
            graph.put(root, graph.get(root)+1);
            graph.put(root.right, 1);
            parentMap.put(root.right, root);
            initGraph(graph, root.right, leaves, parentMap);
        }
    }
}
```


## Solution 2


Height of node is max height of its child node +1, the leaf has height of 0 to match with index 0.


Add to `ans` by height recursively.


```
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        height(root, ans);
        return ans;
    }
    private int height(TreeNode root, List<List<Integer>> ans){
        if(root==null) return -1; // so that leaf can get height -1+1=0
        int h = 1 + Math.max(height(root.left, ans), height(root.right, ans));
        if(ans.size() < h+1) ans.add(new ArrayList<Integer>());
        ans.get(h).add(root.val);
        return h;
    }
}
```
