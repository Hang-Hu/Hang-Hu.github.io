## 152. Maximum Product Subarray

### Description

```
Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
```

### First Solution MLE

opt(i, j) is the product from nums[i](inclusive) to nums[j](exclusive).

```
class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length==0) return 0;
        int[][] opt = new int[nums.length][nums.length+1];
        for(int i=0; i<nums.length; i++) opt[i][i] = 1;
        int max = nums[0];
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<=nums.length; j++){
                opt[i][j] = opt[i][j-1] * nums[j-1];
                max = Math.max(max, opt[i][j]);
            }
        }
        return max;
    }
}
```

Time: O(n^2)
Space: O(n^2)

### Final Solution (DP + minmax)

`opt[i][0]` is the minimum product of subarray from index 0 to i(inclusive), `opt[i][1]` is the maximum product of subarray from index 0 to i(inclusive).

MINMAX: `negative i-1 min` * `negtive nums[i]` > `positive i-1 max` * `negative nums[i]`.

If min of `i-1` is minus, and `nums[i]` is also minus, then product will be positive number, it's larger than positive*negtive, even positive is max for `i-1`

For example, [1,-2,3,-4]

Only remember max: 1, -2, 3, -4, max is 3

Remember max and min: (1,1),(-2,-2),(-6,3),(-12,24), max is 24


```
class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length==0) return 0;
        // opt[i][0] is the min product of subarray ending in index i, 1 stands for max
        int[][] opt = new int[nums.length][2];
        for(int i=0; i<nums.length; i++){
            if(i-1>=0){
                opt[i][0] = min(nums[i], opt[i-1][0]*nums[i], opt[i-1][1]*nums[i]);
                opt[i][1] = max(nums[i], opt[i-1][0]*nums[i], opt[i-1][1]*nums[i]);
            }else{
                opt[i][0] = nums[i];
                opt[i][1] = nums[i];
            }
        }
        int max = nums[0];
        for(int i=0; i<opt.length; i++){
            max = Math.max(max, opt[i][1]);
        }
        return max;
    }
    private int max(int a, int b, int c){
        return Math.max(a, Math.max(b, c));
    }
    private int min(int a, int b, int c){
        return Math.min(a, Math.min(b, c));
    }
}
```


Time: O(n)
Space: O(n)

## 238. Product of Array Except Self

### Description

```
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
```

### First Solution - left and right product

l[i] is product of subarray from first one(0) to index i, first to last not needed, r[i] is product of subarray from last one(len-1) to index i, last to first not needed.

`ans[i] = l[i-1] * r[i+1]`

For example, `1,2,3,4`

```
l: 1 -> 2 ->  6
r:      24 <- 12 <- 4

ans: 24, 12, 2*4, 6 
```


```
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        if(len==1) return new int[] {1}; // if one number, no left nor right side, use 1
        // l[i] is product of subarray from first one(0) to index i, first to last not needed
        int[] l = new int[len-1];
        l[0] = nums[0];
        for(int i=1; i<=len-2; i++){
            l[i] = l[i-1] * nums[i]; // use previous product * current one
        }
        // r[i] is product of subarray from index i to last one(len-1), first to last not needed
        int[] r = new int[len];
        r[len-1] = nums[len-1];
        for(int i=len-2; i>=1; i--){
            r[i] = r[i+1] * nums[i]; // use previous product * current one
        }
        int[] ans = new int[len];
        for(int i=0; i<len; i++){
            if(i-1>=0 && i+1<=len-1)    ans[i] = l[i-1] * r[i+1]; // left side times right side if both exist
            else if(i-1>=0)             ans[i] = l[i-1]; // left side product if no right side
            else if(i+1<=len-1)         ans[i] = r[i+1]; // right side product if no left side
        }
        return ans;
    }
}
```

Time: O(n)
Space: O(n)

### Improve to Final Solution - Use ans to hold value of l, and directly times r


For example, `[1,2,3,4]`


```
l: 1 -> 2 ->  6
r:      24 <- 12 <- 4

ans: 24, 12, 2*4, 6 

Move l right, use 1 for the first spot.

l: 1   - 1  -> 2 -> 6

Move r left, use 1 for the last spot.

r: 24 <- 12 <- 4 -  1

ans[i] = l[i] * r[i]

ans:
   24    12    8    6

Use ans to hold l:

ans:
   1  -> 1  -> 2 -> 6

Use r for current r[i]

r: 24 <- 12 <- 4 <- 1

ans[i] = ans[i]*r:

ans:
   24 <- 12 <- 8 <- 6 
```


```
// l move right, first is 1. r move left, last is 1. Use ans to hold l, use r to represent current r[i]
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        if(len==1) return new int[] {1}; // if one number, no left nor right side, use 1
        int[] ans = new int[len];
        ans[0] = 1;
        for(int i=1; i<=len-1; i++){
            ans[i] = ans[i-1] * nums[i-1];
        }
        int r = 1;
        for(int i=len-2; i>=0; i--){
            r = r * nums[i+1];
            ans[i] = ans[i] * r;
        }
        return ans;
    }
}
```

Time: O(n)
Space: O(1)