## 42. Trapping Rain Water

### Description

```
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
```

### Final Solution - Left Right

1. from left to right, keep the max from 0 to i in leftMax[i]
2. from right to left, keep the max from len-1 to i in rightMax[i]
3. get the min(leftMax[i], rightMax[i]) in min[i]
4. min[i]-height[i] is the water trapped

```
class Solution {
    public int trap(int[] height) {
        if(height.length==0) return 0;
        // from left to right, keep the max from 0 to i in leftMax[i]
        int[] leftMax = new int[height.length];
        leftMax[0] = height[0];
        for(int i=1; i<height.length; i++){
            leftMax[i] = Math.max(leftMax[i-1], height[i]);
        }
        // from right to left, keep the max from len-1 to i in rightMax[i]
        int[] rightMax = new int[height.length];
        rightMax[height.length-1] = height[height.length-1];
        for(int i=height.length-2; i>=0; i--){
            rightMax[i] = Math.max(rightMax[i+1], height[i]);
        }
        // get the min(leftMax[i], rightMax[i]) in min[i]
        int[] min = new int[height.length];
        for(int i=0; i<height.length; i++){
            min[i] = Math.min(leftMax[i], rightMax[i]);
        }
        // min[i]-height[i] is the water trapped
        int ans = 0;
        for(int i=0; i<height.length; i++){
            ans += (min[i]-height[i]);
        }
        return ans;
    }
}
```