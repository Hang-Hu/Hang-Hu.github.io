## 42. Trapping Rain Water

### Description

```
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
```

### Final Solution - Left Right

1. from left to right, keep the max from 0 to i in leftMax[i]
2. from right to left, keep the max from len-1 to i in rightMax[i]
3. get the min(leftMax[i], rightMax[i]) in min[i]
4. min[i]-height[i] is the water trapped

```
class Solution {
    public int trap(int[] height) {
        if(height.length==0) return 0;
        // from left to right, keep the max from 0 to i in leftMax[i]
        int[] leftMax = new int[height.length];
        leftMax[0] = height[0];
        for(int i=1; i<height.length; i++){
            leftMax[i] = Math.max(leftMax[i-1], height[i]);
        }
        // from right to left, keep the max from len-1 to i in rightMax[i]
        int[] rightMax = new int[height.length];
        rightMax[height.length-1] = height[height.length-1];
        for(int i=height.length-2; i>=0; i--){
            rightMax[i] = Math.max(rightMax[i+1], height[i]);
        }
        // get the min(leftMax[i], rightMax[i]) in min[i]
        int[] min = new int[height.length];
        for(int i=0; i<height.length; i++){
            min[i] = Math.min(leftMax[i], rightMax[i]);
        }
        // min[i]-height[i] is the water trapped
        int ans = 0;
        for(int i=0; i<height.length; i++){
            ans += (min[i]-height[i]);
        }
        return ans;
    }
}
```

## 11. Container With Most Water

### Description

```
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

 



The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49
```

### First Solution - Brute Force

Try all possible i and j, use the shorter height and times the width between them by `j-i`.

```
class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        for(int i=0; i<height.length; i++){
            for(int j=height.length-1; j>i; j--){
                max = Math.max(max, (j-i)*Math.min(height[i], height[j]));
            }
        }
        return max;
    }
}
```

Time: O(n^2)

Space: O(1)

### Final Solution - 2 pointers

Start from left as i, and right as j. If `height[i]<height[j]`, i++. Otherwise j--. Use max to keep max area through the process.

```
class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int i=0, j=height.length-1;
        while(i<j){
            max = Math.max(max, area(height, i, j));
            if(height[i]<height[j]){
                i++;
            }else{
                j--;
            }
        }
        return max;
    }
    private int area(int[] height, int i, int j){
        return (j-i)*Math.min(height[i], height[j]);
    }
}
```

Time: O(n)
Space: O(1)