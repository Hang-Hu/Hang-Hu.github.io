---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 332.Reconstruct Itinerary

### Description

```
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
```


### Solution TLE


graph and path in parameter list.


If an edge walked: remove that edge. When returned back, add that edge back.


If an edge walked, add the dest node to path. When returned back, remove it.


This makes sure the graph and path are changing as I dfs walked the graph.


End condition: if destList is empty or null:

1. path.size() smaller than proper size: return

2. path.size() equals than proper size: check if this path is smaller in lexical order compared to this.pathAns and update this.pathAns if it's. Then return.


```
class Solution {
    List<String> pathAns;
    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String, List<String>> graph = new HashMap<>(); // (start airport, list of destinations)
        initGraph(tickets, graph);
        List<String> path = new ArrayList<>();
        path.add("JFK");
        dfs(tickets.size()+1, "JFK", path, graph);
        return this.pathAns;
    }
    private void initGraph(List<List<String>> tickets, Map<String, List<String>> graph){
        for(List<String> ticket: tickets){
            String from = ticket.get(0);
            String dest = ticket.get(1);
            if(graph.get(from)==null){
                graph.put(from, new ArrayList<String>(){{add(dest);}});             
            }else{
                graph.get(from).add(dest);
            }
        }
    }
    private void dfs(int num, String from, List<String> path, Map<String, List<String>> graph){
        List<String> destList = graph.get(from);
        if((destList==null || destList.size()==0) && path.size()==num){
            if(isSmallerInLexical(path, this.pathAns)==true)    this.pathAns = new ArrayList<>(path);
        }
        for(int i=0; destList!=null && i<destList.size(); i++){
            String dest = destList.get(i);
            path.add(dest);
            graph.get(from).remove(i);
            dfs(num, dest, path, graph);
            path.remove(path.size()-1);
            graph.get(from).add(i, dest);

        }
    }
    private boolean isSmallerInLexical(List<String> path, List<String> pathAns){
        if(pathAns==null)   return true;
        for(int i=0; i<path.size(); i++){
            int compareRes = path.get(i).compareTo(pathAns.get(i));
            if(compareRes>0){
                return false;
            }else if(compareRes==0){
                continue;
            }else{//compareRes<0
                return true;
            }
        }
        return false; // they are the same
    }
}
```


### Solution Hierholzer’s Algorithm


Use DFS, every time visit the `destList` alphabeticalll, add node `from` to the start of path when all outgoings of this node was visited. Make sure one edge visited only once by remove the `dest` from the `destList` before dfs. Use `i--` to compensate for current `dest` removed from `destList`.


```
class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String, List<String>> graph = new HashMap<>(); // (start airport, list of destinations)
        initGraph(tickets, graph);
        List<String> path = new ArrayList<>();
        dfs("JFK", path, graph);
        return path;
    }
    private void initGraph(List<List<String>> tickets, Map<String, List<String>> graph){
        for(List<String> ticket: tickets){
            String from = ticket.get(0);
            String dest = ticket.get(1);
            if(graph.get(from)==null){
                graph.put(from, new ArrayList<String>(){{add(dest);}});             
            }else{
                graph.get(from).add(dest);
            }
        }
    }
    private void dfs(String from, List<String> path, Map<String, List<String>> graph){
        List<String> destList = graph.get(from);
        if(destList!=null){
            Collections.sort(destList);// make sure lexical order
            for(int i=0; i<destList.size(); i++){
                String dest = destList.get(i);
                destList.remove(i);
                dfs(dest, path, graph);
                i--;
            }    
        }
        path.add(0, from);
    }
}
```


Time: O(m)

Space: O(m)


### Reference


[eulerian_circuits_and_paths](https://github.com/williamfiset/Algorithms/blob/master/slides/graphtheory/eulerian_circuits_and_paths.pdf)


[Eulerian Path Algorithm(Hierholzer’s Algorithm) | Graph Theory

](https://www.youtube.com/watch?v=8MpoO2zA2l4)


## 753. Cracking the Safe


### Description


```
There is a box protected by a password. The password is n digits, where each letter can be one of the first k digits 0, 1, ..., k-1.

You can keep inputting the password, the password will automatically be matched against the last n digits entered.

For example, assuming the password is "345", I can open it when I type "012345", but I enter a total of 6 digits.

Please return any string of minimum length that is guaranteed to open the box after the entire string is inputted.

Example 1:
Input: n = 1, k = 2
Output: "01"
Note: "10" will be accepted too.

Example 2:
Input: n = 2, k = 2
Output: "00110"
Note: "01100", "10011", "11001" will be accepted too.

Note:
n will be in the range [1, 4].
k will be in the range [1, 10].
k^n will be at most 4096.
```


### Idea


```
Example 1:
Input: n = 1, k = 2
Output: "01"
```


A digit can be [0, 1], n is 1, n can be `0` or `1`. And `01` contains all possibilities of n.


```
Example 2:
Input: n = 2, k = 2
Output: "00110"
```


A digit can be 0, 1, n is 2, so n can be `00`, `01`, `10`, `11`. `00110` contains all posisbilities of n.


The output must contains all possibilities of n, and there are k^n possibilities.


Each node has n-1 digits, the outging edge can be 0 to k-1(k possibilities). The last n-2 digit of a node + outging edge is the neighbor node.


Use Hierholzer’s Algorithm(DFS, append to start when all outgoings visited) to traverse the graph and the path returned is the password, making sure every edge is visited once.


### Solution


The result is start node + edges visited. Therefore in Hierholzer’s I added edge instead of node into path. Like node which should be added when out edges visited, edge should be added when every node/edges visited from this edge. For node it's after for loop. For edge it's after dfs of the node this edge points to.


Can start from any node since it's euler circuit. Here use 0...0 as start point.


Use a hashset to make sure each edge visited only once. In reconstruct itinerary I used edge removal to do the same thing. Since each node(n-1 digits) + outgoing edge is a password, and since the ans has to be of minimum length, no repeat of possible password is allowed. Use set to store each node(n-1 digits) + outgoing edge, compare if contains or not. If contains, this edge visited, try next edge or return if no next edge.


```
class Solution {
    public String crackSafe(int n, int k) {
        if(n==1){
            StringBuilder ans = new StringBuilder();
            for(int i=0; i<k; i++){
                ans.append(i);
            }
            return ans.toString();
        }
        if(k==1){
            StringBuilder ans = new StringBuilder();
            for(int i=0; i<n; i++){
                ans.append(0);
            }
            return ans.toString();
        }
        Set<String> visitedPassword = new HashSet<>();
        StringBuilder startNode = new StringBuilder();
        for(int i=1; i<n; i++)  startNode.append("0");
        StringBuilder path = new StringBuilder();
        path.append(startNode);
        dfs(startNode.toString(), visitedPassword, n, k, path);
        return path.toString();
    }

    private void dfs(String from, Set<String> visitedPassword, int n, int k, StringBuilder path){
        String password = "";
        for(int i=0; i<k; i++){
            password = from+i;
            if(visitedPassword.contains(password)){
                continue;
            }else{
                visitedPassword.add(password);
                dfs(password.substring(1), visitedPassword, n, k, path);
                // everything in the outgoing edge visited, then add this edge to start of path
                path.insert(n-1, i);
            }
        }
    }        
}
```
