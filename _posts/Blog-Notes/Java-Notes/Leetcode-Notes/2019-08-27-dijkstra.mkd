---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## 743. Network Delay Time

### Description

```
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

 

Example 1:



Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2
 

Note:

N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 0 <= w <= 100.

```


### Non heap solution


```
class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        Set<Integer> s = new HashSet<>();
        int[] distance = new int[N+1]; // distance from start node K to each node
        Map<Integer, List<Node>> graph = new HashMap<>(); // (node, List of (neighbor, distance))
        initMap(graph, times);
        initDistance(distance);
        distance[K] = 0; // distance(start, start) = 0
        while(s.size()<N){ // until |S| == |V|
            int node = nodeNotFromSWithMINDIS(distance, s); // node not from S with min distance(start, node)
            if(node==-1) return -1; // cannot find a node not max distance, exist unreachable node from start node
            s.add(node);
            // update distance from start to each neighbor of selected one
            List<Node> neighbors = graph.get(node);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                Node neighbor = neighbors.get(i);
                distance[neighbor.val] = Math.min(distance[neighbor.val], distance[node]+neighbor.distance);
            }
        }
        // get the max delay, which is max of distance from start to each node
        int max = 0; // distance from start to start is 0
        for(int d: distance){
            if(d!=Integer.MAX_VALUE && d>max) max = d;
        }
        return max;
    }
    private void initDistance(int[] distance){
        for(int i=0; i<distance.length; i++){
            distance[i] = Integer.MAX_VALUE;
        }
    }
    private void initMap(Map<Integer, List<Node>> graph, int[][] times){
        for(int i=0; i<times.length; i++){
            if(graph.containsKey(times[i][0])==false) graph.put(times[i][0], new ArrayList<Node>());
            graph.get(times[i][0]).add(new Node(times[i][1], times[i][2]));
        }
    }
    private int nodeNotFromSWithMINDIS(int[] distance, Set<Integer> s){
        int min = Integer.MAX_VALUE;
        int node = -1;
        for(int i=1; i<distance.length; i++){
            if(s.contains(i)==false && distance[i]<min){
                min = distance[i];
                node = i;
            }
        }
        return node;
    }
}
class Node{
    int val;
    int distance;
    public Node(int val, int distance){
        this.val = val;
        this.distance = distance;
    }
}
```


m is the number of edges and n is the number of nodes.


Time: O((m+n)*n) = O(m*n)


Space: O(m+n) = O(m)



### heap solution - Dijkstra+MIN Heap


Traverse `distance` to find the min distance not from S, it takes O(n), to save it, use heap which only take O(logn) to select each min distance.


Use `PriorityQueue` for min heap, `Set` for set S, `Map<Integer, List<Node>> graph` to have the graph.


Loop until all nodes added into `S`.

1. get the node with min `d(start, node)`.

2. update neighbor d of this node. Here unlike non heap solution, since java `PriorityQueue` doesn't provice update inner node and adjust method. As long as neighbor hasn't been added into set S, I will create a new Node with its value and use `d(start, node)+len(node, neighbor)` as distance to add into heap.


Since each node will be added into set S once, and add neighbors not in S, every edge can be added into heap only once. The time complexity for `poll` and `add` will be O(logm)



```
class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        Set<Integer> s = new HashSet<>();
        // Use a min heap for distance from start to node
        Queue<Node> distanceHeap = new PriorityQueue<>(new Comparator<Node>(){
            @Override
            public int compare(Node n1, Node n2){
                return n1.distance - n2.distance;
            }
        });
        Map<Integer, List<Node>> graph = new HashMap<>(); // (node, List of (neighbor, distance from node to neighbor))
        initMap(graph, times);
        distanceHeap.add(new Node(K, 0)); // d(start, start)==0
        int max = 0; // d(start, start) is 0
        while(s.size()<N){ // until |S| == |V|
            // use the min d not from S
            Node node = distanceHeap.poll(); // node definitely not in S, otherwise polled before
            if(node==null) return -1; // cannot find a non-S node, exist unreachable node from start node
            max = Math.max(max, node.distance); // d of the pulled is the min d from start to node
            s.add(node.val);
            // update distance from start to each neighbor of selected one
            List<Node> neighbors = graph.get(node.val);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                Node neighbor = neighbors.get(i);
                // add neighbor with new distance when neighbor not from S
                if(s.contains(neighbor.val)==false) distanceHeap.add(new Node(neighbor.val, node.distance+neighbor.distance));
            }
        }
        return max;
    }
    private void initMap(Map<Integer, List<Node>> graph, int[][] times){
        for(int i=0; i<times.length; i++){
            if(graph.containsKey(times[i][0])==false) graph.put(times[i][0], new ArrayList<Node>());
            graph.get(times[i][0]).add(new Node(times[i][1], times[i][2]));
        }
    }
}
class Node{
    int val;
    int distance;
    public Node(int val, int distance){
        this.val = val;
        this.distance = distance;
    }
}
```


m is the number of edges, and n is the number of nodes, which is N.


Time: O((m+n)*logm)=O(mlogm)


Space: O(m+n)=O(m)


## 787. Cheapest Flights Within K Stops


### Solution - Improved Bellman Ford


1. Init 0th layer d(start, node)=max, d(start, start)=0.

2. In Bellman Ford, repeat |V|-1 times because longest path have |V|-1 edges based on cycle definition. Here repeat K+2 times so that at most K stops, 2 is for start and dest node, i==0 is for init where only start is accessible.

3. In loop I am not using in place update to d(Bellman ford uses in place), because I want to strictly add one more layer per iteration. I cannot update based on current layer, must update based on `i-1` layer.

4. init current layer using `i-1`th d

5. for all edges (u, v)(for all flight (u, v)), if d(u)!=MAX(to avoid add MAX with value and then overflow) and `d(u)+len(u, v)<d(v)`, update `d(v)`.

6. return `d[last_layer][dest]`, if it's MAX return -1, otherwise return it directly.


```
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int[][] distance = new int[K+2][n];
        init(distance, src);
        // repeat K+2 times to make sure K stops
        for(int i=1; i<K+2; i++){
            for(int j=0; j<distance[0].length; j++) distance[i][j] = distance[i-1][j];
            for(int[] flight: flights){
                if(distance[i-1][flight[0]]!=Integer.MAX_VALUE) distance[i][flight[1]] = Math.min(distance[i][flight[1]], distance[i-1][flight[0]]+flight[2]);
            }
        }
        int ans = distance[distance.length-1][dst];
        return ans==Integer.MAX_VALUE ? -1 : ans;
    }
    private void init(int[][] distance, int src){
        for(int j=0; j<distance[0].length; j++){
            if(j==src) distance[0][src] = 0;
            else distance[0][j] = Integer.MAX_VALUE;
        }
    }
    
}
```



n is number of nodes, m is number of edges(flights), K is max number of stops.


Time: O(K*(n+m)) = O(K*m)


Space: O(K*n)


Space can be improved because we only need d of `i-1` and `i`. Using them alternatively would work. It can be improved to O(n)


### Final Solution - Dijkstra+min heap


Use dijkstra and min heap just like final solution of 743. Network Delay Time, the only difference is that `preNodeNum` added into class `Node`, which is used to track number of nodes prior to current node(parent, parant's parant, ..., src). If `node.preNodeNum>K`, node's neighbors will definitely exceed stop limit, cannot update neighbor and add to heap.



```
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        Set<Integer> s = new HashSet<>();
        Map<Integer, List<Node>> graph = new HashMap<>();
        initGraph(graph, flights);
        Queue<Node> distanceMinHeap = new PriorityQueue<>(new Comparator<Node>(){
            @Override
            public int compare(Node n1, Node n2){
                return n1.distance-n2.distance;
            }
        });
        distanceMinHeap.add(new Node(src, 0, 0)); // d(src, src)=0
        while(s.size()<n){
            Node node = distanceMinHeap.poll();
            if(node==null) return -1;
            if(node.val==dst) return node.distance;
            s.add(node.val);
            if(node.preNodeNum>K) continue; // its neighbor will exceed stop limit, cannot add, try next node
            // update neighbors of node and add into heap
            List<Node> neighbors = graph.get(node.val);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                Node neighbor = neighbors.get(i);
                if(s.contains(neighbor)==false) distanceMinHeap.add(new Node(neighbor.val, node.distance+neighbor.distance, node.preNodeNum+1));
            }
        }
        return -1;
    }
    private void initGraph(Map<Integer, List<Node>> graph, int[][] flights){
        for(int[] flight: flights){
            int src = flight[0];
            if(graph.containsKey(src)==false) graph.put(src, new ArrayList<Node>());
            graph.get(src).add(new Node(flight[1], flight[2], -2));
        }
    }
}
class Node{
    int val;
    int distance;
    // if preNodeNum==-2, then distance is from connected to node, ow d is from src to node
    // if preNodeNum==-1, then distance is MAX
    int preNodeNum;
    public Node(int val, int distance, int preNodeNum){
        this.val = val;
        this.distance = distance;
        this.preNodeNum = preNodeNum;
    }
}
```


m is number of edges and n is number of nodes.


Time: O((m+n)*logm)=O(mlogm)


Space: O(m+n)=O(m)



## 882. Reachable Nodes In Subdivided Graph


### First Solution - DFS(TLE)


Problem is duplicate visit of same edge.


When 0->1 is 10, 0->2 is 1, 2->1 is 1, M is 11, then even it's second time to visit 1, I have to continue so that I can visit nodes in 1->3.


```
 0
/  \
1--2
|
3
```


When 0->1 is 4, 0->2 is 1, 2->1 is 1, 1->3 is 1, M is 8. 


First visit 1->3: 0->1->3->4

Second visit 1->3: 0->2->1->3->4


Even it's the second time visiting edge 1->3 in full, I have to continue to let more nodes in 3->4 can be visited. So the important thing is to make sure dis(0, 3) is shortest so that more nodes in 3->4 can be visited. The DFS version visit edges repeatedly to solve the problem, causing TLE.


```
 0
/  \
1--2
|
3
|
4
```


```
class Solution {
    public int reachableNodes(int[][] edges, int M, int N) {
        if(M==0) return 0;
        boolean[] nodeVisited = new boolean[N];
        int[][] visitedNodesInEdge = new int[N][N];
        Map<Integer, List<NodeDis>> graph = new HashMap<>();
        init(graph, edges);
        dfs(graph, 0, M, nodeVisited, visitedNodesInEdge, -1);
        int ans = 0;
        for(int[] edge: edges){
            int i = edge[0];
            int j = edge[1];
            // System.out.println(i+" "+j+" "+visitedNodesInEdge[i][j]+" "+visitedNodesInEdge[j][i]);

            ans += Math.min(visitedNodesInEdge[i][j]+visitedNodesInEdge[j][i], edge[2]);
        }
        System.out.println(ans);
        // start from 1, in case 0 is also visited
        for(int i=1; i<N; i++){
            if(nodeVisited[i]) ans++;
        }
        // System.out.println(ans);
        return ans+1;
    }
    private void dfs(Map<Integer, List<NodeDis>> graph, int nodeVal, int remainingNodeNum, boolean[] nodeVisited, int[][] visitedNodesInEdge, int parent){
        List<NodeDis> neighbors = graph.get(nodeVal);
        if(neighbors!=null){
            for(NodeDis neighbor: neighbors){
                // System.out.println("Start: "+nodeVal+" "+neighbor);
                if(neighbor.val==parent) continue;
                // if(visitedNodesInEdge[nodeVal][neighbor.val]==neighbor.dis) continue;
                // }else{
                if(remainingNodeNum-neighbor.dis>1){ // node will be visited and next edge
                    visitedNodesInEdge[nodeVal][neighbor.val] = neighbor.dis;
                    nodeVisited[neighbor.val] = true;
                    dfs(graph, neighbor.val, remainingNodeNum-neighbor.dis-1, nodeVisited, visitedNodesInEdge, nodeVal);
                }else if(remainingNodeNum-neighbor.dis==1){ // node will be visited
                    visitedNodesInEdge[nodeVal][neighbor.val] = neighbor.dis;
                    nodeVisited[neighbor.val] = true;
                }else{ // node won't be visited
                    // in case this is second visit of the edge a is shorter
                    if(remainingNodeNum>visitedNodesInEdge[nodeVal][neighbor.val]) visitedNodesInEdge[nodeVal][neighbor.val] = remainingNodeNum;
                }
                // }
                // System.out.println(nodeVal+" "+neighbor.val+" "+visitedNodesInEdge[nodeVal][neighbor.val]);
            }
        }
    }
    private void init(Map<Integer, List<NodeDis>> graph, int[][] edges){
        for(int[] edge: edges){
            if(graph.containsKey(edge[0])==false) graph.put(edge[0], new ArrayList<NodeDis>());
            graph.get(edge[0]).add(new NodeDis(edge[1], edge[2]));
            if(graph.containsKey(edge[1])==false) graph.put(edge[1], new ArrayList<NodeDis>());
            graph.get(edge[1]).add(new NodeDis(edge[0], edge[2]));
        }
    }
}
class NodeDis{
    int val;
    int dis;
    public NodeDis(int val, int dis){
        this.val = val;
        this.dis = dis;
    }
    @Override
    public String toString(){
        return "("+val+" "+dis+")";
    }
}
```


### Final Solution


To improve on first DFS solution, where I tried every path from node 0 to each other node, to make sure distance to node is shortest so that usage from node to neighbor can be maximized.


In this solution, I first find the shortest distance from 0 to each node, then update the usage from this polled node to all its neighbors, so that the usage can be maximized easily.


As for distance from 0 to a node, it's the sum of nodes from 0 to that node, 0 is exclusive and that node is inclusive, just like the definition of M, so that they can be easily compared to know if limit reached or not. And for `dis` from node to neighbor, it's the length excluding node and neighbor.


To update usage, I have `int[][] edgeUsage` and `boolean[] nodeUsage`. `edgeUsage` is only for edge excluding 2 nodes in both sides connected to the edge, and `nodeUsage` will indicate if this node reached or not. `Math.min(edgeUsage[i][j]+edgeUsage[j][i], dis)` is the final usage.


i -2/5-> j

i <-1/5- j


i 11001 j


The final usage is `min(2+1, 5)=3`


```
class Solution {
    public int reachableNodes(int[][] edges, int M, int N) {
        if(N==1) return M==0 ? 0 : 1;
        Set<Integer> s = new HashSet<>();
        Map<Integer, List<NodeDis>> graph = new HashMap<>();
        initGraph(graph, edges);
        Queue<NodeDis> minDisHeap = new PriorityQueue<>(new Comparator<NodeDis>() {
            @Override
            public int compare(NodeDis a, NodeDis b) {
                return a.dis - b.dis;
            }
        });
        int[][] edgeUsage = new int[N][N];
        boolean[] nodeUsage = new boolean[N];
        minDisHeap.add(new NodeDis(0, 0));
        while (s.size() < N && minDisHeap.isEmpty()==false) {
            NodeDis node = minDisHeap.poll();
            if(node.dis>=M) break; // distance polled after will also be larger than limit M, no need to continue
            if(s.contains(node.val)) continue; // it's possible that to a node there are 2 path, 1 and 2, both smaller than other distance, so the second makes an error
            s.add(node.val);
            List<NodeDis> neighbors = graph.get(node.val);
            if (neighbors == null) continue;
            for (NodeDis neighbor: neighbors) {
                // update usage for all neighbors of the polled node, since distance to polled node is shortest
                updateUsage(node, neighbor, edgeUsage, nodeUsage, M);
                // update neighbor
                if (s.contains(neighbor.val) == false) {
                    int newDis = node.dis + neighbor.dis + 1; // neighbor.dis is len(node, neighbor) excluding node and neighbor
                    minDisHeap.add(new NodeDis(neighbor.val, newDis));
                }
            }
        }
        return countUsage(edges, edgeUsage, nodeUsage);
    }
    private void updateUsage(NodeDis node, NodeDis neighbor, int[][] edgeUsage, boolean[] nodeUsage, int M){
        int newDis = node.dis + neighbor.dis + 1;
        if (M>=newDis) {
            edgeUsage[node.val][neighbor.val] = neighbor.dis;
            nodeUsage[neighbor.val] = true;
        } else{ // M<newDis
            edgeUsage[node.val][neighbor.val] = Math.max(edgeUsage[node.val][neighbor.val], M-node.dis);
        }
    }
    private int countUsage(int[][] edges, int[][] edgeUsage, boolean[] nodeUsage){
        int ans = 0;
        for(int edge[]: edges){
            int i=edge[0], j=edge[1], dis = edge[2];
            ans += Math.min(edgeUsage[i][j]+edgeUsage[j][i], dis);
        }
        for(int i=1; i<nodeUsage.length; i++){
            if(nodeUsage[i]) ans++;
        }
        return ans+1;
    }
    private void initGraph(Map<Integer, List<NodeDis>> graph, int[][] edges) {
        for (int[] edge: edges) {
            int src = edge[0];
            int dst = edge[1];
            if (graph.containsKey(src) == false) graph.put(src, new ArrayList<NodeDis>());
            graph.get(src).add(new NodeDis(dst, edge[2]));
            if (graph.containsKey(dst) == false) graph.put(dst, new ArrayList<NodeDis>());
            graph.get(dst).add(new NodeDis(src, edge[2]));
        }
    }

}
class NodeDis {
    int val;
    int dis;
    public NodeDis(int val, int dis) {
        this.val = val;
        this.dis = dis;
    }
}
```


Time: O((m+n)*logm)=O(mlogm). For each node, visiting all its neighbors, then actually each edge will be visited twice, for instance, a->b and b->a, so the time complexity for all `updateUsage` is O(m).


Space: O(m+n+n^2) = O(m)



## 505. The Maze II


### Description


[the-maze-ii](https://leetcode.com/problems/the-maze-ii/)


### First Solution - DFS


Improve upon DFS solution of Maze I. Previously I used Set to avoid same slot that has been visited before. Here since we want shortest distance, same slot is good as long as the distance to this slot is smaller than previous distance. So I have a Map for `(position, min distance from start to this position)`, if current distance >= record, return MAX, otherwise put this distance in map.


```
class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        Map<Integer, Integer> map = new HashMap<>(); // (position, min distance from start to this position)
        int res = dfs(maze, start, destination, 0, map);
        return res==Integer.MAX_VALUE ? -1 : res;
    }
    private int dfs(int[][] maze, int[] cur, int[] dst, int distance, Map<Integer, Integer> map){
        int i=cur[0], j=cur[1];
        if(i==dst[0] && j==dst[1]) return distance;
        int pos = position(i, j, maze[0].length);
        if(map.containsKey(pos) && map.get(pos)<=distance) return Integer.MAX_VALUE;
        map.put(pos, distance);
        int ans = Integer.MAX_VALUE;
        //left
        int jL = j;
        while(jL>0 && maze[i][jL-1]==0) jL--;
        if(jL!=j) ans = Math.min(ans, dfs(maze, new int[]{i, jL}, dst, distance+j-jL, map));
        // right
        int jR = j;
        while(jR<maze[0].length-1 && maze[i][jR+1]==0) jR++;
        if(jR!=j) ans = Math.min(ans, dfs(maze, new int[]{i, jR}, dst, distance+jR-j, map));
        // up
        int iU = i;
        while(iU>0 && maze[iU-1][j]==0) iU--;
        if(iU!=i) ans = Math.min(ans, dfs(maze, new int[]{iU, j}, dst, distance+i-iU, map));
        // down
        int iD = i;
        while(iD<maze.length-1 && maze[iD+1][j]==0) iD++;
        if(iD!=i) ans = Math.min(ans, dfs(maze, new int[]{iD, j}, dst, distance+iD-i, map));
        return ans;
    }
    private int position(int i, int j, int colLen){
        return i*colLen+j;
    }
}
```


### Final Solution - Dijkstra + min heap



Use dijkstra and min heap to get the shortest distance from start to dest, if cannot find return -1.


1. End condition is not |S|!=|V| since I don't know how many nodes there. It's min heap not empty.

2. The node is not represented as value but x and y.

3. Check the polled node if it's same as dest, if same then return its `dis`. As first polled node of the position will have the minimum distance from start.

4. To update neighbors of polled node, there will be at most 4 neighbors since 4 direction, use `while` loop to find their position, and update if they are not in set.


```
class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        return dijkstra(maze, start, destination);
    }
    private int dijkstra(int[][] maze, int[] start, int[] dst){
        Set<Integer> s = new HashSet<>(); // position of 1D
        Queue<Pos> minDisHeap = new PriorityQueue<>(new Comparator<Pos>(){
            @Override
            public int compare(Pos a, Pos b){
                return a.dis - b.dis;
            }
        });
        minDisHeap.add(new Pos(start[0], start[1], 0));
        while(minDisHeap.isEmpty()==false){
            Pos pos = minDisHeap.poll();
            if(pos.x==dst[0] && pos.y==dst[1]) return pos.dis;
            s.add(position(pos.x, pos.y, maze[0].length));
            // update neighbors, 0 <= neighbors <= 4
            int upI = pos.x;
            while(upI>0 && maze[upI-1][pos.y]==0) upI--;
            if(upI!=pos.x) update(upI, pos.y, pos.dis+pos.x-upI, minDisHeap, s, maze[0].length);
            int downI = pos.x;
            while(downI<maze.length-1 && maze[downI+1][pos.y]==0) downI++;
            if(downI!=pos.x) update(downI, pos.y, pos.dis+downI-pos.x, minDisHeap, s, maze[0].length);
            int rightJ = pos.y;
            while(rightJ<maze[0].length-1 && maze[pos.x][rightJ+1]==0) rightJ++;
            if(rightJ!=pos.y) update(pos.x, rightJ, pos.dis+rightJ-pos.y, minDisHeap, s, maze[0].length);
            int leftJ = pos.y;
            while(leftJ>0 && maze[pos.x][leftJ-1]==0) leftJ--;
            if(leftJ!=pos.y) update(pos.x, leftJ, pos.dis+pos.y-leftJ, minDisHeap, s, maze[0].length);
        }
        return -1;
    }
    private void update(int i, int j, int newDis, Queue<Pos> minDisHeap, Set<Integer> s, int colLen){
        int key = position(i, j, colLen);
        if(s.contains(key)==false){
            minDisHeap.add(new Pos(i, j, newDis));
        }
    }
    private int position(int i, int j, int colLen){
        return i*colLen+j;
    }
}
class Pos{
    int x;
    int y;
    int dis;
    public Pos(int x, int y, int dis){
        this.x = x;
        this.y = y;
        this.dis = dis;
    }
}
```



m is maze.length, n is maze[0].length. There are at most O(m*n) possible stop points, so space of s is O(mn), space of minDisHeap is O(mn).


Time: O(mn*log(mn)). As ++ and -- can be at most O(mn) in all rounds, less than mnlog(mn), so ignored.


Space: O(mn)


dijkstra is actally similar to BFS. The same part is that they both have a queue and a while loop and poll from queue in the beginning, they add Position into Queue in certain condition.


The difference is BFS has a LinkedList as Queue, while dijkstra uses min heap as Queue. The polled node in BFS is first in first out, while for dijkstra it always polls the node with minimum dis. And BFS will add all neighbors into Queue, while dijkstra only add neighbors not in set into Queue.

## 499. The Maze III

### Final Solution - Dijkstra + minDisHeap

The solution is similar to Maze II.

Run dijkstra with minDisHeap, and get `resList` with minimum distance, then sort the list and return the first String.

I need direction and parent inside class Node to trace back easily.

I have 4 directions as 4 neighbors to go, the difference is that I need to check if the move from current node to neighbor will go through the hole or not, if yes I have to use position of hole as neighbor to add into minDisHeap because the ball will drop inside and won't continue.

Another change is I need to add node 1 dimensional position to set only when it's not hole, because this time I need multiple path toward target all with minimum distance.

When node is hole, compare with global minDis,
- if node.dis<=minDis, traceback and add to reList, and update minDis with node.dis
- Otherwise stop dijkstra as the distance is not minimum anymore.

```
class Solution {
    private int minDis = Integer.MAX_VALUE;
    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        List<String> resList = new ArrayList<>();
        dijkstra(maze, ball, hole, resList);
        if(resList.size()==0) return "impossible";
        Collections.sort(resList);
        return resList.get(0);
    }
    private void dijkstra(int[][] maze, int[] ball, int[] hole, List<String> resList){
        Queue<Node> minDisHeap = new PriorityQueue<Node>(new Comparator<Node>(){
            @Override
            public int compare(Node n1, Node n2){
                return n1.dis-n2.dis;
            }
        });
        Set<Integer> s = new HashSet<>();
        minDisHeap.add(new Node(ball[0], ball[1], 0, null, 'x'));
        while(minDisHeap.isEmpty()==false){
            Node node = minDisHeap.poll();
            if(node.x==hole[0] && node.y==hole[1]){
                if(node.dis<=minDis){
                    resList.add(traceback(node));
                    minDis = node.dis;
                }else{
                    return;
                }
            }else{
                s.add(position1D(node.x, node.y, maze[0].length));
            }
            // update neighbors
            int xUp = node.x;
            while(xUp-1>=0 && maze[xUp-1][node.y]==0) xUp--;
            if(xUp!=node.x) updateNeighbor(s, xUp, node.y, node.dis+node.x-xUp, node, minDisHeap, maze[0].length, 'u', hole);
            
            int xDown = node.x;
            while(xDown+1<maze.length && maze[xDown+1][node.y]==0) xDown++;
            if(xDown!=node.x) updateNeighbor(s, xDown, node.y, node.dis+xDown-node.x, node, minDisHeap, maze[0].length, 'd', hole);
            
            int yLeft = node.y;
            while(yLeft-1>=0 && maze[node.x][yLeft-1]==0) yLeft--;
            if(yLeft!=node.y) updateNeighbor(s, node.x, yLeft, node.dis+node.y-yLeft, node, minDisHeap, maze[0].length, 'l', hole);
            
            int yRight = node.y;
            while(yRight+1<maze[0].length && maze[node.x][yRight+1]==0) yRight++;
            if(yRight!=node.y) updateNeighbor(s, node.x, yRight, node.dis+yRight-node.y, node, minDisHeap, maze[0].length, 'r', hole);
                        
        }
    }
    private String traceback(Node node){
        StringBuilder sb = new StringBuilder();
        while(node.parent!=null){
            sb.append(node.direction);
            node = node.parent;
        }
        return sb.reverse().toString();
    }
    private boolean crossHole(Node node, int[] hole){
        Node parent = node.parent;
        switch(node.direction){
            case 'u':
                return node.y==hole[1] && hole[0]>=node.x && hole[0]<parent.x;
            case 'd':
                return node.y==hole[1] && hole[0]>parent.x && hole[0]<=node.x;
            case 'l':
                return node.x==hole[0] && hole[1]>=node.y && hole[1]<parent.y;
            case 'r':
                return node.x==hole[0] && hole[1]>parent.y && hole[1]<=node.y;
        }
        return false;
    }
    private void updateNeighbor(Set<Integer> s, int x, int y, int dis, Node parent, Queue<Node> minDisHeap, int colLen, char direction, int[] hole){
        Node node = new Node(x, y, dis, parent, direction);
        if(crossHole(node, hole)){
            node = new Node(hole[0], hole[1], dis-Math.abs(hole[0]-node.x+hole[1]-node.y), parent, direction);
        }
        if(s.contains(position1D(node.x, node.y, colLen))==false) minDisHeap.add(node);   
    }
    private int position1D(int x, int y, int colLen){
        return x*colLen+y;
    }
}
class Node{
    int x;
    int y;
    int dis;
    Node parent;
    char direction;
    public Node(int x, int y, int dis, Node parent, char direction){
        this.x = x;
        this.y = y;
        this.dis = dis;
        this.parent = parent;
        this.direction = direction;
    }
}
```

m is maze.length, n is maze[0].length

Time: O(m*n*log(m*n))

Space: m*n