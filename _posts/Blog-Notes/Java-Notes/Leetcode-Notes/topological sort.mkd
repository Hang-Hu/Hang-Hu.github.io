## 269. Alien Dictionary

### Description

[Leetcode](https://leetcode.com/problems/alien-dictionary/)

### DFS Solution(slow but less memory)

DFS and append node to return to the start of answer.

```
class Solution {
    public String alienOrder(String[] words) {
        Map<Character, List<Character>> graph = new HashMap<>();
        initGraph(words, graph);
        List<Character> path = new ArrayList<>();
        // have a visited for all sources, when enconter this one, don't continue dfs with this neighbor, but don't need to report false as cycle.
        Set<Character> visitedAllSources = new HashSet<>();
        for(char c: graph.keySet()){
            if(visitedAllSources.contains(c)==false){
                Set<Character> visited = new HashSet<>();
                if(dfs(c, graph, path, visited, visitedAllSources)==false)    return "";    
            }
        }
        Set<Character> charSet = getCharSet(words);
        addRemainingNode(charSet, path);
        return path.stream().map(String::valueOf).collect(Collectors.joining());
    }
    private Set<Character> getCharSet(String[] words){
        Set<Character> charSet = new HashSet<>();
        for(int i=0; i<words.length; i++){
            for(int j=0; j<words[i].length(); j++){
                charSet.add(words[i].charAt(j));
            }
        }
        return charSet;
    } 
    private void addRemainingNode(Set<Character> charSet, List<Character> path){
        for(char c: charSet){
            if(path.contains(c)==false) path.add(c);
        }
    }
    //dfs to get tp order
    private boolean dfs(char node, Map<Character, List<Character>> graph, List<Character> path, Set<Character> visited, Set<Character> visitedAllSources){
        visited.add(node);
        visitedAllSources.add(node);
        List<Character> neighbors = graph.get(node);
        if(neighbors!=null){
            for(char neighbor: neighbors){
                if(visited.contains(neighbor)) return false;
                if(visitedAllSources.contains(neighbor)) continue;
                if(dfs(neighbor, graph, path, visited, visitedAllSources)==false) return false;
                visited.remove(neighbor);
            }    
        }
        path.add(0, node);
        return true;
    }
    private void initGraph(String[] words, Map<Character, List<Character>> graph){
        if(words.length>0){
            for(int i=0; i<words.length-1; i++){
                char firstChar = words[i].charAt(0);
                char secondChar = words[i+1].charAt(0);
                if(firstChar==secondChar){
                    if(words[i].length()>1 && words[i+1].length()>1){
                        initGraph(new String[] {words[i].substring(1), words[i+1].substring(1)}, graph);
                    }
                }else{
                    if(graph.containsKey(firstChar)){
                        graph.get(firstChar).add(secondChar);
                    }else{
                        graph.put(firstChar, new ArrayList<Character>(){{add(secondChar);}});
                    }
                }
            }
        }
    }
}
```

m is the length of longest word, n is the words.length

Time: O(m*n)

initGraph is O(m*n), dfs is O(n) since it's dp order, no cycle or return when find there is a cycle, that means edges number to be visited is n-1 instead of n^2. `getCharSet` is O(n*m). `addRemainingNode` is O(n)

Space: O(m*n)

```
Map<Character, List<Character>> graph = new HashMap<>(); O(m*n)
List<Character> path = new ArrayList<>(); O(m*n)
Set<Character> visitedAllSources = new HashSet<>(); O(m*n)
Set<Character> visited = new HashSet<>(); O(m*n)
Set<Character> charSet = getCharSet(words); O(m*n)
```


The time in github slower than 99%, and I found it's due to `path.stream().map(String::valueOf).collect(Collectors.joining());`. As I tried, even not use `boolean[]`, simply use `String` to replace `List<Character> path` will beats 100% submissions.

### Final Solution(use StringBuilder and boolean array)

StringBuilder is used to replace `path.stream().map(String::valueOf).collect(Collectors.joining())`.

Recursively init graph. If char at 0 of 2 lines the same, send sub of two to initGraph, ow firstChar points to second. DFS with all chars in dict, using path(have to remove node when return) and visitedAllRounds. If encounter same node in path, cycle detected. If encounter same node in visitedAllRounds, skip that node. When the all neighbors of node visited, add it to sb, finially reverse sb.


```
class Solution {
    public String alienOrder(String[] words) {
        boolean[][] graph = new boolean[26][26];
        initGraph(words, graph);
        StringBuilder sb = new StringBuilder();
        // have visitedAllRounds for all characters, when enconter this one, don't continue dfs with this neighbor, but don't need to report false as cycle.
        boolean[] visitedAllRounds = new boolean[26];
        boolean[] chars = getChars(words);
        for(int i=0; i<26; i++){
            if(chars[i]==true && visitedAllRounds[i]==false){
                boolean[] path = new boolean[26];
                if(dfs(i, graph, sb, path, visitedAllRounds)==false)    return "";    
            }
        }
        return sb.reverse().toString();
    }
    private boolean[] getChars(String[] words){
        boolean[] chars = new boolean[26];
        for(int i=0; i<words.length; i++){
            for(int j=0; j<words[i].length(); j++){
                chars[words[i].charAt(j)-'a'] = true;
            }
        }
        return chars;
    } 
    //dfs to get tp order
    private boolean dfs(int node, boolean[][] graph, StringBuilder sb, boolean[] path, boolean[] visitedAllRounds){
        path[node] = true;
        visitedAllRounds[node] = true;
        for(int i=0; graph[node]!=null&&i<graph[node].length; i++){
            if(graph[node][i]==true){
                if(path[i]==true) return false;
                if(visitedAllRounds[i]==true) continue;
                if(dfs(i, graph, sb, path, visitedAllRounds)==false) return false;
                path[i] = false;
            }
        }    
        sb.append((char)('a'+node));
        return true;
    }
    private void initGraph(String[] words, boolean[][] graph){
        if(words.length>0){
            for(int i=0; i<words.length-1; i++){
                int firstChar = words[i].charAt(0)-'a';
                int secondChar = words[i+1].charAt(0)-'a';
                if(firstChar==secondChar){
                    if(words[i].length()>1 && words[i+1].length()>1){
                        initGraph(new String[] {words[i].substring(1), words[i+1].substring(1)}, graph);
                    }
                }else{
                    if(graph[firstChar]==null){
                        graph[firstChar] = new boolean[26];
                    }
                    graph[firstChar][secondChar] = true;
                }
            }
        }
    }
}
```

The same time and space complexity as previous one.

m is the length of longest word, n is the words.length

Time: O(m*n)
Space: O(m*n)

## 444. Sequence Reconstruction

### Description

```
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

Example 1:

Input:
org: [1,2,3], seqs: [[1,2],[1,3]]

Output:
false

Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
Example 2:

Input:
org: [1,2,3], seqs: [[1,2]]

Output:
false

Explanation:
The reconstructed sequence can only be [1,2].
Example 3:

Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

Output:
true

Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
Example 4:

Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

Output:
true
UPDATE (2017/1/8):
The seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.

```

### Concepts - Hamiltonian path

Eulerian path: a path that visits every ***edge*** in the graph and only once.

Hamiltonian path:  a path that passes through every ***vertex*** in the graph exactly one(once and only once). A Hamiltonian path does not necessarily pass through all the edges of the graph, however, a Hamiltonian path which ends in the same place in
which it began is called a Hamiltonian cycle.

In a DAG, if there is a Hamiltonian path, the topological sort order of this DAG will then be ***unique***. Otherwise, if a topological sort does not form a Hamiltonian path, this DAG will then have more than one valid topological orderings. In this case, it is always possible to form a second valid ordering just by ***swapping two consecutive vertices which are not connected by an edge*** to each other. Therefore, it is possible to test in polynomial time whether a unique topological ordering exists, and whether a Hamiltonian path exists, despite the NP-hardness of the Hamiltonian path problems for more general directed graphs. 

Unlike the situation with Euler Path, there is generally no therom that tells if a Hamiltonian path or curcuit is possible. You just have to try.

### Solution

It's subsequence not substring, as long as the order is right, don't have to be consecutive.

Must be one connected component otherwise false.

If encounter cycle, then false.

1. Get one topological order by dfs. graph is set because seq of `[2,3]` and `[2,3]` should be one edge to simplify problem. init graph: seq.size is 1, put to graph with empty set. 2 or more than connect each i and i+1. DFS with path and visited. getAllIntegers then loop integer to do DFS.
2. ***Check Unique***. Check every two consecutive vertices in tp order, if they are not connected by an edge, then not unique, return false. Otherwise continue to 3.
3. Compare the tp order with org.

Idea for test case like `[[1,2,3,4,5],[5,6],[6,7],[5,7],[7,8,9]]`. For [1,2,3,4,5], make it 1->2->3->4->5.

```
[1,2,4,3,5,6]
[[1,2,3,4,5],[2,3],[4,3]]
//retult is true
```


For test case like `[[5,3,2,4],[4,1],[1],[3],[2,4], [1000000000]]`, remember to use `Set<Integer> allIntegers` instead of i from 1 to org.length, which cannot cover everything.




```
class Solution {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        initGraph(graph, seqs);
        List<Integer> reversedTpOrder = new ArrayList<>();
        Set<Integer> visitedAllRound = new HashSet<>();
        // have to use all integers appeared, instead of 1 to org.size() in case org doesn't have all of integers
        Set<Integer> allIntegers = getAllIntegers(seqs);
        for(Integer i: allIntegers){
            if(visitedAllRound.contains(i)) continue;
            // if node i has no next, don't start from it, let other node access it.
            if(graph.containsKey(i)==false) continue;
            Set<Integer> path = new HashSet<>();
            path.add(i);
            if(dfs(graph, reversedTpOrder, path, visitedAllRound, i)==false) return false;
        }
        if(checkUnique(reversedTpOrder, graph)==false)  return false;
        return equals(reversedTpOrder, org);
    }
    private Set<Integer> getAllIntegers(List<List<Integer>> seqs){
        Set<Integer> ans = new HashSet<>();
        for(List<Integer> seq: seqs){
            for(Integer i: seq){
                ans.add(i);
            }
        }
        return ans;
    }
    private void initGraph(Map<Integer, Set<Integer>> graph, List<List<Integer>> seqs){
        for(List<Integer> seq: seqs){
            if(seq.size()==0){
            }else if(seq.size()==1){
            // even one element in seq, add it to graph if it's isolated,
            // so that supersequence can have it
                Integer first = seq.get(0);
                if(graph.containsKey(first)==false) graph.put(first, new HashSet<Integer>());
            }else{ // seq.size()>=2
                for(int i=0; i+1<seq.size(); i++){
                    Integer first = seq.get(i);
                    Integer second = seq.get(i+1);
                    if(graph.containsKey(first)==false) graph.put(first, new HashSet<Integer>());
                    graph.get(first).add(second);
                }                
            }
        }
    }
    private boolean dfs(Map<Integer, Set<Integer>> graph, List<Integer> reversedTpOrder, Set<Integer> path, Set<Integer> visitedAllRound, Integer node){
        visitedAllRound.add(node);
        Set<Integer> nextNodes = graph.get(node);
        if(nextNodes!=null){
            for(Integer next: nextNodes){
                if(path.contains(next)) return false;
                if(visitedAllRound.contains(next))  continue;
                path.add(next);
                dfs(graph, reversedTpOrder, path, visitedAllRound, next);
                path.remove(next);
            }    
        }
        reversedTpOrder.add(node);
        return true;
    }
    private boolean checkUnique(List<Integer> reversedTpOrder, Map<Integer, Set<Integer>> graph){
        for(int i=0; i+1<reversedTpOrder.size(); i++){
            Integer l = reversedTpOrder.get(i);
            Integer r = reversedTpOrder.get(i+1);
            // if two consecutive vertices not connected by an edge, then can swap, not unique
            if(((graph.containsKey(l) && graph.get(l).contains(r)) || (graph.containsKey(r) && graph.get(r).contains(l)))==false)   return false;
        }
        return true;
    }
    private boolean equals(List<Integer> reversedTpOrder, int[] org){
        if(reversedTpOrder.size() != org.length)    return false;
        int len = org.length;
        for(int i=0; i<len; i++){
            if(reversedTpOrder.get(len-i-1)!=org[i])  return false;
        }
        return true;
    }
}
```