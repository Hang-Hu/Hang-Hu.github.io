## Description

```
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
```

## Final Solution: HashSet (not Union Find at all)

Have a set that record all possible numbers. Use `consecutive()` to compute consecutive sequence length for every element from nums[0] to nums[nums.length-1]. If set contains num+1, then consecutive+1 and continue until num+1 not exist.

For example, `[100, 4, 200, 1, 3, 2]`

1 -> set contains 2 -> set contains 3 -> set contains 4, set not contain 5. length is 4.

A trick to make is O(n) is to check `set.contains(nums[i]-1)==false`. It makes sure the number into consecutive() is not part of a longer sequence, for example, `set.contains(1-1)` is false so 1 is okay, but `set.contains(2-1)` is true so 2 is not okay. Also apply to 3, 4.


```
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        initSet(set, nums);
        int max = 0;
        for(int i=0; i<nums.length; i++){
            if(set.contains(nums[i]-1)==false){
                int res = consecutive(nums[i], set);
                if(res>max) max = res;    
            }
        }
        return max;
    }
    private int consecutive(int num, Set<Integer> set){
        int count = 1;
        while(set.contains(num+1)){
            num++;
            count++;De
        }
        return count;
    }
    private void initSet(Set<Integer> set, int[] nums){
        for(int n: nums){
            set.add(n);
        }
    }
}
```

Time: 

Space: 