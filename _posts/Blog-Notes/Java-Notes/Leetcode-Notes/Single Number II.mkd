## Question Details

```
[260] Single Number III

https://leetcode.com/problems/single-number-iii/description/

algorithms
Medium (54.11%)
Total Accepted:    87.6K
Total Submissions: 161.8K
Testcase Example:  '[1,2,1,3,2,5]'

Given an array of numbers nums, in which exactly two elements appear only
once and all the other elements appear exactly twice. Find the two elements
that appear only once.

Example:


Input:  [1,2,1,3,2,5]
Output: [3,5]

Note:


The order of the result is not important. So in the above example, [5, 3] is
also correct.
Your algorithm should run in linear runtime complexity. Could you implement
it using only constant space complexity?
```

## First Solution

```
class Solution {
    // return [a, b] or [b, a]
    public int[] singleNumber(int[] nums) {
        int[] res = new int[2];
        int x=0;
        for(int n: nums){
            x^=n;
        }
        // x now equals a^b because x^x == 0
        x&=(-x); // -x flip all digits of x and plus 1, x & (-x) will get one bit 1 and other bits 0, & makes sure the remained 1 is part of x, -x makes sure only one bit 1 remains.
        // divide a and b into 2 groups. Since a and b are difference, there will be at least one digit that is 1 in a^b, clear all other digits to 0 to get the new x. x&a and x&b will result in one zero and another non-zero.
        for(int n: nums){
            if((x&n) == 0){
                res[0]^=n; // 1^1^3 == 3
            }else{
                res[1]^=n; // 2^2^5 == 5
            }
        }
        return res;
        
    }
}
```

## Bit Solution With Map

Consider each bits in every number, there are 32 bits in a number. The number that appears once, other 3 times. For example, bit 1 in index 0, can appear 1/4(1+3*1)/7(1+3*2)/10(1+3*3)/more(1+3n) times. This is just the case when bit in index 0 of result is 1.

```
class Solution {
    public int singleNumber(int[] nums) {
        int[] map = new int[32];
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<32; j++){
                map[31-j]+=(nums[i]>>j & 1); // add up bits in every slots
            }
        }
        int res=0;
        for(int i=0; i<32; i++){
            if(map[i]%3 == 1){ // map[i] == 3*n + 1
                res+=(1<<(31-i));
            }
        }
        return res;
    }
}
```

## Bit Solution Final

```
/* When n==0, low and high keep the same
 * For bit 1 in a certain index
 *                  hl
 * appear 0 time    00
 * appear 1 time    01
 * appear 2 times   10
 * appear 3 times   00(should be 11, but to leave low index 1 for appear 1 time, use 00 instead)
 *
 * appear 4 time    01
 * appear 5 time    10
 * appear 6 time    00
 * appear 7 time    01
 * 1 digit requires 2 digits to express the times bit 1 appears, so 32 digits require 64 digits.
 * Therefore use two int low and high to make up 64bits.
 * the ith digit of number is expressed by ith digit of low and ith digit of high, low and high express all digits
 *
 * low is 1 only when bit 1 appears 1/4/7/3n+1 times, which corresponds to the appearing exactly once case.
 * So after traversing, low is the appearing once result to return
 *
 * low: 0 -> 1 -> 0 -> 0(mid 1), ^ 1 mostly(n is 1), so use low^=n
 * For the irregular change of low 0 -> 0, preH==1 is the mark.
 * If preH==1, preL==0 -> midL==1 -> newL==0. If preH==0, preL==0 -> midL==1 -> newL==1
 * So midL ^ preH -> newL, which is low^=high
 *
 * high: 0 -> 0(mid 1) -> 1 -> 0, ^ 1 mostly(n is 1), so use high^=n
 * For the irregular change of high 0 -> 0, newL==1 is the mark.
 * If newL==1, preH==0 -> midH==1 -> newH==0, Of newL==0, preH==0 -> midH==1 -> newH==1
 * So midH ^ newL -> newH, which is high^=low
 * 
 * When n==0, there will be something wrong
 * For l: preH==1, preL==0 -> midL==0, midL ^ preH -> newL==1, but newL should be 0
 * For h and appear 2 times: preL==1 -> newL==1, preH==0 -> midH==0, midH ^ newL -> newH==1, but newH should be 0
 * So use &n to solve it, when n==0, x&0==0, x^0==x
 * That is high&n instead of high, low&n instead of low
*/
```


```
class Solution {
    public int singleNumber(int[] nums) {
        int low=0, high=0;
        for(int n: nums){
            low^=n; // proceed
            low^=(high&n); // preHigh==1 as mark to solve 0 -> 0(mid 1)
            high^=n; // proceed
            high^=(low&n); // newLow==1 as mark to solve 0 -> 0(mid 1)
        }
        return low;
    }
}
```