---
layout: post
author: Hang Hu
categories: leetcode
tags: Blog Java Leetcode 
cover: 
---
## Description

```
Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0.
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
 

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.
```


## Solution


a/b=2 is edge of node a to node b with 2 as weight of this edge. Init graph with both a->b using 2 as weight and b->a using 1/2 as weight. Tackle undefined or a/a case first. When it comes to a/b, use dfs to do the work. If there is a path from a to b(no repeated node), return and multiple all weight in this path together.


I init graph with b->a using 1/2 as weight, to make sure 1/(a/b) works, and there is a path using reverse route.


visitedSet to make sure no repeated node in path.



```
class Solution {
    Map<String, List<Node>> graph = new HashMap<>();
    Set<String> nodeNameSet = new HashSet<>();
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        initGraph(equations, values);
        double[] ans = new double[queries.size()];
        for(int i=0; i<queries.size(); i++){
            List<String> query = queries.get(i);
            String first = query.get(0);
            String second = query.get(1);
            if(!this.nodeNameSet.contains(first) || !this.nodeNameSet.contains(second)){ // one not defined
                ans[i] = -1.0;
            }else if(first.equals(second)){ // a/a=1
                ans[i] = 1.0;
            }else{
                Set<String> visited = new HashSet<>();
                ans[i] = dfs(first, second, visited);
            }
        }
        return ans;
    }
    private double dfs(String start, String end, Set<String> visited){
        if(visited.contains(start)) return -1.0;
        visited.add(start);
        if(start.equals(end)) return 1.0; // find end node
        List<Node> neighbors = this.graph.get(start);
        if(neighbors==null) return -1.0;
        for(Node neighbor: neighbors){
            double weightMul = dfs(neighbor.name, end, visited);
            if(weightMul!=-1.0){
                return weightMul * neighbor.weight;
            }
        }
        return -1.0;
    }
    private void initGraph(List<List<String>> equations, double[] values){
        for(int i=0; i<values.length; i++){
            List<String> equation = equations.get(i);
            double value = values[i];
            String first = equation.get(0);
            String second = equation.get(1);
            
            addEdge(first, second, value);
            addEdge(second, first, 1/value);
            this.nodeNameSet.add(first);
            this.nodeNameSet.add(second);
        }
    }
    private void addEdge(String first, String second, double value){
        if(this.graph.containsKey(first)){
            this.graph.get(first).add(new Node(second, value));
        }else{
            this.graph.put(first, new ArrayList<Node>(){{add(new Node(second, value));}});            
        }
    }
    
}
class Node{
    String name;
    double weight;
    public Node(String name, double weight){
        this.name = name;
        this.weight = weight;
    }
}
```
