## Word Ladder

### Description

### Solution 1

```
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Map<String, List<String>> graph = new HashMap<>();
        wordList.add(beginWord);
        initGraph(graph, wordList);
        return bfs(graph, beginWord, endWord);
    }
    private int bfs(Map<String, List<String>> graph, String beginWord, String endWord){
        Queue<String> q = new LinkedList<>();
        Map<String, Integer> level = new HashMap<>();
        q.add(beginWord);
        level.put(beginWord, 1);
        while(q.isEmpty()==false){
            String word = q.poll();
            List<String> neighbors = graph.get(word);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                String neighbor = neighbors.get(i);
                if(neighbor.equals(endWord))    return level.get(word)+1;
                if(level.get(neighbor)!=null)   continue;
                q.add(neighbor);
                level.put(neighbor, level.get(word)+1);
            }
        }
        return 0;
    }
    private void initGraph(Map<String, List<String>> graph, List<String> wordList){
        for(int i=0; i<wordList.size(); i++){
            String word = wordList.get(i);
            for(int j=i+1; j<wordList.size(); j++){
                String nextWord = wordList.get(j);
                if(diffChar(word, nextWord)==1){
                    // it's undirected graph
                    if(graph.containsKey(word)==true)       graph.get(word).add(nextWord);
                    else                                    graph.put(word, new ArrayList<String>(){{add(nextWord);}});
                    if(graph.containsKey(nextWord)==true)   graph.get(nextWord).add(word);
                    else                                    graph.put(nextWord, new ArrayList<String>(){{add(word);}});
                }
            }
        }
    }
    private int diffChar(String s1, String s2){
        int count = 0;
        for(int i=0; i<s1.length(); i++){
            if(s1.charAt(i)!=s2.charAt(i))  count++;
        }
        return count;
    }
}

```

n is the length of wordList, x is the length of each word.

Time: O(n^2*x).
Space: O(n^2). Graph is twice number of edges, edge number m=O(n^2).

### Solution Final


The BFS part is the same as previous solution. There is a graph including beginWord and every word in wordList, two nodes are connected in and only if they differ in one character. Start from a node, like "hit", its level is 1, do BFS and the level of cog is 5, which is the shortest transformation.

The improvement compared to last solution is the presentation of graph. Previously I used (word, list of neighboring word) in `graph` map. Now I use `(pattern, list of word that matches pattern)` in `graph` map. `getNeighbors` is to get list of word that matches with all possible patterns of `word` but is not `word` itself, they are the neighbors of `word`.

```
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // graph is the mapping of h*t to a List of String that matches the pattern
        Map<String, List<String>> graph = new HashMap<>(); // (pattern, list of String)
        wordList.add(beginWord);
        initGraph(graph, wordList);
        return bfs(graph, beginWord, endWord);
    }
    private int bfs(Map<String, List<String>> graph, String beginWord, String endWord){
        Queue<String> q = new LinkedList<>();
        Map<String, Integer> level = new HashMap<>();
        q.add(beginWord);
        level.put(beginWord, 1);
        while(q.isEmpty()==false){
            String word = q.poll();
            List<String> neighbors = getNeighbors(graph, word);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                String neighbor = neighbors.get(i);
                if(neighbor.equals(endWord))    return level.get(word)+1;
                if(level.get(neighbor)!=null)   continue;
                q.add(neighbor);
                level.put(neighbor, level.get(word)+1);
            }
        }
        return 0;
    }
    private List<String> getNeighbors(Map<String, List<String>> graph, String word){
        List<String> ans = new ArrayList<>();
        for(int i=0; i<word.length(); i++){
            StringBuilder sb = new StringBuilder(word);
            sb.setCharAt(i, '*');
            String pattern = sb.toString();
            List<String> l = graph.get(pattern);
            if(l!=null){
                for(String s: l){
                    if(s.equals(word)==false)   ans.add(s);                    
                }
            }
        }
        return ans;
    }
    private void initGraph(Map<String, List<String>> graph, List<String> wordList){
        for(String word: wordList){
            for(int i=0; i<word.length(); i++){
                StringBuilder sb = new StringBuilder(word);
                sb.setCharAt(i, '*');
                String pattern = sb.toString();
                if(graph.containsKey(pattern))  graph.get(pattern).add(word);
                else                            graph.put(pattern, new ArrayList<String>(){{add(word);}});
            }
        }
    }
}
```

n is the length of wordList, x is the length of each word.

Time: O(x*n)
Space: O(x*n)


## Word Ladder II

### Description

```
Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]
Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: []

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.
```

### Difference from Word Ladder

Length is not enough, have to output all possible path.

### Solution

1. Change `bfs` to not stop once endWord found, but traverse all nodes and return level map
2. Use `DFS` to traverse all path,have a `path` to store all nodes, and remove `neighbor` once dfs finished. Clone `path` and add to `ans` once endWord is `curWord` and the distance is the min one in `level`(this is ensured by checking `distance+1==level.get(neighbor)` before `dfs()`). Make sure no repeated node by checking if neighbor to visit contained in `path` or not. Make sure always walk in right direction(min path) by checking if `distance+1==level.get(neighbor)`.


```
class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        // graph is the mapping of h*t to a List of String that matches the pattern
        Map<String, List<String>> graph = new HashMap<>(); // (pattern, list of String)
        wordList.add(beginWord);
        initGraph(graph, wordList);
        Map<String, Integer> level = bfs(graph, beginWord, endWord);
        List<List<String>> ans =new ArrayList<>();
        List<String> path = new ArrayList<>();
        path.add(beginWord);
        dfs(graph, level, beginWord, endWord, 1, ans, path);
        return ans;
    }
    private void dfs(Map<String, List<String>> graph, Map<String, Integer> level, String curWord, String endWord, int distance, List<List<String>> ans, List<String> path){
        if((curWord.equals(endWord)==true)){
            ans.add(new ArrayList<String>(path));
            return;
        }
        List<String> neighbors = getNeighbors(graph, curWord);
        if(neighbors == null)   return;
        for(int i=0; i<neighbors.size(); i++){
            String neighbor = neighbors.get(i);
            if(path.contains(neighbor)==false && distance+1==level.get(neighbor)){
                path.add(neighbor);
                dfs(graph, level, neighbor, endWord, distance+1, ans, path);
                path.remove(neighbor);
            }
        }
    }
    private Map<String, Integer> bfs(Map<String, List<String>> graph, String beginWord, String endWord){
        Queue<String> q = new LinkedList<>();
        Map<String, Integer> level = new HashMap<>();
        q.add(beginWord);
        level.put(beginWord, 1);
        while(q.isEmpty()==false){
            String word = q.poll();
            List<String> neighbors = getNeighbors(graph, word);
            for(int i=0; neighbors!=null && i<neighbors.size(); i++){
                String neighbor = neighbors.get(i);
                // if(neighbor.equals(endWord)){
                //     level.put(neighbor, level.get(word)+1);
                //     return level;
                // }
                if(level.get(neighbor)!=null)   continue;
                q.add(neighbor);
                level.put(neighbor, level.get(word)+1);
            }
        }
        return level;
    }
    private List<String> getNeighbors(Map<String, List<String>> graph, String word){
        List<String> ans = new ArrayList<>();
        for(int i=0; i<word.length(); i++){
            StringBuilder sb = new StringBuilder(word);
            sb.setCharAt(i, '*');
            String pattern = sb.toString();
            List<String> l = graph.get(pattern);
            if(l!=null){
                for(String s: l){
                    if(s.equals(word)==false)   ans.add(s);                    
                }
            }
        }
        return ans;
    }
    private void initGraph(Map<String, List<String>> graph, List<String> wordList){
        for(String word: wordList){
            for(int i=0; i<word.length(); i++){
                StringBuilder sb = new StringBuilder(word);
                sb.setCharAt(i, '*');
                String pattern = sb.toString();
                if(graph.containsKey(pattern))  graph.get(pattern).add(word);
                else                            graph.put(pattern, new ArrayList<String>(){{add(word);}});
            }
        }
    }

}
```

## 286. Walls and Gates

Use BFS, add 4 directions neighbors if it's INF to queue until queue is empty. To avoid same position added to queue twice from different path, after polling from queue, check if it's still INF. Initing queue by neighbors of 0.

### Solution

```
class Solution {
    public void wallsAndGates(int[][] rooms) {
        bfs(rooms);
    }
    private void bfs(int[][] rooms){
        Queue<Position> q = new LinkedList<>();
        for(int i=0; i<rooms.length; i++){
            for(int j=0; j<rooms[0].length; j++){
                if(rooms[i][j]==0){
                    addNeighbors(q, i, j, rooms, 1);
                }
            }
        }
        while(q.isEmpty()==false){
            Position p = q.poll();
            if(rooms[p.x][p.y]==Integer.MAX_VALUE){ // earlier reached in dfs get smaller distance
                rooms[p.x][p.y] = p.distance;
                addNeighbors(q, p.x, p.y, rooms, p.distance+1);    
            }
        }
    }
    private void addNeighbors(Queue q, int x, int y, int[][] rooms, int distance){
        int inf = Integer.MAX_VALUE;
        if(x-1>=0 && rooms[x-1][y]==inf)                q.add(new Position(x-1, y, distance));
        if(x+1<rooms.length && rooms[x+1][y]==inf)      q.add(new Position(x+1, y, distance));
        if(y-1>=0 && rooms[x][y-1]==inf)                q.add(new Position(x, y-1, distance));
        if(y+1<rooms[0].length && rooms[x][y+1]==inf)   q.add(new Position(x, y+1, distance));
    }
    
}
class Position{
    int x;
    int y;
    int distance;
    public Position(int x, int y, int distance){
        this.x = x;
        this.y = y;
        this.distance = distance;
    }
}
```

m is rooms.length, n is rooms[0].length

Time: O(m*n)
Space: O(m*n)

## 301. Remove Invalid Parentheses

### Description

```
Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Example 1:

Input: "()())()"
Output: ["()()()", "(())()"]
Example 2:

Input: "(a)())()"
Output: ["(a)()()", "(a())()"]
Example 3:

Input: ")("
Output: [""]
```

### First Solution 29ms

Set limit for max length to save time.

```
class Solution {
    private int maxLength;
    public List<String> removeInvalidParentheses(String s) {
        Set<String> set= new HashSet<>();
        this.maxLength = getMaxLength(s);
        dfs(new StringBuilder(), s, 0, 0, 0, set);
        return new ArrayList<String>(set);
    }
    private int getMaxLength(String s){
        int left=0, right=0;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(c=='('){
                left++; // left cannot offset previous right since )( won't offset
            }else if(c==')'){
                if(left>0)  left--; //offset left
                else        right++;
            }
        }
        return s.length()-left-right;
    }
    private void dfs(StringBuilder sb, String s, int index, int left, int right, Set<String> set){
        if(index>=s.length()){
            // left==right==0 then valid
            // don't have to verify 0 since won't be )(, this case will be stopped in ) checking
            if(left==right && sb.length()==this.maxLength) set.add(sb.toString());
            return;
        }
        if(sb.length()+s.length()-index<this.maxLength)   return; // if final sb always < max, stop here
        char c = s.charAt(index);
        if(c=='('){
            dfs(new StringBuilder(sb), s, index+1, left, right, set); // not add c
            left++; // )( cannot offset ) because )( won't offset
            dfs(sb.append(c), s, index+1, left, right, set); // add c
        }else if(c==')'){
            dfs(new StringBuilder(sb), s, index+1, left, right, set); // not add c
            if(left>0){
                left--; // offset ( 
                dfs(sb.append(c), s, index+1, left, right, set); // add c
            }else{ // no ( to offset, definitely invalid, stop here
                return;
            }
        }else{ // other characters like a
            dfs(sb.append(c), s, index+1, left, right, set);
        } 
    }
}
```

n is the length of String s.

Time: O(2^n), for each character in s, 2 options into dfs(recursion), add to sb or not add.
Space: O(2^n*n). 2^n possible strings(sb) and each string(sb) has n in length. The depth of method frame is n since every time we deal with on one character.


### Final Solution 4 ms

Pre calculated left and right and set limit for each to further save time.

Brute force. DFS traverse all 2^n possibilities, add/not add this character into final result. To improve, pre calculate number of `(` and `)` to remove. Use it as end condition in dfs. In dfs, the same logic calc `left` and `right`. And try add and not add current char recursively for all `(`/`)`/`letter` options. When it's `)` and no left to offset, return here since it will be valid. End condition of dfs is left and right remain is 0 and index reaches end. If param invalid, stop. if chars left(can be removed) less than chars must be removed(leftRemain+rightRemain), stop.

```
class Solution {
    public List<String> removeInvalidParentheses(String s) {
        Set<String> set= new HashSet<>();
        int leftLimit=0, rightLimit=0;
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(c=='('){
                leftLimit++; // ( cannot offset previous ) because )( won't offset
            }else if(c==')'){
                if(leftLimit>0)  leftLimit--; // offset left
                else        rightLimit++; // no left to offset
            }
        }
        dfs(new StringBuilder(), s, 0, 0, 0, set, leftLimit, rightLimit);
        return new ArrayList<String>(set);
    }
    private void dfs(StringBuilder sb, String s, int index, int left, int right, Set<String> set, int leftRemain, int rightRemain){
        // when invalid ( and ) all removed. check index to make sure it won't ignore all valid () after removing invalid ones
        if(leftRemain==0 && rightRemain==0 && index==s.length()){
            set.add(sb.toString());
            return;
        }
        if(leftRemain+rightRemain>s.length()-index)             return; // if chars left < chars to remove, definitely invalid, stop here
        if(leftRemain<0 || rightRemain<0 || index>=s.length())  return; // invalid, stop here
        char c = s.charAt(index);
        if(c=='('){
            dfs(new StringBuilder(sb), s, index+1, left, right, set, leftRemain-1, rightRemain); // not add c
            left++; // ( cannot offset previous ) because )( won't offset
            dfs(sb.append(c), s, index+1, left, right, set, leftRemain, rightRemain); // add c
        }else if(c==')'){
            dfs(new StringBuilder(sb), s, index+1, left, right, set, leftRemain, rightRemain-1); // not add c
            if(left>0){
                left--; // offset ( 
                dfs(sb.append(c), s, index+1, left, right, set, leftRemain, rightRemain); // add c
            }else{ // no ( to offset, definitely invalid, stop here
                return;
            }
        }else{ // other characters like a
            dfs(sb.append(c), s, index+1, left, right, set, leftRemain, rightRemain);
        } 
    }
}
```

## 317. Shortest Distance from All Buildings

### First Solution



```
class Solution {
    public int shortestDistance(int[][] grid) {
        if(grid.length==0)  return 0;
        int[][] disSum = new int[grid.length][grid[0].length];
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j]==1){
                    bfs(disSum, grid, i, j);
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for(int i=0; i<disSum.length; i++){
            for(int j=0; j<disSum[0].length; j++){
                if(grid[i][j]==0&&disSum[i][j]!=-1&&disSum[i][j]<min){
                    min = disSum[i][j];
                }
            }
        }
        if(min==Integer.MAX_VALUE)  return -1;
        else                        return min;
    }
    private void bfs(int[][] disSum, int[][] grid, int x, int y){
        int[][] disArr = new int[grid.length][grid[0].length];
        Queue<Position> q = new LinkedList<>();
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        q.add(new Position(x, y, 0));
        boolean isStart = true;
        while(q.isEmpty()==false){
            Position pos = q.poll();
            if(visited[pos.x][pos.y]||(!isStart&&grid[pos.x][pos.y]==1)||grid[pos.x][pos.y]==2) continue;
            if(!isStart) disArr[pos.x][pos.y] = pos.dis;
            if(isStart) isStart = false;
            visited[pos.x][pos.y] = true;
            if(pos.x-1>=0&&grid[pos.x-1][pos.y]==0)             q.add(new Position(pos.x-1, pos.y, pos.dis+1));
            if(pos.x+1<grid.length&&grid[pos.x+1][pos.y]==0)    q.add(new Position(pos.x+1, pos.y, pos.dis+1));
            if(pos.y-1>=0&&grid[pos.x][pos.y-1]==0)             q.add(new Position(pos.x, pos.y-1, pos.dis+1));
            if(pos.y+1<grid[0].length&&grid[pos.x][pos.y+1]==0) q.add(new Position(pos.x, pos.y+1, pos.dis+1));
        }
        updateDisSum(disSum, disArr);
    }
    private void updateDisSum(int[][] disSum, int[][] disArr){
        for(int i=0; i<disSum.length; i++){
            for(int j=0; j<disSum[0].length; j++){
                if(disArr[i][j]==0||disSum[i][j]==-1){ // inaccessible
                    disSum[i][j] = -1;
                }else{
                    disSum[i][j] += disArr[i][j];
                }
            }
        }
    }
}
class Position{
    int x;
    int y;
    int dis;
    public Position(int x, int y, int dis){
        this.x = x;
        this.y = y;
        this.dis = dis;
    }
}
```

Time: O(mn*mn)
Space: O(mn*mn)