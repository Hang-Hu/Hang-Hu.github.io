---
layout: post
author: Hang Hu
categories: python
tags: Blog Python 
cover: 
---
## sort one-column matrix

```
sorted_x = x[x.argsort(axis=0)][:,:,0]
```


## plot matrix


```
plt.plot(sorted_x_train.A1.tolist(), learned.A1.tolist())
```


## concatenate matrix by column


```
res_x = np.concatenate((res_x, x_degree), axis=1)
```

## np.where

```
a = np.arange(5, 10)
a
# array([5, 6, 7, 8, 9])
np.where(a < 8) 
# (array([0, 1, 2]),)
```

## np.dot

```
>>> np.dot(3, 4)
12
```

For 2-D arrays it is the matrix product:

```
>>> a = [[1, 0], [0, 1]]
>>> b = [[4, 1], [2, 2]]
>>> np.dot(a, b)
array([[4, 1],
       [2, 2]])
```

## np.log

`loge(x)`, base is e

## np.multiply

```
x1 = np.arange(9.0).reshape((3, 3))
x1
# array([[ 0.,  1.,  2.],
#        [ 3.,  4.,  5.],
#        [ 6.,  7.,  8.]])

x2 = np.arange(3.0)
x2
# array([ 0.,  1.,  2.])

np.multiply(x1, x2)
# array([[  0.,   1.,   4.],
#        [  0.,   4.,  10.],
#        [  0.,   7.,  16.]])
```

## np.finfo

get the machine epsilon

```
np.finfo(float).eps
```

## numpy.genfromtxt

```
data = np.genfromtxt('data.txt')
```

## np.random.shuffle

Shuffle matrix by row, in place.

```
np.random.shuffle(data)
```

Multi-dimensional arrays are only shuffled along the first axis.

```
>>> arr = np.arange(9).reshape((3, 3))
>>> arr
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

>>> np.random.shuffle(arr)
>>> arr
array([[3, 4, 5],
       [6, 7, 8],
       [0, 1, 2]])
```

## np.random.randint

```
np.random.randint(low,high,size=size)
```

`low` inclusive, `high` exclusive, `size` is the list size generated. Return random numbers from range `low` to `high`. `size` default to be None, then return 1 random number.


```
In [2]: np.random.randint(1,3,size=6)
Out[2]: array([2, 2, 2, 1, 1, 2])

```

## np.mean

```
grad_e = np.mean(np.multiply((y - t), X.T), axis=1)
```

axis=1 is to calculate along the columns.

```
>>> np.shape(np.multiply((y - t), X.T))
(3, 200)
>>> grad_e = np.mean(np.multiply((y - t), X.T), axis=1)
>>> grad_e
array([0.44299607, 0.47463903, 0.14360159])
```

## get index of min in list

```
In [16]: np.argmin([11,2,3,43,5])
Out[16]: 1
```

## get index of max in list

```
In [16]: np.argmin([11,2,3,43,5])
Out[16]: 1
```

## get index list that would sort an list

```
In [14]: np.argsort([1,2,3,43,5])
Out[14]: array([0, 1, 2, 4, 3])
```

## permutation test

```
def permutation(a, b, numSamples):
    count = 0
    len_a = len(a)
    con = np.concatenate([a, b])
    for i in range(0, numSamples):
        np.random.shuffle(con)
        shuffled_diff = np.abs(np.mean(con[:len_a])-np.mean(con[len_a:]))
        if shuffled_diff > diff:
            count = count + 1
    return count/numSamples
```

[Video Youtub on Permutation Test](https://www.youtube.com/watch?v=Iq9DzN6mvYA&feature=youtu.be&t=8m9s)

