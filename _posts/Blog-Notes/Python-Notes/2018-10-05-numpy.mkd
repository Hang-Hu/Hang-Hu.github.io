---
layout: post
author: Hang Hu
categories: python
tags: Blog Python 
cover: 
---
## sort one-column matrix

```
sorted_x = x[x.argsort(axis=0)][:,:,0]
```


## plot matrix


```
plt.plot(sorted_x_train.A1.tolist(), learned.A1.tolist())
```


## concatenate matrix by column


```
res_x = np.concatenate((res_x, x_degree), axis=1)
```

## np.where

```
a = np.arange(5, 10)
a
# array([5, 6, 7, 8, 9])
np.where(a < 8) 
# (array([0, 1, 2]),)
```

## np.dot

```
>>> np.dot(3, 4)
12
```

For 2-D arrays it is the matrix product:

```
>>> a = [[1, 0], [0, 1]]
>>> b = [[4, 1], [2, 2]]
>>> np.dot(a, b)
array([[4, 1],
       [2, 2]])
```

## np.log

`loge(x)`, base is e

## np.multiply

```
x1 = np.arange(9.0).reshape((3, 3))
x1
# array([[ 0.,  1.,  2.],
#        [ 3.,  4.,  5.],
#        [ 6.,  7.,  8.]])

x2 = np.arange(3.0)
x2
# array([ 0.,  1.,  2.])

np.multiply(x1, x2)
# array([[  0.,   1.,   4.],
#        [  0.,   4.,  10.],
#        [  0.,   7.,  16.]])
```

## np.finfo

get the machine epsilon

```
np.finfo(float).eps
```