---
layout: post
author: Hang Hu
categories: python
tags: Blog Python 
cover: 
---
### Project structure

```
.
└── package_name
    ├── __init__.py
    ├── __main__.py
    ├── func1.py
    └── test_func1.py
```


Must have `__init__.py` and `__main__.py` to ensure `package_name` is recognized as a package, and `python3 -m unittest` can find and run unit test in `test_func1.py`.


```
cat package_name/test_func1.py 
```


```
import unittest


class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO1')
```


### Organize code


`setUp()` and tearDown() will be executed before and after each test method.


### Command


#### Call all unit tests


```
python3 -m unittest discover
```


#### Call unit test for one method


```
python3 -m unittest module_name.file_name.class_name.method_name
```


### Code example


#### Assert no error


```
def test_1(self):
    try:
        func_name()
    except ExceptionType:
        self.fail("Method func_name raised exception ExceptionType.")
```


#### assert called any times with


```
mocked_error.assert_any_call('Error: ***.')
```


### patch


#### where to patch


patch() works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work you must ensure that you patch the name used by the system under test.


The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.


Imagine we have a project that we want to test with the following structure:


```
a.py
    -> Defines SomeClass

b.py
    -> from a import SomeClass
    -> some_function instantiates SomeClass
```


Now we want to test some_function but we want to mock out SomeClass using patch(). The problem is that when we import module b, which we will have to do then it imports SomeClass from module a. If we use patch() to mock out a.SomeClass then it will have no effect on our test; module b already has a reference to the real SomeClass and it looks like our patching had no effect.


The key is to patch out SomeClass where it is used (or where it is looked up). In this case some_function will actually look up SomeClass in module b, where we have imported it. The patching should look like:


If it's `from a import SomeClass` in `b.py`.


```
@patch('b.SomeClass')
```


For example


b.py:


```
from logging import info

info('Hello')
```


test_b.py


```
@patch('b.info')
```


However, consider the alternative scenario where instead of from a import SomeClass module b does import a and some_function uses a.SomeClass. Both of these import forms are common. In this case the class we want to patch is being looked up in the module and so we have to patch a.SomeClass instead:


If it's `import a` and `a.SomeClass` in `b.py`


```
@patch('a.SomeClass')
```


For example


b.py:


```
import logging

logging.info('Hello')
```


test_b.py


```
@patch('logging.info')
```


#### patch chaining calls


In b.py:


```
resp = c().d().e().f()
```


First patch with `c.return_value.d.return_value.e.return_value.f.return_value='expected'`.


If get error like `<MagicMock name='c().d().__enter__().e().f()' id='***************'>`


Change it to be:


```
c.return_value.d.return_value.__enter__.return_value.e.return_value.f.return_value='expected'
```


#### make patched method raise certain exception - side_effect


If the exception requires parameters, have to provide that, None will also work.


```
mock.side_effect = ExceptionName()
```


### Reference


[python-mocking-a-function-from-an-imported-module](https://stackoverflow.com/questions/16134281/python-mocking-a-function-from-an-imported-module)


[where-to-patch](https://docs.python.org/3/library/unittest.mock.html# where-to-patch)
