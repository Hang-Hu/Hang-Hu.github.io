---
layout: post
author: Hang Hu
categories: python
tags: Blog Python 
cover: 
---
## String

`string[start:stop:step]`

```
my_str = "abcde"
my_str[1:] // 'bcde'

my_str[1:3] // 'bc'

my_str[::] // 'abcde'

my_str[::2] // 'ace'

my_str[::-1] // 'edcba'
// This just reverses the string. It says to start from the beginning to the end, step back 1 each time.
```


### Immutability of String


```
name="John"
name[0]="S"
```


```
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-12-4d8900dcaf5a> in <module>()
----> 1 name[0]="S"

TypeError: 'str' object does not support item assignment

```


Have to contact to create new string for that: 


```
"S" + name[1:] // 'Sohn'
```


```
letter = "z"
letter *= 10
letter // 'zzzzzzzzzz'
```


```
2 + '3'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-19-8fd9dcfa4f42> in <module>()
----> 1 2 + '3'

TypeError: unsupported operand type(s) for +: 'int' and 'str'

```


```
x = "Hello World"
x.upper() // 'HELLO WORLD'
x.upper // <function str.upper>
x.split() // ['Hello', 'World']
x.split('o') // ['Hell', ' W', 'rld']
```


Are strings mutable?


Strings are not mutable! (meaning you can't use indexing to change individual elements of a string)


### String interpolation


#### .format()


```
print('The {} {} {}'.format('banana', 'fish', 'rice'))
// The banana fish rice
```


Use placeholder


```
print('The {2} {1} {0}'.format('A', 'B', 'C'))
// The C B A

print('The {0} {0} {0}'.format('A', 'B', 'C'))
// The A A A
```


Use keyword


```
print('The {b} {f} {r}'.format(b='banana', f='fish', r='rice'))
// The banana fish rice
```


### Presicion: {value:width.precision f}


```
print('The result is {r:1.2f}'.format(r=10/3))
//The result is 3.33
```


9 white spaces inserted before 3.33 if width is 10 instead of 1.


```
print('The result is {r:10.2f}'.format(r=10/3))
//The result is       3.33
```


```
name = 'John'
print('His name is {}'.format(name)) // His name is John

```


### f-strings -- formatted string literals


f-strings Require 3.6 or higher.


Or remove format, move `f` to the left, use name directly in `{}`, you get the same result.


```
name = 'John'
print(f'His name is {name}')  // His name is John
```


Works on multiples variables


```
name="Sam"
age=13
print(f"{name} is {age} years old.")
```


## Concatenate string

```
js = "".join(["function getPathTo(node) {",
              "  var stack = [];",
              "  while(node.parentNode !== null) {",
              "    stack.unshift(node.tagName);",
              "    node = node.parentNode;",
              "  }",
              "  return stack.join('/');",
              "}",
              "return getPathTo(arguments[0]);"])
```


## string not equal


```
if currentframe != "MainFrame":
    switch_to_course_registration_frame(driver)
```

## sort list alphabetically(ignore case)

```
list = ['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']
list = sorted(list, key=str.lower)
```

## args from 3rd to end

```
orderkeys = []
for i in range(3, len(sys.argv)):
    orderkeys.append(int(sys.argv[i]))
```

## pass function as argument

### Easy Example

```python
def a(x):
    return 10**2

def b(f,x):
    return f(x)

print b(a,10)
# 100
```

### My usage:

`output_func_list` is a list of functions applied on `x`.

```python
def gen(x, output_index_list, output_func_list):
    for i in range(len(output_index_list)):
        yield output_func_list[i](x[output_index_list[i]])

def readCSV(filename, output_index_list, output_func_list):
    raw = sc.textFile(os.path.dirname(__file__) + '/ml-latest-small/' + filename).cache()
    header = raw.take(1)[0]
    print(header)
    data = raw.filter(lambda l: l != header) \
        .map(lambda l: l.split(',')) \
        .map(lambda x: list(gen(x, output_index_list, output_func_list))) \
        .cache()
    return data
```

```python
ratings = readCSV('ratings.csv', [0, 1, 2], [int, int, float])
```

## construct tuple by index in list

```
def gen(x, output_index_list, output_func_list):
    for i in range(len(output_index_list)):
        yield output_func_list[i](x[output_index_list[i]])

data.map(lambda x: list(gen(x, [0,1,2], [int, int, float])))
```

## NameError: name '__file__' is not defined

`__file__` not exist in python shell, only exists in file.


## list


```
my_list=[1,2,3]
my_list=[1,'two',2]
len(my_list) // 3
my_list[0] // 1
my_list[1:] // ['two', 2]

another_list=[3,4,5]
new_list = my_list+another_list // [1, 'two', 2, 3, 4, 5]
my_list[0] = "Changed"
my_list // ['Changed', 'two', 2]
my_list.append(5)
my_list // ['Changed', 'two', 2, 5]

my_list.pop() // pops the last element, 5
my_list.pop(0) // Changed popped
```



By default, pop uses index `-1`, which is the last element.


`my_list.pop()` equals `my_list.pop(-1)`.


### Sort


```
list1 = [4,2,1,4,5,7,8,22]
newlist = list1.sort()
list1 // [1, 2, 4, 4, 5, 7, 8, 22]
type(newlist) //NoneType
type(None) //NoneType
```


`[].sort()` returns None, so the type of `newlist` is `NoneType`, which is returning nothing.


```
list2 = ['b','c','a']
list2.sort()
list2 // ['a', 'b', 'c']
```


### Reverse


```
numlist=[1,2,3]
numlist.reverse()
numlist // [3, 2, 1]
```


## Dictionaries


```
prices_lookup = {'apple': 1.22, "banana": 0.77}
prices_lookup['apple'] // 1.22
```


```
d = {'k1': 123, 'k2': [0,1,2], 'k2': {'insideKey': 100}}
d['k2']['insideKey'] // 100

d = {'key1': ['a', 'b', 'c']}
d['key1'][-1].upper() // 'C'
```


### Put a new key, value pair


```
d = {'k1': 100}
d['k2'] = 200
d // {'k1': 100, 'k2': 200}
```



### Set new value for existing key


```
d = {'k1': 100}
d['k1'] = 400
d // {'k1': 400}
```


### keys() and values()


```
d = {'k1': 100, 'k2': 200}

d.keys() // dict_keys(['k1', 'k2'])
d.values() // dict_values([100, 200])
```


### items() to get all key, value pairs


```
d = {'k1': 100, 'k2': 200}
d.items() // dict_items([('k1', 100), ('k2', 200)])
```


### Do dictionaries keep an order? How do I print the values of the dictionary in order?


Dictionaries are mappings and do not retain order! If you do want the capabilities of a dictionary but you would like ***ordering*** as well, check out the `ordereddict` object lecture later on in the course!


## Tuples


Tuples are very similar to `lists`. However they have one key difference - ***immutability***.


Once an element is inside a tuple, it ***can not be reassigned***.


Tuples use parenthesis:  (1,2,3)


```
t = (1,2,3)
l = [1,2,3]

type(l) // list

type(t) // tuple

len(t) // 3
```


### Slicing and indexing like list


```
t=(1,'two')
t[0] // 1
t[1] // 'two'
t[-1] // 'two'
```


### tuple has only 2 method: count() and index()


```
t=('a', 'a', 'b')

t.count('a') // the frequency of 'a', which is 2

t.index('a') // the first index of 'a', which is 2

t.index('b') // 2
```


### Immutability - What makes tuple different from list


```
l = [1,2,3]
l[0] = 'One'
l // ['One', 2, 3]
```



```
t = (1,2,3)

One
t[0] = 'One'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-34-5c31fbd4691a> in <module>()
----> 1 t[0] = 'One'

TypeError: 'tuple' object does not support item assignment

```



## Sets - unique


Sets are unordered collections of unique elements.


```
s = set()
s // set()

s.add(1)
s // {1}

s.add(2)
s // {1, 2}

s.add(2)
s // {1, 2}
```


Use set to remove duplicate elements in list.


```
l = [1,1,1,1,2,2,2,2,2,2,2,2,2,3,4,5,6,6,6]
set(l) // {1, 2, 3, 4, 5, 6}
```


### Unordered


Sets don't have any order.

## Booleans

Be careful about the capitalized `T` fro True and `F` for False.

```
True
​
True
```

```
true
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-724ba28f4a9a> in <module>()
----> 1 true

NameError: name 'true' is not defined
```

```
type(True)
bool
```


```
1>2
False

1==1
True
```

## None

Use None as placeholder if you have nothing to assign

```
b
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-9-89e6c98d9288> in <module>()
----> 1 b

NameError: name 'b' is not defined

b=None
b
```



## I/O with Basic Files

### Write a new file

```
%%writefile myfile.txt
This is the first line
This is the second line
This is the third line
```

```
Writing myfile.txt
```

### Open a non exist file -> FileNotFoundError

myfile.txt exists but myfile_not_exist.txt doesn't.

```
myfile = open('myfile.txt')
```

```
myfile = open('myfile_not_exist.txt')
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-16-dcec0a29c266> in <module>()
----> 1 myfile = open('myfile_not_exist.txt')

FileNotFoundError: [Errno 2] No such file or directory: 'myfile_not_exist.txt'

```

### Open a file

```
myfile = open('myfile.txt')

myfile.read()
'This is the first line\nThis is the second line\nThis is the third line'

myfile.read()
''
```

You get `''` for the second `.read()` because there is cursor that already went to the end of file after the first `.read()`.

Reset the cursor to 0 and read again.

```
myfile.seek(0)
0

myfile.read()
'This is the first line\nThis is the second line\nThis is the third line'
```

### read lines

```
myfile.seek(0)
myfile.readlines()

['This is the first line\n',
 'This is the second line\n',
 'This is the third line']
```

```
with open('ladygaga-followings-1008.txt') as f:
    names = f.readlines()
    names = list(map(lambda x: x.replace('\n', ''), names))
    print(names)
```

### `.close()`

```
myfile.close()
```

After closing, you cannot read anymore.

```
myfile.read()

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-31-f51008fa62ae> in <module>()
----> 1 myfile.read()

ValueError: I/O operation on closed file.

```

### Use `with open('myfile.txt') as myfile` to get rid of closing file manually

```
with open("myfile.txt") as myfile:
    contents = myfile.read()

contents
'This is the first line\nThis is the second line\nThis is the third line'
```

### Shift + Tab to open function description in jupyter-notebook

### Read and Write mode

You can read when opening a file with write mode

```
with open("myfile.txt", mode='w') as myfile:
    contents = myfile.read()

contents

---------------------------------------------------------------------------
UnsupportedOperation                      Traceback (most recent call last)
<ipython-input-36-a8e2cc09ac32> in <module>()
      1 with open("myfile.txt", mode='w') as myfile:
----> 2     contents = myfile.read()
      3 
      4 contents

UnsupportedOperation: not readable
```

- r: read
- w: write, this will overwrite file if file exists, or create new file if file not exist
- a: append, will append to file
- r+: read and write
- w+: write and read, this will overwrite file if file exists, or create new file if file not exist

#### Append to the file

Create my_new_file.txt with `%%writefile`

```
%%writefile my_new_file.txt
One
two
three
```

```
with open('my_new_file.txt', mode='r') as f:
    print(f.read())

One
two
three
```

Use mode `a`, which is the `append` mode and call `write`.

```
with open('my_new_file.txt', mode='a') as f:
    f.write('\nfour')
```

```
with open('my_new_file.txt', mode='r') as f:
    print(f.read())
One
two
three
four
```

#### Create new file with mode w

```
with open('new_file.txt', mode='w') as f:
    f.write('I created a new file!')


with open('new_file.txt', mode='r') as f:
    print(f.read())
I created a new file!
```

#### Exercise of file I/O

```
with open('test.txt', mode='w') as f:
    f.write('Hello World')
```

```
testfile = open('test.txt', 'w')
testfile.write('Hello World')
testfile.close()
```

## Python Comparison Operators

```
'2' == 2
False

2.0 == 2
True
```

The chained comparison is actually &&.

```
1<2<3
True

1<3>2
True

1<2>3
False
```

```
and: &&
or: ||
not: !
```


```
1<2 and 2>2
False

1==1 or 2==1
True

not 1!=1
True
```


## Control Statements

Control Flow syntax makes use of colons and indentation (whitespace).

This indentation system is crucial to Python and is what sets it apart from other programming languages.

### if, elif, else

```
if some_condition:
    # execute some code
else:
    # do something else
```

```
if some_condition:
    # execute some code
elif some_other_condition:
    # do something different
else:
    # do something else
```

### for

Many objects in Python are “iterable”, meaning we can iterate over every element in the object.
For example you can iterate over every character in a string, iterate over every item in a list, ***iterate over every key in a dictionary***.

```
l=[1,2,3]
for item in l:
    print(item)

1
2
3
```

#### The indentation

indentation is used like `{}` in other language.

```
sum = 0
l=[1,2,3,4,5,6]
for n in l:
    sum+=n
​
print(sum)
21
```

```
sum = 0
l=[1,2,3,4,5,6]
for n in l:
    sum+=n
​
    print(sum)
1
3
6
10
15
21
```

#### loop over String

```
for c in 'Hello':
    print(c)
H
e
l
l
o
```

If you don't use the variable `c`, usually you use `_` instead, indicating you won't use it.

```
for _ in 'Hello':
    print('Cool')
Cool
Cool
Cool
Cool
Cool
```

#### loop over list of tuples

```
l = [(1,2),(3,4),(5,6)]

for t in l:
    print(t)
(1, 2)
(3, 4)
(5, 6)
```

##### tuple unpacking can be used

```
for (a, b) in l:
    print(a)
1
3
5
```

Parenthesis around tuple can be omitted.

```
for a, b in l:
    print(a)
1
3
5
```

### Iterate through dictionary

Note that when you iterate through dictionary, you actually iterate through keys.

```
d = {'k1': 1, "k2":2, "k3":3}

for item in d:
    print(item)
k1
k2
k3
```

call `.items()` on dictionary if you want to loop over key/value item.

```
for item in d.items():
    print(item)

('k1', 1)
('k2', 2)
('k3', 3)
```

#### Since (key,value) is also tuple, use unpacking

```
for key, value in d.items():
    print(value)

1
2
3
```

#### values()

```
for value in d.values():
    print(value)

1
2
3
```

And dictionary is not ordered, this is just a small one and it seems to be ordered, but when it's bigger, no guarantee that you can get things back you put them.

### While

```
x=0
while x<5:
    print(f'The current x is {x}')
    x+=1
else:
    print(f'x {x} is no less than 5')

The current x is 0
The current x is 1
The current x is 2
The current x is 3
The current x is 4
x 5 is no less than 5
```

### pass: does nothing, just placeholder, instead of comment in Java

```
l = [1,2,3]
for item in l:
    # comment
```

```
  File "<ipython-input-4-a01c5ff62353>", line 3
    # comment
             ^
SyntaxError: unexpected EOF while parsing
```

Since Python uses indent and `:` instead `()` and `{}`, it requires you to have something after `:`, and comment won't do.

To avoid errors, use `pass` instead of comment as the placeholder if you want it to do nothing.

```
l = [1,2,3]
for item in l:
    pass
```

### continue: goes to the next of the closest loop

```
str = 'Sammy'
for c in str:
    if(c == 'a'):
        continue
    print(c)
```

```
S
m
m
y
```

### break: Breaks out of the closest loop, break only ***one*** loop

```
str = 'Sammy'
for c in str:
    if(c == 'a'):
        break
    print(c)
```

```
S
```

### Useful Operators

#### range(start, stop, step): inclusive, exclusive, step

```
for num in range(10):
    print(num)

0
1
2
3
4
5
6
7
8
9
```

```
for num in range(5,10):
    print(num)

5
6
7
8
9
```

```
for num in range(0,10,2):
    print(num)

0
2
4
6
8
```

range is a generator, which will generate information instead of saving it to memory.

```
range(0, 10, 2)

range(0, 10, 2)
```

range can be casted to list:

```
list(range(0,10,2))

[0, 2, 4, 6, 8]
```

#### enumerate

## Other tricks

### All file names in a folder

```
import os
names = os.listdir("./")
print(names)
```


### file header for direct run

Add the following in the first line of python file.

```
#! /usr/bin/env python3                                                     
```

```
chmod +x filename.py
./filename.py
```

### filter

```
num_list = list(filter(lambda x: len(x)>0, num_list))
```

### map

```
num_list = list(map(lambda x: int(x), num_list))
```

### string to int

```
main(inputs, output, int(src_node), int(dst_node))
```

### int to string

```
known_paths.saveAsTextFile(output + '/iter-' + str(i))
```

### reverse list: `reversed()`

```
finalpath = (reversed(trace_paths))
```

### read from command line

```
python3.6 ***.py graph-1/ output-1/
```

```
import sys
inputs = sys.argv[1]
output = sys.argv[2]
```

### assert and compare

```
assert sys.version_info >= (3, 5) # make sure we have Python 3.5+
assert sc.version >= '2.3'  # make sure we have Spark 2.3+
```

### split `1: 2 5`

```
num_list = re.split(':| ', line)
```

### `? :`: a if True else b

```
a if distance_a<distance_b else b
```


### replace

```
area = area.replace('Area: ', '')
```

###  if a variable exist or not

```
if 'area' not in locals():
    area = info.select_one('p:nth-of-type(1)').text.strip()
```

### trim white space

```
name = namerank[0].strip()
```

### Write list per line to file 

```
def writeList(l, file_name):
    with open(file_name, 'w') as f:
        for i in l:
            f.write('{}\n'.format(i))
```

### Not NoneType

```
if h2 is not None:
    print(h2.text)
```

### to lowercase

```
'Hello'.lower()
```

### if directory exist

```
# if dirName not exists then create that directory
if not os.path.exists(dirName):
    os.mkdir(dirName)
```

### loop with index

```
for index, link in enumerate(profileList):
    res = requests.get(link)
    with open('{}/{}.txt'.format(dirName, index), mode='w') as f:
        f.write(res.text)
```

### loop

First inclusive, second exclusive.

```
In [2]: for i in range(1, 3):
   ...:     print(i)
   ...:     
1
2
```

### Non-fix params for function

```
def get_column_list_from_df(df, *column_name_list):
    for column_name in column_name_list:
        yield df.select(column_name).rdd.map(lambda r: r[column_name]).collect()

lon, lat, temp = get_column_list_from_df(w_df, 'longitude', 'latitude', 'avg')
```

### zip

Generate tuple list for multiple lists: [(lat1,lon1,ele1), (lat2,lon2,ele2), (lat3,lon3,ele3), ...]

```
tupleList = list(zip(flat_lats, flat_lons, flat_elevs))
```

### get year from datetime.date

```
max_year = max_date.year
```

### datetime.date to string

```
selected_date.strftime('%Y-%m-%d')
```

### middle date of 2 dates (datetime.date)

```
max_date = max(date)
min_date = min(date)
middle_date = min_date+(max_date-min_date)/2
```

### sort list

```
cur_m_list.sort()
```

### sort with descending order

```
my_list.sort(reverse=True)
```

### assign NaN to a variable

```
a = float('nan')
```

### min value

```
float("-inf")
```

### list to file

```
with open('{}/{}.txt'.format(dirName, user), mode='w') as f:
    f.write('\n'.join(tweets))
```

### try except

```
for user_name in names:
    try:
        tweets_from_one_user(user_name)
    except Exception as e:
        print(e)
```

