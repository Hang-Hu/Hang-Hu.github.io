---
layout: post
author: Hang Hu
categories: frontend
tags: FrontEnd 
cover: 
---


## References

https://www.udemy.com/the-web-developer-bootcamp

Head First Javascript Programming

MDN

## Basics

HTML: nouns, content
CSS: adjectives, styling
Javascript: verbs, action

## HTML

In sublime, type html and click tab, then it finishes the html prototype for you.

`command + /`: comment the line

`<title></title>` has two functions:
1. Show in the tab

2. collected by google as title.

block element:
inline element:

`strong` means a little bit more than `bold`.
`em` emphasis means more than `i`.

`ol`: ordered list. We have to provide `li` list item inside it.

`ul`: unordered list.

```
ul {
  list-style-type: circle;
}

ol {
  list-style-type: lower-roman;
}
```

Of particular interest is `none`, which is commonly used when marking up **menu navigation** with a `<ul>` list. The `none` value allows the menu’s list items to be styled more like buttons.

![menu structure]({{ site.url }}/assets/posts_img/list-items-for-menus-70abb2.png)

`div`: block level container

`span`: inline container

### Attributes

Key value pair.

MDN attribute reference

`img`: self closing tag.

relative path

thead and tbody.

### `head`

#### UTF-8 for international characters

```
<meta charset='UTF-8'/>
```

## form, input and label

## input nested in input

```
<form action="http://www.wikipedia.org">
    <label>
        Username:
        <input name="username" type="text" placeholder="username">
    </label>
    <label>
        Password:
        <input name="password" type="password" placeholder="password">
    </label>
    <input type="submit">
</form>
```


## label and input connected by for and id


```
<form action="http://www.wikipedia.org">
    <label for="username">Username:</label>
    <input id="username" name="username" type="text" placeholder="username">
    <label>Password:</label>
    <input id="password" name="password" type="password" placeholder="password">
    <input type="submit">
</form>
```


## Dropdown menu


```
<form action="test_submit" method="get" accept-charset="utf-8">
    <label for="dog">Dog</label>
    <input type="radio" id="dog" name="pet" value="dog">
    <label for="cat">Cat</label>
    <input type="radio" id="cat" name="pet" value="cat">
    <select name="color">
        <option value="red">Red</option>
        <option value="orange">Orange</option>
        <option value="yellow">Yellow</option>
    </select>
    <input type="text" name="text">
    <textarea name="textarea" rows="5" cols="10"></textarea>
    <button type="submit">Submit</button>
</form>
```


## css


### inline


```
<h1 style="color: purple;">Register</h1>
```


### color rgba


a means alpha(transparency) ranging from 0.0 - 1.0


```
h1  {
    color: rgba(0, 0, 0, .5);
}
```


Note that `.5` is equal to `0.5`.


### Background picture


```
body    {
    background: url(http://i2.cdn.cnn.com/cnnnext/dam/assets/150306150823-beautiful-japan-mt-daisen-tottori-super-169.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}
```


## Border


border-color, border-width, border-style are required together, a border without color, width or style will show nothing.


```
h1  {
    border-color: black;
    border-width:5px;
    border-style: solid;
}
```


or


```
h1  {
    border: 5px solid purple;
}
```

### Rounded corner with `border-radius`

```
body > div:nth-of-type(3) > div > div{
    border-radius: 30px;
}
```

## CSS selectors


### element/type


```
li{
    
}
```


### class


```
.hello{
    
}
```


### id


```
# name {

    
}
```


### Other selectors


```

```


[https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048](https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048)

## `nth-of-type`

The `:nth-of-type()` CSS pseudo-class matches one or more elements of a given type, based on their position among **a group of siblings**.

```
<body>
    <div>
        <h2>The great</h2>
        <h1></h1>
        <h2>Guessing game</h2>
    </div>
    <div>
        <div>
            <h3>New colors</h3>
        </div>
        <div>
            <h3>easy</h3>
            <h3>hard</h3>   
        </div>
    </div>
</body>
```

```
div:nth-of-type(1){
    background-color:blue;
}
```

Two div Selected:

1st `div` inside `body`.

```
<div>
    <h2>The great</h2>
    <h1></h1>
    <h2>Guessing game</h2>
</div>
```

1st `div` inside 2nd `div` of `body`

```
<div>
    <h3>New colors</h3>
</div>
```

### more `nth-of-type()`

`nth-of-type(odd)`/`nth-of-type(2n+1)`: select odd ones

`nth-of-type(even)`/`nth-of-type(2n)`: select even ones

`span:nth-of-type(6n+2)` selects every 6th instance of a `span`, starting from (and including) the second instance.


### `last-of-type`

`div:last-of-type` selects the last `div` in every element.


### `:empty`

Selects elements that don't have any other elements inside of them.

`div:empty` selects all empty `div` elements.

Select the empty bentos: `bento:empty`

### Attribute Selector

Select all elements that have a specific attribute

`[attribute]`
Attributes appear inside the opening tag of an element, like this: `<span attribute="value">`. An attribute does not always have a value, it can be blank!

Examples

`a[href]` selects all a elements that have a `href="anything"` attribute.
`[type]` selects all elements that have a `type="anything"` attribute.

```
<div class="table">
    <bento>
        <apple class="small" />
    </bento>
    <apple for="Ethan" />
    <plate for="Alice">
        <pickle />
    </plate>
    <bento for="Clara">
        <orange />
    </bento>
    <pickle />
</div>
```

Select the items for someone: `[for]`

Select the `plates` for someone: `plate[for]`

Select Clara's meal: `[for="Clara"]`

### Attribute Starts With Selector

Select all elements with an attribute value that starts with specific characters

`[attribute^="value"]`

Examples

`.toy[category^="Swim"]` selects elements with class toy and category that starts with "Swim".

### Attribute Ends With Selector

Select all elements with an attribute value that ends with specific characters

`[attribute$="value"]`

Examples

`img[src$=".jpg"]` selects all images ending with `.jpg`.

### Attribute Wildcard Selector

Select all elements with an attribute value that **contains** specific characters anywhere

`[attribute*="value"]

`A useful selector if you can identify a common pattern in things like class, href or src attributes.

Examples

`img[src*="/thumbnails/"]` selects all image elements that show images from the "thumbnails" folder.

`[class*="heading"]` selects all elements with "heading" in their class, like class="main-heading" and class="sub-heading"

## margin auto center

```
margin: 0 auto 0 auto;
```

Or

```
margin: 0 auto;
```

Or

```
margin: auto;
```

## Center h1

```
h1 {
	text-align: center;
}

```

```
div#main {
  width: 600px;
  margin: 0 auto; 
}
```

Setting the `width` of a block-level element will prevent it from stretching out to the edges of its container to the left and right. Then, you can set the left and right margins to `auto` to horizontally center that element within its container. The element will take up the width you specify, then the remaining space will be split evenly between the two margins.

The only problem occurs when the browser window is narrower than the width of your element. The browser resolves this by creating a **horizontal scrollbar** on the page. Let's improve the situation...

```
div#main {
  max-width: 600px;
  margin: 0 auto; 
}
```


Using `max-width` instead of `width` in this situation will improve the browser's handling of small windows. This is important when making a site usable on mobile. Resize this page to check it out!

By the way, max-width is supported by all major browsers including IE7+ so you shouldn't be afraid of using it.

## use float to clear white space between images

```
body > img {
	width: 300px;
	float: left;
}
```

## Image Grids with div(better effect than table)

```
<body>
    <img src="http://c1.staticflickr.com/9/8450/8026519634_f33f3724ea_b.jpg">
    <img src="http://c2.staticflickr.com/8/7218/7209301894_c99d3a33c2_h.jpg">
    <img src="http://c2.staticflickr.com/8/7231/6947093326_df216540ff_b.jpg">

    <img src="http://c1.staticflickr.com/9/8788/17367410309_78abb9e5b6_b.jpg">
    <img src="http://c2.staticflickr.com/6/5814/20700286354_762c19bd3b_b.jpg">
    <img src="http://c2.staticflickr.com/6/5647/21137202535_404bf25729_b.jpg">

    <img src="http://c2.staticflickr.com/6/5588/14991687545_5c8e1a2e86_b.jpg">
    <img src="http://c2.staticflickr.com/4/3888/14878097108_5997041006_b.jpg">
    <img src="http://c2.staticflickr.com/8/7579/15482110477_0b0e9e5421_b.jpg">
</body>
```

```
body > img {
    width: 30%;
    /*use float to clear white space between images*/
    float: left;
    /*and then control your own margin*/
    margin: 1.66%;
}
```

## Center img in td

```
td {
	text-align: center;
}
```

## cut the underline

```
h1 {
	border-bottom: 2px solid gray;
	width: 30%;
}
```

## select element with class title

```
h1.title {
	background-color: yellow;
}
```

## Keep width 700px, while shrink less than 700px, make it 80%

```
body {
	border: solid 20px #bdc3c7;
	max-width: 700px;
	width: 80%;
	padding: 20px;
	/*since width is fixed, use an auto margin*/
	margin: 20px auto;
}
```

## em vs rem

`em`(pronounced like the letter m) is relative to the parent element.


```
body {
    font-size: 2em;
}
h1 {
    font-size: 2em;
}
```

Then body is 2 times the size, and h1 is 4 times.


`rem` is relative to the root one.


```
body {
    font-size: 2rem;
}
h1 {
    font-size: 2rem;
}
```

Both body and h1 is 2 times the size.

## Bootstrap

### Use form-group to group input and lable for optimum spacing

```
<div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
</div>
```

### form-control beauties input

```
<input type="email" class="form-control" id="exampleInputEmail2" placeholder="jane.doe@example.com">
```

## use container to quickly get margin spacing

```
<div class="container">
</div>
```


## bootstrap 3

```
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
```

## navbar-brand is the company name, directing to homepage

```
<nav class="navbar navbar-default">
    <div class="navbar-header">
        <a href="#" class="navbar-brand">Koke</a>
    </div>
</nav>
```

Or inside `<a></a>`, use img instead of text.

## navbar and dropdown in bootstrap depends on bootstrap Javascript, and bootstrap Javascript relies on jQuery

```
<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

```

## nav

```
<nav class="navbar navbar-default">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"><!--to make content in hamburger appear when clicking-->
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
            <a href="#" class="navbar-brand">Koke</a><!--Brand here-->
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"><!--put content you want to collapse here-->
            <ul class="nav navbar-nav"><!--left content -->
                <li class="active"><a href="#">Home</a></li>
                <li><a href="#">About</a></li>
                <li><a href="#">Contact</a></li>
            </ul>
            <ul class="nav navbar-nav navbar-right"><!--right content -->
                <li><a href="#">Sign Up</a></li>
                <li><a href="#">Login</a></li>
            </ul>
        </div>
        
    </div>
</nav>
```


## Add navbar-fixed-top to nav to have a fixed navbar

```
<nav class="navbar navbar-default navbar-fixed-top">
```

## Make home link active

```
<li class="active"><a href="#">Home</a></li>
```

## Grid For 4 Items, intelligent stacking

When display is large/medium width, 4(4*3=12) items in a row.
When display is small width,        2(2*6=12) items in a row.
When display is extra small width,  1 item in a row.

```
<div class="row">
    <div class="col-md-3 col-sm-6 pink">ABBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
</div>
```

Equals to

```
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">ABBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
</div>
```

Explain:

1. If medium is specified, large follows the specification
2. Lower cases which are not specified, use 1 item in a row(stack items)

## Nested row

Note that the `row`  inside `col-xx-x` is required, otherwise the column can't be fully divided.

```
<div class="row">
    <div class="col-md-3 col-sm-6 pink">
        <div class="row"><!--row is required-->
            <div class="col-lg-6 orange">First</div>
            <div class="col-lg-6 orange">Second</div>   
        </div>
    </div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
</div>
```

## Google font

```
<link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet">
```

```
body {
    font-family: "Source Sans Pro";
    font-weight: 700;
}
```


## Thumbnail with grid

```
<div class="row">
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
</div>
```

## Grid 3->2->1 items/row based on device(images of varying sizes)

1. Use `row` for only one time
2. Use `flex` to avoid white space bug
3. `col-md-4` leads to 3/row, `col-sm-6` to 2/row

The reason of white space bug(images of varying sizes):
1. Images are all of the same width because of column restriction
2. Images are of different height because they are of different in the beginning, and no stretch performed
3. If you use multiples `row` for each row, then the `row` can organize images of different height
4. If you use one `row` for all images to make the switch of 3->2 /row, white space slots may appear in images

Solution of white space bug(images of varying sizes):
1. Use flex, and the images are still of different height

```
.flex {
    display: flex;
    flex-wrap: wrap;
}
```

2. Make images the same height(may lead to stretch)
```
.image {
  width: 100%;
  height: 250px;
  background-size: cover;
  background-position: center;
}
```


I prefer flex, because fixed height will lead to stretch(for `img`) or crop(for `background-image`).

```
.flex {
    display: flex;
    flex-wrap: wrap;
}
```


```
<div class="row flex">
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
</div>
```

## Font awesome

```
<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js" integrity="sha384-slN8GvtUJGnv6ca26v8EzVaR9DC58QEwsIk9q1QXdCU8Yu8ck/tL/5szYlBbqmS+" crossorigin="anonymous"></script>
```

```
<i class="fas fa-paw"></i>
```


## Make a landing page

```
<div id="landing">
    <h1>Perfect Match</h1>
    <div id="caption">
        <h4>The only human-feline dating app</h4>
    </div>
    <button class="btn btn-default btn-lg">
        <i class="fas fa-paw"></i>
        Get Started!
    </button>
</div>
```


```
#landing {
    padding: 18%;
    background-image: url(https://images.unsplash.com/photo-1522198684868-88edd8463fc9?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=19e6b72e6556179d4644fc3830a1ce85&auto=format&fit=crop&w=1050&q=80);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    height: 100%;
    text-transform: capitalize;
    color: white;
    text-align: center;
}
```


## Decorate hr

```
hr {
    width: 400px;
    border-top: solid 1px #f8f8f8;
    border-bottom: 1px solid rgba(0, 0, 0, 0.2)
}
```

## login icon

Note that `<i></i>` should be inside `<a></a>` to keep aligned with text "Login".

```
<a href="#">Login<i class="fas fa-user"></i></a>
```


## Use text-shadow

```
text-shadow: 0px 4px 3px rgba(0,0,0,0.4),
                 0px 8px 13px rgba(0,0,0,0.1),
                 0px 18px 23px rgba(0,0,0,0.1);
```


## Console Trick in google.com

```
var logo=document.querySelector("#hplogo");
setInterval(function(){logo.width+=5;}, 1000)
```

## Javascript

```Javascript
//Numbers
4
9.3
-10

//Strings
"Hello World"
"43"

//Booleans
true
false

//null and undefined
null
undefined

//Numbers
4
9.3
-10

//We can do some math

4 + 10     //14
1/5        //0.2

//Modulo - remainder operator

10 % 3   //1
24 % 2   //0
15 % 11  //4

//Single or Double quotes OK
"hello world"
'hello world'

//Concatenation
"charlie" + "brown"  //"charliebrown"

//Escape Characters start with "\"
"Singin \"Do wah diddy, diddy, dum diddy do\" "
"This is a backslash: \\"

//Strings have a length property
"hello world".length  //11

//Access individual characters using [] and an index
"hello"[0]  //"h"
"hello"[4]  //"o"

//1.
100 % 3 //=1

//2.
("blah" + "blah")[6] //="a"

//3.
"hello".length % "hi\\".length //=5%3=2

//Variables are simply containers that store values
//They follow this pattern:
var yourVariableName = yourValue;

//They can store all of the values we've seen
var name = "Rusty";
var secretNumber = 73;
var isAdorable = true;

//Recall the stored value by calling the variable name
var name = "Rusty";
"hello there " + name    //"hello there Rusty"

var num = 37;
num + 3 + 10    //50

//We can also update existing variables
var name = "Robert";
name = "Bob";

//The two other primitives are null and undefined

//Variables that are declared but not initialized are undefined
//The following variables are undefined:
var name;
var age;

//null is "explicitly nothing"
var currentPlayer = "charlie";
currentPlayer = null;   //game over

// console.log, alert, prompt, clear()

var name=prompt("What is your name?")

Comparison Operators
Operator    Name    Example ​Result
>   Greater than    x > 10  false
>=  Greater than or equal to    x >= 5  true
<   Less than   x < -50 false
<=  Less than or equal to   x <= 100    true
==  Equal to    x == "5"    true
!=  Not equal to    x != "b"    true
=== Equal value and type    x === "5"   false
!== Not equal value or equal type   x !== "5"   true

var x = 99;

x == "99"  //true

x === "99" //false


var y = null;

y == undefined //true

y === undefined //false
true == "1"          //true

0 == false           //true

null == undefined    //true

NaN == NaN           //false

Truthy and Falsy Values
Values that aren't actually true or false, are still inherently "truthy" or "falsey" when evaluated in a boolean context

!"Hello World" //false

!"" //true

!null //true

!0 //true

!-1 //false

!NaN //true

Falsy Values:
false
0
""
null
undefined
NaN 
Everything Else Is Truthy


```


## string

```
"3" + "4" // "34" (string)

"3" - "4" // -1 (number)

"3" * "4" // 12 (number)

"3" / "4" // 0.75 (number)
```

## If number is a perfect square

```
number%Math.sqrt(number)===0
```

## Functions

Functions let us wrap bits of code up into REUSABLE packages.  They are one of the building blocks of JS.


```
function doSomething() {
  console.log("HELLO WORLD");
}
```

## Global Variable

Unlike Java which dosn't have global variable, JS do have global variable.

```
var y=1;
var test = function(){console.log(y);}
test();
```

```
var phrase= function(){p="asasa"}
var p=1213;
phrase();
console.log(p); //"asasa"
```

## Use function variable as a parameter

```
var sing = function(){
    console.log("Twinkle twinkle...");
}

var useFuncAsPara = function(){
    return setInterval(sing, 1000);// no () after sing, because we don't call sing, we just send the sing code snippet to setInterval and this callback will call sing for us
}
var intervalId = useFuncAsPara();
// after a while
clearInterval(intervalId);
```

`setInterval` will return an id which can be used to stop the timer with `clearInterval(intervalId);`

## New line, but not submit in chrome console

Shift+Enter in chrome console

## Anonymous function

```
setInterval(function(){
    console.log("a");
}, 2000);
```

## Array


```
// We can also add new data
var friends = ["Charlie", "Liz", "David", "Mattias"];
friends[4] = "Amelie";

//We can initialize an empty array two ways:
var friends = []; //no friends :(
var friends = new Array() //uncommon

//Arrays can hold any type of data
var random_collection = [49, true, "Hermione", null];

//Arrays have a length property
var nums = [45,37,89,24];
nums.length   //4

var numbers = [22, 67, 33, 96, 88];

//What does the following line print?
console.log(numbers[numbers.length]) // undefined

//Use push to add to the end of an array:
var colors = ["red", "orange", "yellow"];
colors.push("green");
//["red", "orange", "yellow", "green"]

//Use pop to remove the last item in an array
var colors = ["red", "orange", "yellow"];
colors.pop();
//["red", "orange"]

//pop() returns the removed element
var col = colors.pop();  //orange

var colors = ["red", "orange", "yellow"];
colors.unshift("infrared")
//["infrared", "red", "orange", "yellow"]

//Use unshift to add to the front of an array:
var colors = ["red", "orange", "yellow"];
colors.unshift("infrared")
//["infrared", "red", "orange", "yellow"]

//Use shift to remove the first item in an array
var colors = ["red", "orange", "yellow"];
colors.shift();
//["orange", "yellow"]

//shift() also returns the removed element
var col = colors.shift();  //orange

//Use indexOf() to find the index of an item in an array
var friends = ["Charlie", "Liz", "David", "Mattias", "Liz"];

//returns the first index at which a given element can be found
friends.indexOf("David"); //2
friends.indexOf("Liz"); //1, not 4

//returns -1 if the element is not present.
friends.indexOf("Hagrid"); //-1

//Use slice() to copy parts of an array
var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//use slice to copy the 2nd and 3d fruits
//specify index where the new array starts(1) and ends(3)
var citrus = fruits.slice(1, 3);

//this does not alter the original fruits array
//citrus contains ['Orange','Lemon']
//fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];

//you can also use slice() to copy an entire array
var nums = [1,2,3];
var otherNums = nums.slice();
//both arrays are [1,2,3]

//Use splice to remove
var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//use splice to remove 'Orange' from the array
//specify index of the element to be removed and 
//how many elements should be removed from that index
fruits.splice(1, 1);
// returns: ["Orange"]
console.log(fruits);
// prints: ["Banana", "Lemon", "Apple", "Mango"]
```


## Dynamic typing

Variables in JavaScript are declared without a type. In fact, we can assign a number to a variable, and then later assign a string to the same variable.

var myStuff;
myStuff = 1;
myStuff = "hi";
myStuff = null;
myStuff = [];
myStuff = {};
In some cases, this saves us keystrokes and allows for polymorphism (the variable can be whatever type is appropriate at the time), but also makes it very difficult to reason about types. It is not possible to infer what the type of variable is, just by inspecting the code.

JavaScript has weak typing, in that it freely coerces variables to whatever type seem appropriate. If we use the + operator with a string, the other object gets converted to a string first. The order of the operands does not matter.

console.log("1" + 2);
console.log(1 + "2");
If we use the *, / and - operators with a number, the other object gets converted to a number.

console.log("3" * 4);
console.log(3 * "4");
Here things get weird.

console.log([] + {});
console.log({} + []);
console.log({} + []);
console.log({} + {});
Whenever possible, minimize the use of automatic casting.

For instance, the block of code below works if duck is a string or an array.

var duck = "Donald Duck";
// var duck = ["Donald", "Duck"];

for (var i = 0; i < duck.length; i++) {
    console.log("Element #" + i + ": " + duck[i]);
}


## Loop

### for or while or do while

```
//with a for loop
var colors = ["red", "orange", "yellow", "green"];

for(var i = 0; i < colors.length; i++) {
  console.log(colors[i]);
}
```

### forEach

```
// JavaScript provides an easy built-in way of iterating over an array: ForEach

var colors = ["red", "orange","yellow", "green"];

colors.forEach(function(color){
//color is a placeholder, call it whatever you want
  console.log(color);
});
```

`.forEach` takes a callback function, that callback function is expected to have at least 1, but up to 3, arguments. This is how .forEach was designed.

The arguments are in a specific order:
- The first one represents each element in the array (per loop iteration) that .forEach was called on.
- The second represents the index of said element.
- The third represents the array that .forEach was called on (it will be the same for every iteration of the loop).

You have a couple options when calling .forEach on an array:

You can pass in an anonymous function:

```
[1,2,3].forEach(function(el, i, arr) {
  console.log(el, i, arr);
});
```

Or you can pass in a pre-written, named function.

```
function logNums(el, i, arr) {
  console.log(el, i, arr);
}

 
[1,2,3].forEach(logNums);
```

Notice how in the second example we don't invoke `logNums` when passing it into `.forEach`? We simply pass in the function name. We don't need to invoke the `logNums` function, `.forEach` does that for us. In fact, it invokes the function multiple times, once for every element inside of the array.

## Anonymous Function

Anonymous function not invoked.

```
(function(){
    console.log("I am a function!");
})
ƒ (){
    console.log("I am a function!");
}
```


Use `()` to invoke the anonymous function.

```
(function(){
    console.log("I am a function!");
})()
console.js:35 I am a function!
undefined
```


## Self Invoking function

### invoke anonymous function

```
(function(){
    console.log("I am a function!");
})()
```

### invoke normal function

```
(function test(){
    console.log("I am a function!");
})()
```


## Write forEach myself

### `forEach` official usage

```
arr=[21,242,"asad"];
arr.forEach(function(item){
    console.log(item);
});
```

### `myForEach`

```
function myForEach(arr, func){
    for(var i=0; i<arr.length; i++){
        func(arr[i]);
    }
}
myForEach(arr, console.log);
myForEach(arr, alert);
```

### Call `myForEach` with custom function

```
function funcTest(item){
    console.log(item);
}
myForEach(arr, funcTest);
```

### Call `myForEach` with anonymous function

Pass extra argument, which will be ignored

```
myForEach(arr, function(){
    console.log("Hi");
});
```

Normal usage

```
myForEach(arr, function(item){
    console.log("Hi, " + item);
});
```

The final version

```
Array.prototype.myForEach = function(func){
    for(var i=0; i<this.length; i++){
        func(this[i]);
    }
};
["sad", "burry", "Cheese"].myForEach(console.log);
```

## Object

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};
//Note: unlike arrays, objects have no order

```

### Retrieving Data

You have two choices: bracket and dot notation

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//bracket notation, similar to arrays:
console.log(person["name"]);
//dot notation:
console.log(person.name);
```

```
//you cannot use dot notation if the property starts with a number
someObject.1blah    //INVALID
someObject["1blah"] //VALID!

//you can lookup using a variable with bracket notation
var str = "name";
someObject.str   //doesn't look for "name"
someObject[str] //does evaluate str and looks for "name"

//you cannot use dot notation for property names with spaces
someObject.fav color      //INVALID
someObject["fav color"];  //VALID
```

### Updating Data

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//to update age
person["age"] += 1;
//to update city
person.city = "London";
```

### Creating Objects

```
//make an empty object and then add to it
var person = {}
person.name = "Travis";
person.age = 21;
person.city = "LA";

//all at once
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//another way of initializing an Object
var person = new Object();
person.name = "Travis";
person.age = 21;
person.city = "LA";
```

Objects can hold all sorts of data, number, string, boolean, array, object.

```
var junkObject = {
  age: 57,
  color: "purple",
  isHungry: true,
  friends: ["Horatio", "Hamlet"],
  pet: {
   name: "Rusty", 
   species: "Dog", 
   age: 2
  }
};
```

### Object Quiz

```
var someObject = {};

//Which of the following are valid:

someObject._name = "Hedwig"; //valid

someObject.age = 6; //valid

var prop = "color"
someObject[prop] = "red"; //valid, equal to someObject.color="red";

someObject.123 = true;// not valid, you cannot use dot notation if the property starts with a number, use someObject["123"]=true instead
```

## Adds method to Object

1. Avoid namespace collissions

```
var person = {
    name: "Bob",
    age: 18,
    add: function(x, y){
        return x+y;
    }
}
person.add = 
person.add(10,2);
```

```
var dog = {
    name: "",
    speak: function(){
        console.log("Bark!");
    }
};
dog.speak();//Bark!
```

```
user.delete();
comment.delete();
post.delete();
```


## this

```
var comments = {};
comments.data = ["Good job!", "Bye", "Lame..."];
```

print function outside comments.

```
function print(arr){
    arr.forEach(function(item){
        console.log(item);
    });
}
print(comments.data);
```

print function belongs to Object comments.

```
comments.print = function print(){
    this.data.forEach(function(item){
        console.log(item);
    });
};
comments.print();
```


## delete property (state & method)

```
delete comments.print
delete comments.data
```

## DOM(Document Object Model) Manipulation Prep

As you begin working with the DOM you'll be writing some JavaScript code that selects HTML elements from the page and manipulates them. 

When doing this, be sure to include your JavaScript code at the bottom of the HTML document, right before the closing </body>  tag.

The HTML will need to have loaded before the JavaScript is run, otherwise the JavaScript will throw an error because the HTML that it is trying to select and manipulate doesn't exist (yet).

See example below:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test</title>
</head>
<body>
    <h1>Some HTML Code Here</h1>
 
    <script src="scriptfile.js"></script>
</body>
</html>
```

## Use `window.addEventListener("load", function)`/`window.onload`(not preferred) to ensure JS executed after page is loaded

`window` can be omitted because it's considered as the global object.

```
window.addEventListener("load", function(event){
    console.log("All resources finished loading!");
});
```

```
addEventListener("load", function(event){
    console.log("All resources finished loading!");
});
```

Don't omit `window` for `onload` because most people are worried `onload` is a common enough property name (other elements can have the `onload` property too) that not specifying which `onload` property might be confusing.

```
window.onload = init;

function init(){
    document.getElementById("green").innerHTML = "Changed by JS!!!";
}
```

## Print document object

```
console.dir(document)
```

Pay attention to `document.body.childNodes`


## innerHTML and outerHTML

```
document.body.innerHTML;
"
        <h1>Including JS Files</h1>
        <p id="green">GGGreen</p>
        <p id="red">RED Light</p>
    
"
document.body.outerHTML;
"<body>
        <h1>Including JS Files</h1>
        <p id="green">GGGreen</p>
        <p id="red">RED Light</p>
    
</body>"
```


## Use `body.style.backgroundColor` to change its background-color every second

```
var h1 = document.querySelector("h1");
h1.style.textAlign = "center";
```

```
window.addEventListener("load", init);
function init(){
    document.getElementById("green").innerHTML = "Changed by JS!!!";
    setInterval(changeColor, 1000);
}
function changeColor(){
    var colors = ["red", "blue", "yellow", "black", "white", "green", "pink", "orange", "gray"];
    var body = document.querySelector("body");
    var rand = Math.floor(Math.random() * colors.length);
    body.style.backgroundColor = colors[rand];
}
```

## `setAttribute`

```
var red = document.querySelector("p#red");
red.setAttribute("class", "redText");
```

## ~~getAttribute~~

```
var scoop = document.getElementById("raspberry");
var altText = scoop.getAttribute("alt");
```

## id/selector/attribute doesn’t exist

What happens when you call `getElementById`/`querySelector` and the id doesn’t exist in the DOM?
`null`

What happens when you call `getElementsBy*`/`querySelectorAll` and the id doesn’t exist in the DOM?
`[]`

What happens if my attribute doesn’t exist in the element?
`null`


## `createElement` and `appendChild` in DOM

```
var newEle = document.createElement("p");
newEle.innerHTML = "New Element, Hello!"
document.body.appendChild(newEle);
```

## `document`

```
document.URL; //the URL we are on
document.head; //head
document.body; //body
document.links;  //every single anchor tag in this page
```

```
document.getElementById() /*Takes a string argument and returns the one element with a matching ID*/
document.getElementsByClassName() /*Takes a string argument and returns a list of elements that have a matching class*/
document.getElementsByTagName() /*Returns a list of all elements of a given tag name, like <li> or <h1>*/
document.querySelector() /*Returns the first element that matches a given CSS-style selector, select the first one*/
document.querySelectorAll() /*Returns a list of elements that matches a given CSS-style selector*/
```

```
<body>
  <h1>Hello</h1>
  <h1>Goodbye</h1>
  <ul>
    <li id="highlight">List Item 1</li>
    <li class="bolded">List Item 2</li>
    <li class="bolded">List Item 3</li>
  </ul>
</body>
```

```
var tag = document.getElementById("highlight");
var tags = document.getElementsByClassName("bolded");
var tags = document.getElementsByTagName("li");
var tags = document.getElementsByTagName("h1");
var tag = document.querySelector("#highlight"); //select by ID
var tag = document.querySelector(".bolded"); //select by Class
var tag = document.querySelector("h1"); //select by tag
var tags = document.querySelectorAll("h1"); //select by tag
```

## DOM chang style property(with JS instead of CSS)

The style property is one way to manipulate an element's style

```
/SELECT
var tag = document.getElementById("highlight");

//MANIPULATE
tag.style.color = "blue";
tag.style.border = "10px solid red";
tag.style.fontSize = "70px";
tag.style.background = "yellow";
tag.style.marginTop = "200px";
```

It is recommended for styles to be defined in a separate file or files. The style property allows for quick styling, for example for testing purposes. - MDN.

### Define a CSS class and toggle it on/off with JS

Rather than directly manipulating style with JS, we can define a CSS class and then toggle it on or off with JS

```
//INSTEAD OF THIS:
var first = document.querySelector("#first");
first.style.color="red";
first.style.textAlign="center";
first.style.margin="30px";
first.style.fontSize="20px";
first.style.background="yellow";
```

```
/*DEFINE A CLASS IN CSS*/
.some-class {
    color: blue;
    border: 10px solid red;
}
```

```
var second = document.querySelector("p:nth-of-type(2)");
//ADD THE NEW CLASS TO THE SELECTED ELEMENT
second.classList.add("some-class");
```

### classList

A read-only list that contains the classes for a given element.  It is not an array, you can't use push/pop.


```
/*DEFINE A CLASS IN CSS*/
.another-class {
  color: purple;
  fontSize: 76px;
}
```

```
var tag = document.querySelector("h1");

//ADD A CLASS TO THE SELECTED ELEMENT
tag.classList.add("another-class");

//REMOVE A CLASS
tag.classList.remove("another-class");

//TOGGLE A CLASS
tag.classList.toggle("another-class");
```


### Test classList in JSFiddle

```
// open https://jsfiddle.net/d3mjv/3/

document.body.classList.toggle("fullyLoaded"); //remove
document.body.classList.toggle("fullyLoaded"); //add
document.body.className=""; //remove all class
if(document.body.className){
    alert("HH"); //won't alert, because className is "" 
}
if(document.body.classList){
    alert("HH"); // will alert, because typeof classList is object
}
```

### How can a read only property(element.classList) can be modified or assigned to some other value in javascript?

```
key.classList = [];

Or

key.classList = "";
```

classList is a method of a host object. It's not described in great detail in either specification referenced by MDN: WHATWG HTML Living Standard and W3C DOM. Generally, browsers try to be accommodating where technologies aren't clearly defined or have a solid de facto standard. So in this case, assigning an object to classList seems to set the className property to the default toString of that object. But do not rely on that. – RobG Stackoverflow 

When I try element.classList = "" in Safari (Version 9.1.1), I get an error: TypeError: Attempted to assign to readonly property.  – bryanbraun Stackoverflow

### `textContent`

Returns a string of all the text contained in a given element

```
document.body.textContent
"
  I am an h1!
  Hello
  Goodbye
  Hi Again
  Goodbye Again

"
document.body.textContent = "Hello"
```

### `innerHTML`

```
document.body.innerHTML
"
  <h1>I am an h1!</h1>
  <p id="first" class="">Hello</p>
  <p id="test" class="">Goodbye</p>
  <p>Hi Again</p>
  <p id="last">Goodbye Again</p>
"
document.body.innerHTML = "Hello"
```

### Assign tag to `textContent`/`innerHTML`

```
document.body.innerHTML = "<h1>Bye</h1>"
```

H1 format `Bye` is displayed, rendering the `h1` tag


```
document.body.innerText = "<h1>Bye</h1>"
```

`<h1>Bye</h1>` is displayed, not rendering the `h1` tag.


### Attributes

Use getAttribute() and setAttribute() to read and write attributes like src or href.

Note that `https://` is required here, to tell browser the `href` is an absolute path instead of a relative one, otherwise it will direct to `file:///path-to-html-directory/www.google.com`

#### 1. `href`

```
<a href="https://www.google.com">Link to Google</a>
```

```
document.querySelector("a").setAttribute("href", "https://www.bing.com");
```

#### 2. `src`

```
<img src="https://images.unsplash.com/photo-1493494817959-6981ce4b2603?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=5c34ed8790c4544d6e36cfa538f12194&auto=format&fit=crop&w=1050&q=80" width="200px">
```

```
document.querySelector("img").setAttribute("src", "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80");
```

### Change google logo with `setAttribute`

```
var logo = document.querySelector("#hplogo");
logo.setAttribute("srcset", "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80")
```

Or even with property `logo.srcset`.

```
logo.srcset = "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80";
```

Style the logo:

```
logo.style.width = "200px";
logo.style.height = "100px";
logo.style.border = "solid 2px yellow";
```

Edit all links:

```
var links = document.querySelectorAll("a");
links.forEach(function(link){
    console.log(link.textContent);
    link.style.backgroundColor = "pink";
    link.style.border = "dashed 1px green";
    link.style.color = "blue";
    link.setAttribute("href", "https://www.bing.com");
});
```

### Event Listener

To add a listener, we use a method called addEventListener

The function is also called the event handler, or the callback.

```
element.addEventListener(type, function);
```

Effect: When mouse enters the image, it becomes larger, when leaves, it becomes smaller(original width is 200px).

```
var image = document.querySelector("img");
image.addEventListener("mouseover", function(){
    this.style.width = "300px";
});
image.addEventListener("mouseout", function(){
    this.style.width = "200px";
});
```

Use named function.

```
image.addEventListener("mouseover", bigImage);
function bigImage(){
    this.style.width = "300px";
}
```

We can add more than one event listener to one element.

### Event types

MDN lists over 300 different events!  Here are some of the more common ones:

`https://developer.mozilla.org/en-US/docs/Web/Events`

```
click
mouseover/mouseout
dblclick
keypress
drag
```

All `li` inside `ul` have following effect.

```
document.querySelector("ul").addEventListener("click", console.log)
```

### Chang `li` color when clicking

#### Basic solution

```
document.querySelectorAll("li").forEach(function(li){
    li.addEventListener("click", function(){
        li.style.color = "pink";
    });
});
```

#### Use `this` instead

```
document.querySelectorAll("li").forEach(function(li){
    li.addEventListener("click", function(){
        this.style.color = "pink";
    });
});
```

### Another way of event listener

The following has the same effect.

```
document.body.addEventListener("click", function(){
    alert("addEventListener");
});
```

```
document.body.onclick = function(){
    alert("onclick");
};
```

Notice that `addEventListener` is the mordern method, which is preferred.

### Event Object

Event will generate the corresponding event object, such as `MouseEvent`, which is passed to the event handler.

If the event handler has no parameter, it will follow the rule of "more arguments than parameters", which is ignoring them.

If the event handler has at least one parameter, you can use the event object.

```
document.body.addEventListener("click", function(eventObj){
    console.log(eventObj.target);
});
```

#### Some Properties of Event Object

1. target: I hold the object on which the event occurred. I can be different kinds of objects, but most often I’m an element object.
2. type: I’m a string, like “click” or “load”, that tells you what just happened.
3. timeStamp: Want to know when your event happened? I’m the property for you.
Want
4. keyCode: I’ll tell you what key the user just pressed.
5. clientX: Want to know how far from the left side of the browser window the user clicked? Use me.
6. clientY: Want to know how far from the top of the browser window the user clicked? Use me.
7. touches: Using a touch device? Then use me to find out how many fingers are touching the screen.

### Image from blur to clear by clicking

```
window.addEventListener("load", init);

function init(){
    document.querySelectorAll("img").forEach(function(image){
        image.addEventListener("click", useClearImage);    
    });
}
function useClearImage(eventObj){
    var clickedImageElement = eventObj.target;
    clickedImageElement.setAttribute("src", clickedImageElement.getAttribute("id") + ".png");
    setTimeout(blurImage, 3000, clickedImageElement);
}
function blurImage(imageElement){
    imageElement.setAttribute("src", imageElement.getAttribute("id") + "Blur.png");
}
```

In fact, since `addEventListener` is called by `image` element object, the event handler `useClearImage` is called `image` as well. `eventObj.target` and `this` refers to the same object.

```
function useClearImage(){
    var clickedImageElement = this;
    clickedImageElement.setAttribute("src", clickedImageElement.getAttribute("id") + ".png");
}
```

### `setTimeout` and `setInterval`

Note arg1 is optional, and is the argument for the callback function. Zero, one or more arguments are allowed.

```
setTimeout(callback, delay, arg1);
```

`setTimeout` will call event handler only once.

```
setTimeout(function(){
    console.log("setTimeout");
}, 1000);
```


`setInterval` will call event handler every intervel, over and over. And it will return an id to be used to `clearInterval(id)`.

```
setInterval(function(){
    console.log("setInterval");
}, 1000);
```

Technically we could write `window.setTimeout`/`window.setInterval`, but because the `window` object is considered the global object, we can omit the object name, and just use `setTimeout`/`setInterval`, which we’ll see a lot in practice.

No event object for `setTimeout`. The event object is mostly used with DOM-related event handlers. `setTimeout` doesn't pass any kind of event object to its handler, because it doesn’t occur on a specific element.

### Event type input and change

They both watch on the change of `<input>`, `<select>`, or `<textarea>`. The difference is, `change` reacts when the change is done(no focus anymore), and `input` reacts for every happening change.

```
<input type="number" min="1">
```

```
document.querySelector("input[type=number]").addEventListener("input", updatePlaySum);
```

```
document.querySelector("input[type=number]").addEventListener("change", updatePlaySum);
```

As you type in 9000:

`change`: 9000

`input`: 9 -> 90 -> 900 -> 9000


### `line-through`

```
.delete-effect {
    text-decoration: line-through;
}
```

### `width = 50%`/`height = 50%`

TL;DR: "When you specify the height or width as a percentage, that's a percentage with respect to the element's parent."

In the case of `width`, all block elements are, unless specified otherwise, as wide as their parent all the way back up to `<html>`; so, the `width` of a block element is **independent of its content** and saying `width: 50%` yields a well defined number of pixels.

However, the `height` of a block element **depends on its content** unless you specify a specific height. So saying `height: 50%` doesn't yield a well defined value unless you break the feedback loop by giving the parent element **a specific height**.


### use margin 0 to remove white stripe

```
body {
    margin: 0;
}
```

### Use `display: inline-block` and `height: 100%` to remove bottom white space between inner `span` and outer `div`

```
div#stripe {
    height: 20px;
}
#left, #right > span{
    display: inline-block;
    line-height: 20px;
}
```

### Material Design Button CSS

```
#stripe > button{
    height: 100%;/*Remove white space/stripe between inner button and outer div*/
    border: none;/*No border*/
    background: none;/*No background*/
    outline: none;/*no blue outline after click the button*/
    color: #4878AB;
    font-weight: bold;
    letter-spacing: .1rem;
    text-transform: uppercase;
    transition: all 0.3s;/*when hover, it takes 0.3 seconds to change color and background-color*/
}
#stripe > button:hover{
    background-color: #4878AB;
    color: white;
}
```

### Material Design Color Square

```
#palette{
    padding-top: 20px;
    width: 600px;
    margin: auto;/*centralize inner boxes*/
}
#palette > div {
    /*display: inline-block;*/
    width: 30%;/*30% of browser width*/
    float: left;/*make div an inline element, remove white space between boxes */
    padding: 15% 0;/*top 15% + bottom 15% = 30%*/
    margin: 1.5%;
    border-radius: 20%;
}
```


### padding with percentage

The size of the `padding` as a percentage, relative to the `width` of the containing block.

```
.square{
    width: 30%;
    padding: 15% 0;    
}
```

### Remove white space between box and make div an inline element

```
float: left
```

### 600px width if lg or md, width will be smaller if sm or xs

```
max-width: 600px;
```

### spacing between characters: `letter-spacing`

```
#left, #right > span{
    letter-spacing: .1rem;
}
```

### Use `style.backgroundColor` rather than `style.background`

`style.background` doesn't work in firefox, while `style.backgroundColor` works in all browsers.

### fix transition for all browsers

A website to fix transition automatically.

<a href="https://autoprefixer.github.io/">Autoprefixer</a>

```
.transition-effect {
    transition-duration: 0.5s;
    transition-property: background;
    -webkit-transition: background 0.5s;/* For Webkit browser(Chrome, Safari...)*/
    -moz-transition: background 0.5s;/*For Mozilla browser*/
    -o-transition: background 0.5s;/*For Opera browser*/
    -ms-transition: background 0.5s;/*For Microsoft browser*/
}
```

### `display`

`display` is CSS's most important property for controlling layout. Every element has a default `display` value depending on what type of element it is. The default for most elements is usually `block` or `inline`. A `block` element is often called a block-level element. An `inline` element is always just called an inline element.

`block`:

`div` is the standard block-level element. A block-level element starts on a new line and stretches out to the left and right as far as it can. Other common block-level elements are `p` and `form`, and new in HTML5 are `header`, `footer`, `section`, and more.

`inline`:

`span` is the standard inline element. An inline element can wrap some text inside a paragraph `<span> like this </span>` without disrupting the flow of that paragraph. The `a` element is the most common inline element, since you use them for links.

`none`:

Another common `display` value is `none`. Some specialized elements such as `script` use this as their default. It is commonly used with JavaScript to hide and show elements without really deleting and recreating them.

This is different from `visibility`. Setting `display` to `none` will render the page **as though the element does not exist**. `visibility: hidden;` will hide the element, but the element will **still take up the space it would if it was fully visible**.

other display values:

There are plenty of more exotic display values, such as `list-item` and `table`. Here is an exhaustive list. We'll discuss `inline-block` and `flex` later on.

extra credit:

As I mentioned, every element has a default `display` type. However, you can always **override** this! Though it wouldn't make sense to make an inline `div`, you can use this to customize the `display` of elements that have particular semantics. A common example is making inline `li` elements for horizontal menus.

### the box model

While we're talking about `width`, we should talk about `width`'s big caveat: the box model. When you set the `width` of an element, the element can actually appear bigger than what you set: the element's `border` and `padding` will stretch out the element beyond the specified `width`. Look at the following example, where two elements with the same width value end up different sizes in the result.

```
.simple {
  width: 500px;
  margin: 20px auto;
}
```

Final width: 500px

```
.fancy {
  width: 500px;
  margin: 20px auto;
  padding: 50px;
  border-width: 10px;
}
```

Final width: 500px + 50px + 10px =560px

For generations, the solution to this problem has been extra **math**. CSS authors have always just written a smaller width value than what they wanted, subtracting out the padding and border. Thankfully, you don't have to do that anymore...

#### `box-sizing`

The original box model behavior was eventually considered unintuitive, so a new CSS property called `box-sizing` was created. When you set `box-sizing: border-box;` on an element, the `padding` and `border` of that element **no longer increase its width**. Here is the same example as the previous page, but with `box-sizing: border-box;` on both elements:

```
.simple {
  width: 500px;
  margin: 20px auto;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

```
.fancy {
  width: 500px;
  margin: 20px auto;
  padding: 50px;
  border: solid blue 10px;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

Since this is so much better, some authors want all elements on all their pages to always work this way. Such authors put the following CSS on their pages:

```
* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

This ensures that all elements are always sized in this more intuitive way.

Since box-sizing is pretty new, you should use the `-webkit-` and `-moz-` prefixes for now, as I have in these examples. This technique enables experimental features in specific browsers. Also, keep in mind that this one is IE8+.

### absolute, relative, and root-relative links

#### 1. Absolute link

```
<a href='https://developer.mozilla.org/en-US/docs/Web/HTML'>Mozilla
```

#### 2. Relative link

```
<a href='misc/extras.html'>
```

```
<a href='../../elsewhere.html'>
```

#### 3. Root-relative link

That initial forward slash(`/`) represents the root of your site.

```
<a href='/images.html'>
```

### `target` in `a`

`_self`: Load the URL into the same browsing context as the current one. This is the default behavior.

`_blank:` Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.

```
<a href='https://developer.mozilla.org/en-US/docs/Web/HTML' target='_blank'>
```

