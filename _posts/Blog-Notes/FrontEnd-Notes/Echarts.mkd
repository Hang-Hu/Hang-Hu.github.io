## grid: bar chart position

Bistance between axis and chart border: `grid`

```
grid: {
    left: '30',
    right: '30',
    top: '30',
    bottom: '30',
    containLabel: true
}
```

## series.barMaxWidth: bar width (`barMaxWidth` and `barWidth`)

```
series: [
    {
        type: 'bar',
        barMaxWidth: '50'
    }
]
```

## series.itemStyle.normal.color: new echarts.graphic.LinearGradient, gradually changing color

```
series: [
    {
        type: 'bar',
        data: seriesData,
        itemStyle: {
            normal: {
                color: new echarts.graphic.LinearGradient(
                    0, 0, 0, 1,
                    [
                        {offset: 0, color: '#0096c0'},
                        {offset: 1, color: '#33bdea'}
                    ]
                )
            }
        }
    }
],
```

## title.textStyle: title style: `textStyle`

```
title: {
    text: 'Chart A',
    textStyle: {
        fontWeight: 'normal',
        color: 'black',
        fontSize: '20'
    }
}
```

## yAxis.axisLine.show.false: yAxis no axis line

```
yAxis: {
    axisLine: {
        : false
    }
}
```

## yAxis.interval: interval in y axis

```
yAxis: {
    interval: 10
}
```

## grid.height: echarts height

```
grid: {
    height: '300'
}
```

## number displayed in bar: `series.itemStyle.normal.label` or `series.label.normal`


```
series: [
    {
        type: 'bar',
        data: seriesData,
        itemStyle: {
            normal: {
                label: {
                    show: true, //show number
                    position: 'insideTop'// position of number
                }
            }
        }
    }
],
```

Or

```
series : [
    {
        label: {
            normal: {
                show: true,
                formatter: '{a}',
                position: 'inside'
            }
        }
    }
]
```

## customize value displayed in bar

```
label: {
    normal: {
        show: true,
        formatter: function(params){
            return `${(100 * params.data.value).toFixed(3)}%`;
        },
        position: 'inside'
    }
}
```

## series.center: pie chart position

`50%`(center) is the horizontal position, `58%` is the vertical position.

```
series:[
    {
        center: ['50%', '58%']
    }
]
```

## legend.formatter: dynamic text for upper different types

```
legend: {
    formatter: (params): string => {
        for (const entry of option.series[0].data) {
            if (entry.params === params) {
                return `${params}: ${entry.value}`;
            }
        }
    }
}
```

## tooltip.formatter: customize text in popup when hovering

```
const seriesData = [{
    value: -0.45,
    desp: [{
        name: 'Income',
        value: 223219
    },
    {
        name: 'Ratio',
        value: '10.45%'
    }]
}];
```

```
tooltip : {
    trigger: 'axis',
    axisPointer : {
        type : 'shadow'
    },
    formatter: function(params) {
        var arr = params[0].data.desp.map((item) => `${item.name}: ${item.value}`);
        return `${arr.join('<br>')}`;
    }
},
```

## series.color: color of each bar

```
series: [
    {
        type: 'bar'
        data: data
        color: function(params){
            return palette[params.dataIndex % palette.length];
        }
    }
]
```

## backgroundColor: background color of the chart

```
backgroundColor: grey
```

## tooltip.formatter: customized popup text

```
tooltip: {
    formatter: `{a} <br/>{b}: {c} ({d}%)<br />${addtionalText}`
}
```

## series.itemStyle.emphasis.label.textStyle: highlight label by bigger bold font when hovering

```
series: [{
    itemStyle{
        emphasis: {
            label: {
                textStyle: {
                    fontSize: 16,
                    fontWeight: 'bold'
                }
            }
        }    
    }
}]
```

## series.label, hide stretching line in normal, show it when hovering

```
series: [{
    label: {
        normal: {
            show: false
        },
        emphasis: {
            show: true,
            formatter: '{b}: {d}%'
        }
    }
}]
```

## adaptive

Echarts is not adaptive to div change, use Card in antd to surround it, and give echarts white background in the `div` containing echarts. Then even echarts doesn't adapt to div change, since the container Card is, it seems to be an adaptive app.

## Use lib `echarts-for-react` along with lib `echarts`

This library provides echarts based on react state.

```
<ReactEcharts
    option={this.getOption()}
    notMerge={true}
    lazyUpdate={true}
    theme={"theme_name"}
    onChartReady={this.onChartReadyCallback}
    showLoading={ this.state.isLoading }
    onEvents={
    {
        click: onEchartsClick
    }
    }
    opts={ {height: 300} }
/>
```

## legend circle icon

```
legend: {
    icon: 'circle',
}
```

## Pie chart format inside text

```
itemStyle: {
    normal: {
        label: {
            show: true,
            formatter: '{b}\n{c}'
        }
    }
},
label: {
    normal: {
        show: false,
        position: 'center'
    },
    emphasis: {
        show: true,
        textStyle: {
            fontSize: '30',
            fontWeight: 'bold'
        }
    }
},
```

## series.label.normal.formatter: pie chart customize stretching line

```
series: [
    {
        label: {
            normal: {
                formatter: '{b}: {d}%'
            }
        }
    }
]
```

## legend.align: legend text in the right of icon

```
legend: {
    align: 'left'
}
```

## xAxis.boundaryGap: Location of `xAxis` label text

Note that `xAxis.boundaryGap` only applies to type `category`.

Between the scales:

```
xAxis: {
    boundaryGap: true
}
```

Under the scale:

```
xAxis: {
    boundaryGap: false
}
```

## series.areaStyle: backgroundColor under line

```
series: [{
    type: 'line',
    areaStyle: {
        opacity: 0.1 // use opacity if you want the backgroundColor to be transparent
    }
}]
```

## series.smooth curly line

```
series: [{
    type: 'line',
    smooth: true,
}]
```

## legend

```
legend: {
    orient: 'horizontal', // 'vertical'
    x: 'center', // 'center' | 'left' | {number},
    y: 'top' // 'center' | 'bottom' | {number}
}
```

## yAxis scale 2 times of the highest value

```
yAxis: {
    boundaryGap: [0, '100%']
}
```

## xAxis.axisLabel.formatter: format xAxis label

```
xAxis: {
    axisLabel: {
        formatter: (val) => {
            return moment(val).format(formatter);
        }
    }
}
```

## dispose before update chart

```
this.chartInstance && this.chartInstance.dispose();
```

## `series.color`: cutomize color by data's value

```
const seriesData = [{
    value: 0.45,
    name: 'house'
}, {
    value: 0.55,
    name: 'food'
}];
```

```
series : [{
    type:'bar',
    color: function(params){
        if (params.data.value > 0) {
            return 'green';
        } else if(params.data.value < 0) {
            return 'red';
        }
    }
}]
```

## customize xAxis and yAxis color and width

```
xAxis: {
    axisLine:{
        lineStyle:{
            color: 'blue',
            width: 2,
        }
    } 
}
```

## hide yAxis label text

```
yAxis: {
    axisLabel: {
        show: false
    }
}
```

## hide yAxis tick

```
yAxis: {
    axisTick: {show: false},
}
```

## move xAixs to top

```
xAxis: {
    position: 'top'
}
```

## 0 in the middle of xAxis

Set min and max.

```
xAxis: {
    min: -1,
    max: 1
},
```

## customize xAxis label

```
xAxis: {
    axisLabel: {
        show: true,
        color: 'black',
        formatter: function(params) {
            return `${(100 * params).toFixed(2)}%`;
        }
    }
}
```

## `yAxis.axisLabel.textStyle.align`: center yAxis label text

```
yAxis: {
    axisLabel: {
        show: true,
        textStyle: {
            align: 'center',
            baseline: 'middle'
        }
    }
}
```

## yAxis label overlap with chart

Give some margin between yAxis label and yAxis

```
yAxis: {
    axisLabel: {
        margin: 35
    }
}
```




