---
layout: post
author: Hang Hu
categories: frontend
tags: Blog FrontEnd 
cover: 
---
### Login

```
heroku login
```


### Create app


```
heroku create
```


### rename app


In app directory,


```
heroku apps:rename news-monitor-app
```


### Test locally


Update the code.


```
npm install // if there is new dependency
heroku local
```


### Set environment variable in heroku


`TIMES` is the environment variable I want to set


```
heroku config:set TIMES=2
// Here I used "" because the value is too complex and heroku cannot accept, while in command line it's not necessary
heroku config:set MONGODB_URI="mongodb+srv://USER:PASSWORD@URL"
```



Or use `heroku config:edit` to see all config variables.


### Procfile


Procfile can be used to specify what command `heroku local` runs.


```
web: npm run production
```


Here I specified `web` as process type, and `heroku local` will only have one option, which is `heroku local web`.


### Deploy to heroku


```
git add .
git commit -m "COMMIT MESSAGE"
git push heroku master
heroku open or heroku open ROUTING_URL
```


Note that after pushing to heroku, it will run `npm install`  and `npm build` in root directory.


Check by `heroku ps`.


Scale to 1 instance:


```
heroku ps:scale web=1
```


Scale down to 0: `heroku ps:scale web=0`.



### Restart app


```
heroku restart
```


### View logs


```
heroku logs --tail
```



### Start a bash


```
heroku run bash
```


### Environment Variables


Set them in `.env` file.


### Set up postgresql


```
heroku addons:create heroku-postgresql:hobby-dev
npm install pg
```


Use `heroku pg:psql` to login to PostgreSQL cli.



### Set up MongoDB


Set up mongodb in mlab, whitelist all IPs, copy the uri.


Set `MONGODB_URI` in `heroku config` and `.env`.


```
const URI = process.env.MONGODB_URI || 'mongodb://localhost/'
```

### clone repo from heroku git

```
heroku git:clone -a NAME_OF_YOUR_APP
```

## Errors


### Something is already running on port 5000


#### Reason


`heroku local` runs `npm start` by default. But I used `npm start` to run server and client concurrently. Heroku forces server which originally uses 3001 to use 5000, and forces client which originally uses 3000 to use 5000. Since server occupies 5000, the start of client will fail.


### cannot find module 'http-errors' after deployment


#### Reason


As heroku only run `npm install` in root directory, the dependencies in `server/` are not installed.


#### Solution


In `package.json` of root directory, set `install` in `scripts`:


```
{
    "scripts": {
        "install": "cd server && npm install",
    }
}
```


