---
layout: post
author: Hang Hu
categories: frontend
tags: FrontEnd 
cover: 
---


## References

https://www.udemy.com/the-web-developer-bootcamp

Head First Javascript Programming

MDN

## Basics

HTML: nouns, content
CSS: adjectives, styling
Javascript: verbs, action

## HTML

In sublime, type html and click tab, then it finishes the html prototype for you.

`command + /`: comment the line

`<title></title>` has two functions:
1. Show in the tab

2. collected by google as title.

block element:
inline element:

`strong` means a little bit more than `bold`.
`em` emphasis means more than `i`.

`ol`: ordered list. We have to provide `li` list item inside it.

`ul`: unordered list.

```
ul {
  list-style-type: circle;
}

ol {
  list-style-type: lower-roman;
}
```

Of particular interest is `none`, which is commonly used when marking up **menu navigation** with a `<ul>` list. The `none` value allows the menu’s list items to be styled more like buttons.

![menu structure]({{ site.url }}/assets/posts_img/list-items-for-menus-70abb2.png)

`div`: block level container

`span`: inline container

### Attributes

Key value pair.

MDN attribute reference

`img`: self closing tag.

relative path

thead and tbody.

### `head`

#### UTF-8 for international characters

```
<meta charset='UTF-8'/>
```

## form, input and label

## input nested in input

```
<form action="http://www.wikipedia.org">
    <label>
        Username:
        <input name="username" type="text" placeholder="username">
    </label>
    <label>
        Password:
        <input name="password" type="password" placeholder="password">
    </label>
    <input type="submit">
</form>
```


## label and input connected by for and id


```
<form action="http://www.wikipedia.org">
    <label for="username">Username:</label>
    <input id="username" name="username" type="text" placeholder="username">
    <label>Password:</label>
    <input id="password" name="password" type="password" placeholder="password">
    <input type="submit">
</form>
```

`for` in `label` must match `id` in `input`.

### change input's style

```
<div className="App">
<input
  type='file'
  id='trainImage'
  accept='image/png, image/jpeg'
  style={{display: 'none'}}
/>
<label for='trainImage'>
  Upload
</label>
```

## Dropdown menu


```
<form action="test_submit" method="get" accept-charset="utf-8">
    <label for="dog">Dog</label>
    <input type="radio" id="dog" name="pet" value="dog">
    <label for="cat">Cat</label>
    <input type="radio" id="cat" name="pet" value="cat">
    <select name="color">
        <option value="red">Red</option>
        <option value="orange">Orange</option>
        <option value="yellow">Yellow</option>
    </select>
    <input type="text" name="text">
    <textarea name="textarea" rows="5" cols="10"></textarea>
    <button type="submit">Submit</button>
</form>
```


## css

### page-specific styles

```
<head>
  <meta charset='UTF-8'/>
  <title>Dummy</title>
  <link rel='stylesheet' href='styles.css'/>
  <style>
    body {
      color: #0000FF;    /* Blue */
    }
  </style>
</head>
```

### inline styles

```
<p>Want to try crossing out an <a href='nowhere.html' style='color: #990000; text-decoration: line-through;'>obsolete link</a>? This is your chance!</p>
```

### multiple stylesheets

```
<head>
  <link rel='stylesheet' href='styles.css'/>
  <link rel='stylesheet' href='product.css'/>
</head>
```


### inline


```
<h1 style="color: purple;">Register</h1>
```


### color rgba


a means alpha(transparency) ranging from 0.0 - 1.0


```
h1  {
    color: rgba(0, 0, 0, .5);
}
```


Note that `.5` is equal to `0.5`.


### Background picture


```
body    {
    background: url(http://i2.cdn.cnn.com/cnnnext/dam/assets/150306150823-beautiful-japan-mt-daisen-tottori-super-169.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}
```


## Border


border-color, border-width, border-style are required together, a border without color, width or style will show nothing.


```
h1  {
    border-color: black;
    border-width:5px;
    border-style: solid;
}
```


or


```
h1  {
    border: 5px solid purple;
}
```

### Rounded corner with `border-radius`

```
body > div:nth-of-type(3) > div > div{
    border-radius: 30px;
}
```

## CSS selectors


### element/type


```
li{
    
}
```


### class


```
.hello{
    
}
```


### id


```
# name {

    
}
```


### Other selectors


```

```


[https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048](https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048)

## `nth-of-type`

The `:nth-of-type()` CSS pseudo-class matches one or more elements of a given type, based on their position among **a group of siblings**.

```
<body>
    <div>
        <h2>The great</h2>
        <h1></h1>
        <h2>Guessing game</h2>
    </div>
    <div>
        <div>
            <h3>New colors</h3>
        </div>
        <div>
            <h3>easy</h3>
            <h3>hard</h3>   
        </div>
    </div>
</body>
```

```
div:nth-of-type(1){
    background-color:blue;
}
```

Two div Selected:

1st `div` inside `body`.

```
<div>
    <h2>The great</h2>
    <h1></h1>
    <h2>Guessing game</h2>
</div>
```

1st `div` inside 2nd `div` of `body`

```
<div>
    <h3>New colors</h3>
</div>
```

### more `nth-of-type()`

`nth-of-type(odd)`/`nth-of-type(2n+1)`: select odd ones

`nth-of-type(even)`/`nth-of-type(2n)`: select even ones

`span:nth-of-type(6n+2)` selects every 6th instance of a `span`, starting from (and including) the second instance.


### `last-of-type`

`div:last-of-type` selects the last `div` in every element.


### `:empty`

Selects elements that don't have any other elements inside of them.

`div:empty` selects all empty `div` elements.

Select the empty bentos: `bento:empty`

### Attribute Selector

Select all elements that have a specific attribute

`[attribute]`
Attributes appear inside the opening tag of an element, like this: `<span attribute="value">`. An attribute does not always have a value, it can be blank!

Examples

`a[href]` selects all a elements that have a `href="anything"` attribute.
`[type]` selects all elements that have a `type="anything"` attribute.

```
<div class="table">
    <bento>
        <apple class="small" />
    </bento>
    <apple for="Ethan" />
    <plate for="Alice">
        <pickle />
    </plate>
    <bento for="Clara">
        <orange />
    </bento>
    <pickle />
</div>
```

Select the items for someone: `[for]`

Select the `plates` for someone: `plate[for]`

Select Clara's meal: `[for="Clara"]`

### Attribute Starts With Selector

Select all elements with an attribute value that starts with specific characters

`[attribute^="value"]`

Examples

`.toy[category^="Swim"]` selects elements with class toy and category that starts with "Swim".

### Attribute Ends With Selector

Select all elements with an attribute value that ends with specific characters

`[attribute$="value"]`

Examples

`img[src$=".jpg"]` selects all images ending with `.jpg`.

### Attribute Wildcard Selector

Select all elements with an attribute value that **contains** specific characters anywhere

`[attribute*="value"]

`A useful selector if you can identify a common pattern in things like class, href or src attributes.

Examples

`img[src*="/thumbnails/"]` selects all image elements that show images from the "thumbnails" folder.

`[class*="heading"]` selects all elements with "heading" in their class, like class="main-heading" and class="sub-heading"

## margin auto center

```
margin: 0 auto 0 auto;
```

Or

```
margin: 0 auto;
```

Or

```
margin: auto;
```

## Center h1

```
h1 {
	text-align: center;
}

```

```
div#main {
  width: 600px;
  margin: 0 auto; 
}
```

Setting the `width` of a block-level element will prevent it from stretching out to the edges of its container to the left and right. Then, you can set the left and right margins to `auto` to horizontally center that element within its container. The element will take up the width you specify, then the remaining space will be split evenly between the two margins.

The only problem occurs when the browser window is narrower than the width of your element. The browser resolves this by creating a **horizontal scrollbar** on the page. Let's improve the situation...

```
div#main {
  max-width: 600px;
  margin: 0 auto; 
}
```


Using `max-width` instead of `width` in this situation will improve the browser's handling of small windows. This is important when making a site usable on mobile. Resize this page to check it out!

By the way, max-width is supported by all major browsers including IE7+ so you shouldn't be afraid of using it.

## use float to clear white space between images

```
body > img {
	width: 300px;
	float: left;
}
```

## Image Grids with div(better effect than table)

```
<body>
    <img src="http://c1.staticflickr.com/9/8450/8026519634_f33f3724ea_b.jpg">
    <img src="http://c2.staticflickr.com/8/7218/7209301894_c99d3a33c2_h.jpg">
    <img src="http://c2.staticflickr.com/8/7231/6947093326_df216540ff_b.jpg">

    <img src="http://c1.staticflickr.com/9/8788/17367410309_78abb9e5b6_b.jpg">
    <img src="http://c2.staticflickr.com/6/5814/20700286354_762c19bd3b_b.jpg">
    <img src="http://c2.staticflickr.com/6/5647/21137202535_404bf25729_b.jpg">

    <img src="http://c2.staticflickr.com/6/5588/14991687545_5c8e1a2e86_b.jpg">
    <img src="http://c2.staticflickr.com/4/3888/14878097108_5997041006_b.jpg">
    <img src="http://c2.staticflickr.com/8/7579/15482110477_0b0e9e5421_b.jpg">
</body>
```

```
body > img {
    width: 30%;
    /*use float to clear white space between images*/
    float: left;
    /*and then control your own margin*/
    margin: 1.66%;
}
```

## Center img in td

```
td {
	text-align: center;
}
```

## cut the underline

```
h1 {
	border-bottom: 2px solid gray;
	width: 30%;
}
```

## select element with class title

```
h1.title {
	background-color: yellow;
}
```

## Keep width 700px, while shrink less than 700px, make it 80%

```
body {
	border: solid 20px #bdc3c7;
	max-width: 700px;
	width: 80%;
	padding: 20px;
	/*since width is fixed, use an auto margin*/
	margin: 20px auto;
}
```

## em vs rem

`em`(pronounced like the letter m) is relative to the parent element.


```
body {
    font-size: 2em;
}
h1 {
    font-size: 2em;
}
```

Then body is 2 times the size, and h1 is 4 times.


`rem` is relative to the root one.


```
body {
    font-size: 2rem;
}
h1 {
    font-size: 2rem;
}
```

Both body and h1 is 2 times the size.

## Bootstrap

### Use form-group to group input and lable for optimum spacing

```
<div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
</div>
```

### form-control beauties input

```
<input type="email" class="form-control" id="exampleInputEmail2" placeholder="jane.doe@example.com">
```

## use container to quickly get margin spacing

```
<div class="container">
</div>
```


## bootstrap 3

```
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
```

## navbar-brand is the company name, directing to homepage

```
<nav class="navbar navbar-default">
    <div class="navbar-header">
        <a href="#" class="navbar-brand">Koke</a>
    </div>
</nav>
```

Or inside `<a></a>`, use img instead of text.

## navbar and dropdown in bootstrap depends on bootstrap Javascript, and bootstrap Javascript relies on jQuery

```
<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

```

## nav

```
<nav class="navbar navbar-default">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"><!--to make content in hamburger appear when clicking-->
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
            <a href="#" class="navbar-brand">Koke</a><!--Brand here-->
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"><!--put content you want to collapse here-->
            <ul class="nav navbar-nav"><!--left content -->
                <li class="active"><a href="#">Home</a></li>
                <li><a href="#">About</a></li>
                <li><a href="#">Contact</a></li>
            </ul>
            <ul class="nav navbar-nav navbar-right"><!--right content -->
                <li><a href="#">Sign Up</a></li>
                <li><a href="#">Login</a></li>
            </ul>
        </div>
        
    </div>
</nav>
```


## Add navbar-fixed-top to nav to have a fixed navbar

```
<nav class="navbar navbar-default navbar-fixed-top">
```

## Make home link active

```
<li class="active"><a href="#">Home</a></li>
```

## Grid For 4 Items, intelligent stacking

When display is large/medium width, 4(4*3=12) items in a row.
When display is small width,        2(2*6=12) items in a row.
When display is extra small width,  1 item in a row.

```
<div class="row">
    <div class="col-md-3 col-sm-6 pink">ABBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
</div>
```

Equals to

```
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">ABBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12 pink">VBBB</div>
</div>
```

Explain:

1. If medium is specified, large follows the specification
2. Lower cases which are not specified, use 1 item in a row(stack items)

## Nested row

Note that the `row`  inside `col-xx-x` is required, otherwise the column can't be fully divided.

```
<div class="row">
    <div class="col-md-3 col-sm-6 pink">
        <div class="row"><!--row is required-->
            <div class="col-lg-6 orange">First</div>
            <div class="col-lg-6 orange">Second</div>   
        </div>
    </div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
    <div class="col-md-3 col-sm-6 pink">VBBB</div>
</div>
```

## Google font

```
<link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet">
```

```
body {
    font-family: "Source Sans Pro";
    font-weight: 700;
}
```


## Thumbnail with grid

```
<div class="row">
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
</div>
```

## Grid 3->2->1 items/row based on device(images of varying sizes)

1. Use `row` for only one time
2. Use `flex` to avoid white space bug
3. `col-md-4` leads to 3/row, `col-sm-6` to 2/row

The reason of white space bug(images of varying sizes):
1. Images are all of the same width because of column restriction
2. Images are of different height because they are of different in the beginning, and no stretch performed
3. If you use multiples `row` for each row, then the `row` can organize images of different height
4. If you use one `row` for all images to make the switch of 3->2 /row, white space slots may appear in images

Solution of white space bug(images of varying sizes):
1. Use flex, and the images are still of different height

```
.flex {
    display: flex;
    flex-wrap: wrap;
}
```

2. Make images the same height(may lead to stretch)
```
.image {
  width: 100%;
  height: 250px;
  background-size: cover;
  background-position: center;
}
```


I prefer flex, because fixed height will lead to stretch(for `img`) or crop(for `background-image`).

```
.flex {
    display: flex;
    flex-wrap: wrap;
}
```


```
<div class="row flex">
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1514806052094-33fd2075458b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b26259946dcbb583b19161bd161f0a1d&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=94a1e718d89ca60a6337a6008341ca50&auto=format&fit=crop&w=1050&q=80" alt="">
        </div>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="thumbnail">
            <img src="https://images.unsplash.com/photo-1519985176271-adb1088fa94c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=a0c8d632e977f94e5d312d9893258f59&auto=format&fit=crop&w=1055&q=80" alt="">
        </div>
    </div>
</div>
```

## Font awesome

```
<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js" integrity="sha384-slN8GvtUJGnv6ca26v8EzVaR9DC58QEwsIk9q1QXdCU8Yu8ck/tL/5szYlBbqmS+" crossorigin="anonymous"></script>
```

```
<i class="fas fa-paw"></i>
```


## Make a landing page

```
<div id="landing">
    <h1>Perfect Match</h1>
    <div id="caption">
        <h4>The only human-feline dating app</h4>
    </div>
    <button class="btn btn-default btn-lg">
        <i class="fas fa-paw"></i>
        Get Started!
    </button>
</div>
```


```
#landing {
    padding: 18%;
    background-image: url(https://images.unsplash.com/photo-1522198684868-88edd8463fc9?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=19e6b72e6556179d4644fc3830a1ce85&auto=format&fit=crop&w=1050&q=80);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    height: 100%;
    text-transform: capitalize;
    color: white;
    text-align: center;
}
```


## Decorate hr

```
hr {
    width: 400px;
    border-top: solid 1px #f8f8f8;
    border-bottom: 1px solid rgba(0, 0, 0, 0.2)
}
```

## login icon

Note that `<i></i>` should be inside `<a></a>` to keep aligned with text "Login".

```
<a href="#">Login<i class="fas fa-user"></i></a>
```


## Use text-shadow

```
text-shadow: 0px 4px 3px rgba(0,0,0,0.4),
                 0px 8px 13px rgba(0,0,0,0.1),
                 0px 18px 23px rgba(0,0,0,0.1);
```


## Console Trick in google.com

```
var logo=document.querySelector("#hplogo");
setInterval(function(){logo.width+=5;}, 1000)
```

## Javascript

```Javascript
//Numbers
4
9.3
-10

//Strings
"Hello World"
"43"

//Booleans
true
false

//null and undefined
null
undefined

//Numbers
4
9.3
-10

//We can do some math

4 + 10     //14
1/5        //0.2

//Modulo - remainder operator

10 % 3   //1
24 % 2   //0
15 % 11  //4

//Single or Double quotes OK
"hello world"
'hello world'

//Concatenation
"charlie" + "brown"  //"charliebrown"

//Escape Characters start with "\"
"Singin \"Do wah diddy, diddy, dum diddy do\" "
"This is a backslash: \\"

//Strings have a length property
"hello world".length  //11

//Access individual characters using [] and an index
"hello"[0]  //"h"
"hello"[4]  //"o"

//1.
100 % 3 //=1

//2.
("blah" + "blah")[6] //="a"

//3.
"hello".length % "hi\\".length //=5%3=2

//Variables are simply containers that store values
//They follow this pattern:
var yourVariableName = yourValue;

//They can store all of the values we've seen
var name = "Rusty";
var secretNumber = 73;
var isAdorable = true;

//Recall the stored value by calling the variable name
var name = "Rusty";
"hello there " + name    //"hello there Rusty"

var num = 37;
num + 3 + 10    //50

//We can also update existing variables
var name = "Robert";
name = "Bob";

//The two other primitives are null and undefined

//Variables that are declared but not initialized are undefined
//The following variables are undefined:
var name;
var age;

//null is "explicitly nothing"
var currentPlayer = "charlie";
currentPlayer = null;   //game over

// console.log, alert, prompt, clear()

var name=prompt("What is your name?")

Comparison Operators
Operator    Name    Example ​Result
>   Greater than    x > 10  false
>=  Greater than or equal to    x >= 5  true
<   Less than   x < -50 false
<=  Less than or equal to   x <= 100    true
==  Equal to    x == "5"    true
!=  Not equal to    x != "b"    true
=== Equal value and type    x === "5"   false
!== Not equal value or equal type   x !== "5"   true

var x = 99;

x == "99"  //true

x === "99" //false


var y = null;

y == undefined //true

y === undefined //false
true == "1"          //true

0 == false           //true

null == undefined    //true

NaN == NaN           //false

Truthy and Falsy Values
Values that aren't actually true or false, are still inherently "truthy" or "falsey" when evaluated in a boolean context

!"Hello World" //false

!"" //true

!null //true

!0 //true

!-1 //false

!NaN //true

Falsy Values:
false
0
""
null
undefined
NaN 
Everything Else Is Truthy


```


NaN: not a number

```
typeof NaN//"number"
```

```
typeof undefined//"undefined"
```

```
typeof null//object
```

## string

```
"3" + "4" // "34" (string)

"3" - "4" // -1 (number)

"3" * "4" // 12 (number)

"3" / "4" // 0.75 (number)
```

To string:

```
1 + ''
```

To number:

```
+'1'
```

## If number is a perfect square

```
number%Math.sqrt(number)===0
```

## Functions

Functions let us wrap bits of code up into REUSABLE packages.  They are one of the building blocks of JS.


```
function doSomething() {
  console.log("HELLO WORLD");
}
```

## Global Variable

Unlike Java which dosn't have global variable, JS do have global variable.

```
var y=1;
var test = function(){console.log(y);}
test();
```

```
var phrase= function(){p="asasa"}
var p=1213;
phrase();
console.log(p); //"asasa"
```

## Use function variable as a parameter

```
var sing = function(){
    console.log("Twinkle twinkle...");
}

var useFuncAsPara = function(){
    return setInterval(sing, 1000);// no () after sing, because we don't call sing, we just send the sing code snippet to setInterval and this callback will call sing for us
}
var intervalId = useFuncAsPara();
// after a while
clearInterval(intervalId);
```

`setInterval` will return an id which can be used to stop the timer with `clearInterval(intervalId);`

## New line, but not submit in chrome console

Shift+Enter in chrome console

## Function

```
// Named function
function add(x, y) {
    return x + y;
}
// Anonymous function
let myAdd = function(x, y) { return x + y; };
```

## Anonymous function

```
setInterval(function(){
    console.log("a");
}, 2000);
```

## Array


```
// We can also add new data
var friends = ["Charlie", "Liz", "David", "Mattias"];
friends[4] = "Amelie";

//We can initialize an empty array two ways:
var friends = []; //no friends :(
var friends = new Array() //uncommon

//Arrays can hold any type of data
var random_collection = [49, true, "Hermione", null];

//Arrays have a length property
var nums = [45,37,89,24];
nums.length   //4

var numbers = [22, 67, 33, 96, 88];

//What does the following line print?
console.log(numbers[numbers.length]) // undefined

//Use push to add to the end of an array:
var colors = ["red", "orange", "yellow"];
colors.push("green");
//["red", "orange", "yellow", "green"]

//Use pop to remove the last item in an array
var colors = ["red", "orange", "yellow"];
colors.pop();
//["red", "orange"]

//pop() returns the removed element
var col = colors.pop();  //orange

var colors = ["red", "orange", "yellow"];
colors.unshift("infrared")
//["infrared", "red", "orange", "yellow"]

//Use unshift to add to the front of an array:
var colors = ["red", "orange", "yellow"];
colors.unshift("infrared")
//["infrared", "red", "orange", "yellow"]

//Use shift to remove the first item in an array
var colors = ["red", "orange", "yellow"];
colors.shift();
//["orange", "yellow"]

//shift() also returns the removed element
var col = colors.shift();  //orange

//Use indexOf() to find the index of an item in an array
var friends = ["Charlie", "Liz", "David", "Mattias", "Liz"];

//returns the first index at which a given element can be found
friends.indexOf("David"); //2
friends.indexOf("Liz"); //1, not 4

//returns -1 if the element is not present.
friends.indexOf("Hagrid"); //-1

//Use slice() to copy parts of an array
var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//use slice to copy the 2nd and 3d fruits
//specify index where the new array starts(1) and ends(3)
var citrus = fruits.slice(1, 3);

//this does not alter the original fruits array
//citrus contains ['Orange','Lemon']
//fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];

//you can also use slice() to copy an entire array
var nums = [1,2,3];
var otherNums = nums.slice();
//both arrays are [1,2,3]

//Use splice to remove
var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//use splice to remove 'Orange' from the array
//specify index of the element to be removed and 
//how many elements should be removed from that index
fruits.splice(1, 1);
// returns: ["Orange"]
console.log(fruits);
// prints: ["Banana", "Lemon", "Apple", "Mango"]
```


## Dynamic typing

Variables in JavaScript are declared without a type. In fact, we can assign a number to a variable, and then later assign a string to the same variable.

```
var myStuff;
myStuff = 1;
myStuff = "hi";
myStuff = null;
myStuff = [];
myStuff = {};
In some cases, this saves us keystrokes and allows for polymorphism (the variable can be whatever type is appropriate at the time), but also makes it very difficult to reason about types. It is not possible to infer what the type of variable is, just by inspecting the code.

JavaScript has weak typing, in that it freely coerces variables to whatever type seem appropriate. If we use the + operator with a string, the other object gets converted to a string first. The order of the operands does not matter.

console.log("1" + 2);
console.log(1 + "2");
If we use the *, / and - operators with a number, the other object gets converted to a number.

console.log("3" * 4);
console.log(3 * "4");
Here things get weird.

console.log([] + {});
console.log({} + []);
console.log({} + []);
console.log({} + {});
Whenever possible, minimize the use of automatic casting.

For instance, the block of code below works if duck is a string or an array.

var duck = "Donald Duck";
// var duck = ["Donald", "Duck"];

for (var i = 0; i < duck.length; i++) {
    console.log("Element #" + i + ": " + duck[i]);
}
```

## Loop

### for or while or do while

```
//with a for loop
var colors = ["red", "orange", "yellow", "green"];

for(var i = 0; i < colors.length; i++) {
  console.log(colors[i]);
}
```

### forEach

```
// JavaScript provides an easy built-in way of iterating over an array: ForEach

var colors = ["red", "orange","yellow", "green"];

colors.forEach(function(color){
//color is a placeholder, call it whatever you want
  console.log(color);
});
```

`.forEach` takes a callback function, that callback function is expected to have at least 1, but up to 3, arguments. This is how .forEach was designed.

The arguments are in a specific order:
- The first one represents each element in the array (per loop iteration) that .forEach was called on.
- The second represents the index of said element.
- The third represents the array that .forEach was called on (it will be the same for every iteration of the loop).

You have a couple options when calling .forEach on an array:

You can pass in an anonymous function:

```
[1,2,3].forEach(function(el, i, arr) {
  console.log(el, i, arr);
});
```

Or you can pass in a pre-written, named function.

```
function logNums(el, i, arr) {
  console.log(el, i, arr);
}

 
[1,2,3].forEach(logNums);
```

Notice how in the second example we don't invoke `logNums` when passing it into `.forEach`? We simply pass in the function name. We don't need to invoke the `logNums` function, `.forEach` does that for us. In fact, it invokes the function multiple times, once for every element inside of the array.

## Anonymous Function

Anonymous function not invoked.

```
(function(){
    console.log("I am a function!");
})
ƒ (){
    console.log("I am a function!");
}
```


Use `()` to invoke the anonymous function.

```
(function(){
    console.log("I am a function!");
})()
console.js:35 I am a function!
undefined
```


## Self Invoking function

### invoke anonymous function

```
(function(){
    console.log("I am a function!");
})()
```

### invoke normal function

```
(function test(){
    console.log("I am a function!");
})()
```


## Write forEach myself

### `forEach` official usage

```
arr=[21,242,"asad"];
arr.forEach(function(item){
    console.log(item);
});
```

### `myForEach`

```
function myForEach(arr, func){
    for(var i=0; i<arr.length; i++){
        func(arr[i]);
    }
}
myForEach(arr, console.log);
myForEach(arr, alert);
```

### Call `myForEach` with custom function

```
function funcTest(item){
    console.log(item);
}
myForEach(arr, funcTest);
```

### Call `myForEach` with anonymous function

Pass extra argument, which will be ignored

```
myForEach(arr, function(){
    console.log("Hi");
});
```

Normal usage

```
myForEach(arr, function(item){
    console.log("Hi, " + item);
});
```

The final version

```
Array.prototype.myForEach = function(func){
    for(var i=0; i<this.length; i++){
        func(this[i]);
    }
};
["sad", "burry", "Cheese"].myForEach(console.log);
```

## Object

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};
//Note: unlike arrays, objects have no order

```

### Retrieving Data

You have two choices: bracket and dot notation

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//bracket notation, similar to arrays:
console.log(person["name"]);
//dot notation:
console.log(person.name);
```

```
//you cannot use dot notation if the property starts with a number
someObject.1blah    //INVALID
someObject["1blah"] //VALID!

//you can lookup using a variable with bracket notation
var str = "name";
someObject.str   //doesn't look for "name"
someObject[str] //does evaluate str and looks for "name"

//you cannot use dot notation for property names with spaces
someObject.fav color      //INVALID
someObject["fav color"];  //VALID
```

### Updating Data

```
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//to update age
person["age"] += 1;
//to update city
person.city = "London";
```

### Creating Objects

```
//make an empty object and then add to it
var person = {}
person.name = "Travis";
person.age = 21;
person.city = "LA";

//all at once
var person = {
  name: "Travis", 
  age: 21,
  city: "LA"
};

//another way of initializing an Object
var person = new Object();
person.name = "Travis";
person.age = 21;
person.city = "LA";
```

Objects can hold all sorts of data, number, string, boolean, array, object.

```
var junkObject = {
  age: 57,
  color: "purple",
  isHungry: true,
  friends: ["Horatio", "Hamlet"],
  pet: {
   name: "Rusty", 
   species: "Dog", 
   age: 2
  }
};
```

### Object Quiz

```
var someObject = {};

//Which of the following are valid:

someObject._name = "Hedwig"; //valid

someObject.age = 6; //valid

var prop = "color"
someObject[prop] = "red"; //valid, equal to someObject.color="red";

someObject.123 = true;// not valid, you cannot use dot notation if the property starts with a number, use someObject["123"]=true instead
```

## Adds method to Object

1. Avoid namespace collissions

```
var person = {
    name: "Bob",
    age: 18,
    add: function(x, y){
        return x+y;
    }
}
person.add = 
person.add(10,2);
```

```
var dog = {
    name: "",
    speak: function(){
        console.log("Bark!");
    }
};
dog.speak();//Bark!
```

```
user.delete();
comment.delete();
post.delete();
```


## this

```
var comments = {};
comments.data = ["Good job!", "Bye", "Lame..."];
```

print function outside comments.

```
function print(arr){
    arr.forEach(function(item){
        console.log(item);
    });
}
print(comments.data);
```

print function belongs to Object comments.

```
comments.print = function print(){
    this.data.forEach(function(item){
        console.log(item);
    });
};
comments.print();
```


## delete property (state & method)

```
delete comments.print
delete comments.data
```

## DOM(Document Object Model) Manipulation Prep

As you begin working with the DOM you'll be writing some JavaScript code that selects HTML elements from the page and manipulates them. 

When doing this, be sure to include your JavaScript code at the bottom of the HTML document, right before the closing </body>  tag.

The HTML will need to have loaded before the JavaScript is run, otherwise the JavaScript will throw an error because the HTML that it is trying to select and manipulate doesn't exist (yet).

See example below:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test</title>
</head>
<body>
    <h1>Some HTML Code Here</h1>
 
    <script src="scriptfile.js"></script>
</body>
</html>
```

## Use `window.addEventListener("load", function)`/`window.onload`(not preferred) to ensure JS executed after page is loaded

`window` can be omitted because it's considered as the global object.

```
window.addEventListener("load", function(event){
    console.log("All resources finished loading!");
});
```

```
addEventListener("load", function(event){
    console.log("All resources finished loading!");
});
```

Don't omit `window` for `onload` because most people are worried `onload` is a common enough property name (other elements can have the `onload` property too) that not specifying which `onload` property might be confusing.

```
window.onload = init;

function init(){
    document.getElementById("green").innerHTML = "Changed by JS!!!";
}
```

## Print document object

```
console.dir(document)
```

Pay attention to `document.body.childNodes`


## innerHTML and outerHTML

```
document.body.innerHTML;
"
        <h1>Including JS Files</h1>
        <p id="green">GGGreen</p>
        <p id="red">RED Light</p>
    
"
document.body.outerHTML;
"<body>
        <h1>Including JS Files</h1>
        <p id="green">GGGreen</p>
        <p id="red">RED Light</p>
    
</body>"
```


## Use `body.style.backgroundColor` to change its background-color every second

```
var h1 = document.querySelector("h1");
h1.style.textAlign = "center";
```

```
window.addEventListener("load", init);
function init(){
    document.getElementById("green").innerHTML = "Changed by JS!!!";
    setInterval(changeColor, 1000);
}
function changeColor(){
    var colors = ["red", "blue", "yellow", "black", "white", "green", "pink", "orange", "gray"];
    var body = document.querySelector("body");
    var rand = Math.floor(Math.random() * colors.length);
    body.style.backgroundColor = colors[rand];
}
```

## `setAttribute`

```
var red = document.querySelector("p#red");
red.setAttribute("class", "redText");
```

## ~~getAttribute~~

```
var scoop = document.getElementById("raspberry");
var altText = scoop.getAttribute("alt");
```

## id/selector/attribute doesn’t exist

What happens when you call `getElementById`/`querySelector` and the id doesn’t exist in the DOM?
`null`

What happens when you call `getElementsBy*`/`querySelectorAll` and the id doesn’t exist in the DOM?
`[]`

What happens if my attribute doesn’t exist in the element?
`null`


## `createElement` and `appendChild` in DOM

```
var newEle = document.createElement("p");
newEle.innerHTML = "New Element, Hello!"
document.body.appendChild(newEle);
```

## `document`

```
document.URL; //the URL we are on
document.head; //head
document.body; //body
document.links;  //every single anchor tag in this page
```

```
document.getElementById() /*Takes a string argument and returns the one element with a matching ID*/
document.getElementsByClassName() /*Takes a string argument and returns a list of elements that have a matching class*/
document.getElementsByTagName() /*Returns a list of all elements of a given tag name, like <li> or <h1>*/
document.querySelector() /*Returns the first element that matches a given CSS-style selector, select the first one*/
document.querySelectorAll() /*Returns a list of elements that matches a given CSS-style selector*/
```

```
<body>
  <h1>Hello</h1>
  <h1>Goodbye</h1>
  <ul>
    <li id="highlight">List Item 1</li>
    <li class="bolded">List Item 2</li>
    <li class="bolded">List Item 3</li>
  </ul>
</body>
```

```
var tag = document.getElementById("highlight");
var tags = document.getElementsByClassName("bolded");
var tags = document.getElementsByTagName("li");
var tags = document.getElementsByTagName("h1");
var tag = document.querySelector("#highlight"); //select by ID
var tag = document.querySelector(".bolded"); //select by Class
var tag = document.querySelector("h1"); //select by tag
var tags = document.querySelectorAll("h1"); //select by tag
```

## DOM chang style property(with JS instead of CSS)

The style property is one way to manipulate an element's style

```
/SELECT
var tag = document.getElementById("highlight");

//MANIPULATE
tag.style.color = "blue";
tag.style.border = "10px solid red";
tag.style.fontSize = "70px";
tag.style.background = "yellow";
tag.style.marginTop = "200px";
```

It is recommended for styles to be defined in a separate file or files. The style property allows for quick styling, for example for testing purposes. - MDN.

### Define a CSS class and toggle it on/off with JS

Rather than directly manipulating style with JS, we can define a CSS class and then toggle it on or off with JS

```
//INSTEAD OF THIS:
var first = document.querySelector("#first");
first.style.color="red";
first.style.textAlign="center";
first.style.margin="30px";
first.style.fontSize="20px";
first.style.background="yellow";
```

```
/*DEFINE A CLASS IN CSS*/
.some-class {
    color: blue;
    border: 10px solid red;
}
```

```
var second = document.querySelector("p:nth-of-type(2)");
//ADD THE NEW CLASS TO THE SELECTED ELEMENT
second.classList.add("some-class");
```

### classList

A read-only list that contains the classes for a given element.  It is not an array, you can't use push/pop.


```
/*DEFINE A CLASS IN CSS*/
.another-class {
  color: purple;
  fontSize: 76px;
}
```

```
var tag = document.querySelector("h1");

//ADD A CLASS TO THE SELECTED ELEMENT
tag.classList.add("another-class");

//REMOVE A CLASS
tag.classList.remove("another-class");

//TOGGLE A CLASS
tag.classList.toggle("another-class");
```


### Test classList in JSFiddle

```
// open https://jsfiddle.net/d3mjv/3/

document.body.classList.toggle("fullyLoaded"); //remove
document.body.classList.toggle("fullyLoaded"); //add
document.body.className=""; //remove all class
if(document.body.className){
    alert("HH"); //won't alert, because className is "" 
}
if(document.body.classList){
    alert("HH"); // will alert, because typeof classList is object
}
```

### How can a read only property(element.classList) can be modified or assigned to some other value in javascript?

```
key.classList = [];

Or

key.classList = "";
```

classList is a method of a host object. It's not described in great detail in either specification referenced by MDN: WHATWG HTML Living Standard and W3C DOM. Generally, browsers try to be accommodating where technologies aren't clearly defined or have a solid de facto standard. So in this case, assigning an object to classList seems to set the className property to the default toString of that object. But do not rely on that. – RobG Stackoverflow 

When I try element.classList = "" in Safari (Version 9.1.1), I get an error: TypeError: Attempted to assign to readonly property.  – bryanbraun Stackoverflow

### `textContent`

Returns a string of all the text contained in a given element

```
document.body.textContent
"
  I am an h1!
  Hello
  Goodbye
  Hi Again
  Goodbye Again

"
document.body.textContent = "Hello"
```

### `innerHTML`

```
document.body.innerHTML
"
  <h1>I am an h1!</h1>
  <p id="first" class="">Hello</p>
  <p id="test" class="">Goodbye</p>
  <p>Hi Again</p>
  <p id="last">Goodbye Again</p>
"
document.body.innerHTML = "Hello"
```

### Assign tag to `textContent`/`innerHTML`

```
document.body.innerHTML = "<h1>Bye</h1>"
```

H1 format `Bye` is displayed, rendering the `h1` tag


```
document.body.innerText = "<h1>Bye</h1>"
```

`<h1>Bye</h1>` is displayed, not rendering the `h1` tag.


### Attributes

Use getAttribute() and setAttribute() to read and write attributes like src or href.

Note that `https://` is required here, to tell browser the `href` is an absolute path instead of a relative one, otherwise it will direct to `file:///path-to-html-directory/www.google.com`

#### 1. `href`

```
<a href="https://www.google.com">Link to Google</a>
```

```
document.querySelector("a").setAttribute("href", "https://www.bing.com");
```

#### 2. `src`

```
<img src="https://images.unsplash.com/photo-1493494817959-6981ce4b2603?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=5c34ed8790c4544d6e36cfa538f12194&auto=format&fit=crop&w=1050&q=80" width="200px">
```

```
document.querySelector("img").setAttribute("src", "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80");
```

### Change google logo with `setAttribute`

```
var logo = document.querySelector("#hplogo");
logo.setAttribute("srcset", "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80")
```

Or even with property `logo.srcset`.

```
logo.srcset = "https://images.unsplash.com/photo-1507525586584-6a9c816efbed?ixlib=rb-0.3.5&s=c50c00d21c29d73d00bcd90fc95bb794&auto=format&fit=crop&w=1050&q=80";
```

Style the logo:

```
logo.style.width = "200px";
logo.style.height = "100px";
logo.style.border = "solid 2px yellow";
```

Edit all links:

```
var links = document.querySelectorAll("a");
links.forEach(function(link){
    console.log(link.textContent);
    link.style.backgroundColor = "pink";
    link.style.border = "dashed 1px green";
    link.style.color = "blue";
    link.setAttribute("href", "https://www.bing.com");
});
```

### Event Listener

To add a listener, we use a method called addEventListener

The function is also called the event handler, or the callback.

```
element.addEventListener(type, function);
```

Effect: When mouse enters the image, it becomes larger, when leaves, it becomes smaller(original width is 200px).

```
var image = document.querySelector("img");
image.addEventListener("mouseover", function(){
    this.style.width = "300px";
});
image.addEventListener("mouseout", function(){
    this.style.width = "200px";
});
```

Use named function.

```
image.addEventListener("mouseover", bigImage);
function bigImage(){
    this.style.width = "300px";
}
```

We can add more than one event listener to one element.

### Event types

MDN lists over 300 different events!  Here are some of the more common ones:

`https://developer.mozilla.org/en-US/docs/Web/Events`

```
click
mouseover/mouseout
dblclick
keypress
drag
```

All `li` inside `ul` have following effect.

```
document.querySelector("ul").addEventListener("click", console.log)
```

### Chang `li` color when clicking

#### Basic solution

```
document.querySelectorAll("li").forEach(function(li){
    li.addEventListener("click", function(){
        li.style.color = "pink";
    });
});
```

#### Use `this` instead

```
document.querySelectorAll("li").forEach(function(li){
    li.addEventListener("click", function(){
        this.style.color = "pink";
    });
});
```

### Another way of event listener

The following has the same effect.

```
document.body.addEventListener("click", function(){
    alert("addEventListener");
});
```

```
document.body.onclick = function(){
    alert("onclick");
};
```

Notice that `addEventListener` is the mordern method, which is preferred.

### Event Object

Event will generate the corresponding event object, such as `MouseEvent`, which is passed to the event handler.

Event object is passed in even no parameter, but we use `eventObj/event/e` to catch it.

If the event handler has no parameter, it will follow the rule of "more arguments than parameters", which is ignoring them.

If the event handler has at least one parameter, you can use the event object.

```
document.body.addEventListener("click", function(eventObj){
    console.log(eventObj.target);
});
```

#### Some Properties of Event Object

1. target: I hold the object on which the event occurred. I can be different kinds of objects, but most often I’m an element object.
2. type: I’m a string, like “click” or “load”, that tells you what just happened.
3. timeStamp: Want to know when your event happened? I’m the property for you.
Want
4. keyCode: I’ll tell you what key the user just pressed.
5. clientX: Want to know how far from the left side of the browser window the user clicked? Use me.
6. clientY: Want to know how far from the top of the browser window the user clicked? Use me.
7. touches: Using a touch device? Then use me to find out how many fingers are touching the screen.

### Map Game

```
addEventListener("load", init);
function init(){
    var map = document.querySelector("img");
    map.addEventListener("mousemove", displayCoordinates);
}
function displayCoordinates(eventObj){
    document.querySelector("span").textContent = eventObj.clientX;
    document.querySelector("span:nth-of-type(2)").textContent = eventObj.clientY;
}
```

### Image from blur to clear by clicking

```
window.addEventListener("load", init);

function init(){
    document.querySelectorAll("img").forEach(function(image){
        image.addEventListener("click", useClearImage);    
    });
}
function useClearImage(eventObj){
    var clickedImageElement = eventObj.target;
    clickedImageElement.setAttribute("src", clickedImageElement.getAttribute("id") + ".png");
    setTimeout(blurImage, 3000, clickedImageElement);//clickedImageElement is argument of function blurImage
}
function blurImage(imageElement){
    imageElement.setAttribute("src", imageElement.getAttribute("id") + "Blur.png");
}
```

In fact, since `addEventListener` is called by `image` element object, the event handler `useClearImage` is called by `image` as well. `eventObj.target` and `this` refers to the same object.

```
function useClearImage(){
    var clickedImageElement = this;
    clickedImageElement.setAttribute("src", clickedImageElement.getAttribute("id") + ".png");
    setTimeout(blurImage, 3000, clickedImageElement);
}
```

### `setTimeout` and `setInterval`

Note arg1 is optional, and is the argument for the callback function. Zero, one or more arguments are allowed.

```
setTimeout(callback, delay, arg1);
```

`setTimeout` will call event handler only once.

```
setTimeout(function(){
    console.log("setTimeout");
}, 1000);
```


`setInterval` will call event handler every intervel, over and over. And it will return an id to be used to `clearInterval(id)`.

```
setInterval(function(){
    console.log("setInterval");
}, 1000);
```

Technically we could write `window.setTimeout`/`window.setInterval`, but because the `window` object is considered the global object, we can omit the object name, and just use `setTimeout`/`setInterval`, which we’ll see a lot in practice.

No event object for `setTimeout`. The event object is mostly used with DOM-related event handlers. `setTimeout` doesn't pass any kind of event object to its handler, because it doesn’t occur on a specific element.

### Event type input and change

They both watch on the change of `<input>`, `<select>`, or `<textarea>`. The difference is, `change` reacts when the change is done(no focus anymore), and `input` reacts for every happening change.

```
<input type="number" min="1">
```

```
document.querySelector("input[type=number]").addEventListener("input", updatePlaySum);
```

```
document.querySelector("input[type=number]").addEventListener("change", updatePlaySum);
```

As you type in 9000:

`change`: 9000

`input`: 9 -> 90 -> 900 -> 9000


### `line-through`

```
.delete-effect {
    text-decoration: line-through;
}
```

### `width = 50%`/`height = 50%`

TL;DR: "When you specify the height or width as a percentage, that's a percentage with respect to the element's parent."

In the case of `width`, all block elements are, unless specified otherwise, as wide as their parent all the way back up to `<html>`; so, the `width` of a block element is **independent of its content** and saying `width: 50%` yields a well defined number of pixels.

However, the `height` of a block element **depends on its content** unless you specify a specific height. So saying `height: 50%` doesn't yield a well defined value unless you break the feedback loop by giving the parent element **a specific height**.

### padding with percentage

The size of the `padding` as a percentage, relative to the `width` of the containing block.

```
.square{
    width: 30%;
    padding: 15% 0;    
}
```

### use margin 0 to remove white stripe

```
body {
    margin: 0;
}
```

### Use `display: inline-block` and `height: 100%` to remove bottom white space between inner `span` and outer `div`

```
div#stripe {
    height: 20px;
}
#left, #right > span{
    display: inline-block;
    line-height: 20px;
}
```

### Material Design Button CSS

```
#stripe > button{
    height: 100%;/*Remove white space/stripe between inner button and outer div*/
    border: none;/*No border*/
    background: none;/*No background*/
    outline: none;/*no blue outline after click the button*/
    color: #4878AB;
    font-weight: bold;
    letter-spacing: .1rem;
    text-transform: uppercase;
    transition: all 0.3s;/*when hover, it takes 0.3 seconds to change color and background-color*/
}
#stripe > button:hover{
    background-color: #4878AB;
    color: white;
}
```

### Material Design Color Square

```
#palette{
    padding-top: 20px;
    width: 600px;
    margin: auto;/*centralize inner boxes*/
}
#palette > div {
    /*display: inline-block;*/
    width: 30%;/*30% of browser width*/
    float: left;/*make div an inline element, remove white space between boxes */
    padding: 15% 0;/*top 15% + bottom 15% = 30%*/
    margin: 1.5%;
    border-radius: 20%;
}
```


### Remove white space between box and make div an inline element

```
float: left
```

### 600px width if lg or md, width will be smaller if sm or xs

```
max-width: 600px;
```

### spacing between characters: `letter-spacing`

```
#left, #right > span{
    letter-spacing: .1rem;
}
```

### Use `style.backgroundColor` rather than `style.background`

`style.background` doesn't work in firefox, while `style.backgroundColor` works in all browsers.

### fix transition for all browsers

A website to fix transition automatically.

<a href="https://autoprefixer.github.io/">Autoprefixer</a>

```
.transition-effect {
    transition-duration: 0.5s;
    transition-property: background;
    -webkit-transition: background 0.5s;/* For Webkit browser(Chrome, Safari...)*/
    -moz-transition: background 0.5s;/*For Mozilla browser*/
    -o-transition: background 0.5s;/*For Opera browser*/
    -ms-transition: background 0.5s;/*For Microsoft browser*/
}
```

### `display`

`display` is CSS's most important property for controlling layout. Every element has a default `display` value depending on what type of element it is. The default for most elements is usually `block` or `inline`. A `block` element is often called a block-level element. An `inline` element is always just called an inline element.

`block`:

`div` is the standard block-level element. A block-level element starts on a new line and stretches out to the left and right as far as it can. Other common block-level elements are `p` and `form`, and new in HTML5 are `header`, `footer`, `section`, and more.

`inline`:

`span` is the standard inline element. An inline element can wrap some text inside a paragraph `<span> like this </span>` without disrupting the flow of that paragraph. The `a` element is the most common inline element, since you use them for links.

`none`:

Another common `display` value is `none`. Some specialized elements such as `script` use this as their default. It is commonly used with JavaScript to hide and show elements without really deleting and recreating them.

This is different from `visibility`. Setting `display` to `none` will render the page **as though the element does not exist**. `visibility: hidden;` will hide the element, but the element will **still take up the space it would if it was fully visible**.

other display values:

There are plenty of more exotic display values, such as `list-item` and `table`. Here is an exhaustive list. We'll discuss `inline-block` and `flex` later on.

extra credit:

As I mentioned, every element has a default `display` type. However, you can always **override** this! Though it wouldn't make sense to make an inline `div`, you can use this to customize the `display` of elements that have particular semantics. A common example is making inline `li` elements for horizontal menus.

### the box model

While we're talking about `width`, we should talk about `width`'s big caveat: the box model. When you set the `width` of an element, the element can actually appear bigger than what you set: the element's `border` and `padding` will stretch out the element beyond the specified `width`. Look at the following example, where two elements with the same width value end up different sizes in the result.

```
.simple {
  width: 500px;
  margin: 20px auto;
}
```

Final width: 500px

```
.fancy {
  width: 500px;
  margin: 20px auto;
  padding: 50px;
  border-width: 10px;
}
```

Final width: 500px + 50px + 10px =560px

For generations, the solution to this problem has been extra **math**. CSS authors have always just written a smaller width value than what they wanted, subtracting out the padding and border. Thankfully, you don't have to do that anymore...

#### `box-sizing`

The original box model behavior was eventually considered unintuitive, so a new CSS property called `box-sizing` was created. When you set `box-sizing: border-box;` on an element, the `padding` and `border` of that element **no longer increase its width**. Here is the same example as the previous page, but with `box-sizing: border-box;` on both elements:

```
.simple {
  width: 500px;
  margin: 20px auto;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

```
.fancy {
  width: 500px;
  margin: 20px auto;
  padding: 50px;
  border: solid blue 10px;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

Since this is so much better, some authors want all elements on all their pages to always work this way. Such authors put the following CSS on their pages:

```
* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

This ensures that all elements are always sized in this more intuitive way.

Since box-sizing is pretty new, you should use the `-webkit-` and `-moz-` prefixes for now, as I have in these examples. This technique enables experimental features in specific browsers. Also, keep in mind that this one is IE8+.

### absolute, relative, and root-relative links

#### 1. Absolute link

```
<a href='https://developer.mozilla.org/en-US/docs/Web/HTML'>Mozilla
```

#### 2. Relative link

```
<a href='misc/extras.html'>
```

```
<a href='../../elsewhere.html'>
```

#### 3. Root-relative link

Not work in Github Page Jekyll Blog or small project with one html, one css and one js file.

That initial forward slash(`/`) represents the root of your site.

```
<a href='/images.html'>
```

### `target` in `a`

`_self`: Load the URL into the same browsing context as the current one. This is the default behavior.

`_blank:` Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.

```
<a href='https://developer.mozilla.org/en-US/docs/Web/HTML' target='_blank'>
```

### print object properties recursively

```
function prettyPrint(obj){
    traverseObj(obj).forEach(function(item){
        console.log(item);
    });
}
function traverseObj(obj){
    var strList = [];
    for(var prop in obj){
        if(typeof obj[prop] === "object"){
            strList.push(prop+ ": "+ traverseObj(obj[prop]));
        }else{
            strList.push(prop + ": " + obj[prop]);  
        }
    }
    return strList;
}
prettyPrint({name: "Rusty", species: "dog", breed: "mutt", friends: [{name: "Bob", age: 21, schools: ["NKU", "USTC"]}, {name: "Alice", age: 22}]});
```

### Most frequent char

```
String.prototype.mostFreqChar = function(){
    var map = {};// (character, frequency)
    for(var i=0; i<this.length; i++){
        if(map[this[i]] === undefined){
            map[this[i]] = 1;
        }else{
            map[this[i]]++;
        }
    }
    var max = {
        char: "",
        freq: 0
    };
    for(var prop in map){
        if(map[prop] > max.freq){
            max.freq = map[prop];
            max.char = prop;
        }
    }
    console.log(max.char);
    return max.char;    
}

"HELLO".mostFreqChar();
"abbbcc".mostFreqChar();
"www.dog.com".mostFreqChar();
```

### char count

```
charCount("hello");
charCount("AaBbC")


function charCount(str){
    var map = {};// (character, frequency)
    for(var i=0; i<str.length; i++){
        if(map[str[i].toLowerCase()] === undefined){
            map[str[i].toLowerCase()] = 1;
        }else{
            map[str[i].toLowerCase()]++;
        }
    }
    console.log("{");
    for(var prop in map){
        console.log("\"" + prop + "\": " + map[prop] + ",");
    }
    console.log("}");
}
```

### Closure

A closure is a function that **makes use of variables defined in outer functions**.


```
function outer(){
    var start = "I am";
    return function inner(){
        return start + " " + "Hang Hu.";
    }
}
```

`outer()` returns a function.

```
outer();
ƒ inner(){
        return start + " " + "Hang Hu.";
    }
```

You can execute the function return.

```
(outer())();
```

Or

```
outer()();
```

The inner function is making use of the variable "a" which was defined in an outer function called "outer" and by the time inner is called, that outer function has returned this function called "inner" is a closure!

```
function outer(a){
    return function inner(b){
        return a + b;
    }
}
outer(5)(5); // 10
var storeOuter = outer(5);
storeOuter(10); // 15
```

We do NOT have to give the inner function a name - we can make it anonymous (we just called it "inner" for learning purposes)

```
function outer(a){
    return function(b){
        return a + b;
    }
}
outer(5)(5); // 10
var storeOuter = outer(5);
storeOuter(10); // 15
```

Not a closure because the inner one doesn't make use of any variables in outerFn.

```
function outerFn(){
    var data = "something from outer";
    return function innerFn(){
        return "Just returned from the inner function";
    }
}
```

A closure only exists when an inner function that has returned **makes use of variables defined from an outer function**. If the inner function does not make use of any of the external variables, all we have is a **nested function**. 

### How closure works

Only **variables used in the inner function** are remembered.

In the example, when the debugger in on, you can type `data` and `fact` in dev tool console to find that only `fact` exists.

```
function outer(){
    var data = "1";
    var fact = "2";
    return function(){
        debugger
        return fact;
    }
}
```

### Use closure to create private variables

We can use closures to create private variables and write better code that isolates our logic and application

```
function counter(){
    var count = 0;
    return function(){
        count++;
        return count;
    }
}
var increaseAndGetCount1 = counter();
increaseAndGetCount1();//1
increaseAndGetCount1();//2
var increaseAndGetCount2 = counter();
increaseAndGetCount2();//1
count //Uncaught ReferenceError: count is not defined
```

```
function classRoom(){
    var instructors = ["Elice", "John"];
    return {
        getInstructors: function(){
            return instructors;
        },
        addInstructor: function(instructor){
            instructors.push(instructor);
            return instructors;
        }
    };
}
var firstRoom = classRoom();
firstRoom.getInstructors();// (2) ["Elice", "John"]
firstRoom.addInstructor("Mike");//(3) ["Elice", "John", "Mike"]
var secondRoom = classRoom();
secondRoom.getInstructors(); //(2) ["Elice", "John"]
```

However, you can directly get the instructor array and manipulate it, the variable is not actually private.

```
var ins = secondRoom.getInstructors();
ins; // (2) ["Elice", "John"]
ins.push("Mike");
ins; // (3) ["Elice", "John", "Mike"]
secondRoom.getInstructors(); // (3) ["Elice", "John", "Mike"]
```

#### Correct Implementation

```
function classRoom(){
    var instructors = ["Elice", "John"];
    return {
        getInstructors: function(){
            return instructors.slice();
        },
        addInstructor: function(instructor){
            instructors.push(instructor);
            return instructors.slice();
        }
    };
}
```

### Closure exercise 1: specialMultiply

Write a function called specialMultiply which accepts two parameters. If the function is passed both parameters, it should return the product of the two. If the function is only passed one parameter - it should return a function which can later be passed another parameter to return the product. You will have to use closure and arguments to solve this.

```
/* 
Examples: 
    specialMultiply(3,4); // 12
    specialMultiply(3)(4); // 12
    specialMultiply(3); // function(){}....
*/
```

```
function specialMultiply(a,b){
    if(b === undefined){// or use arguments.length === 1
        return function(b){
            return a * b;
        }    
    }else{
        return a * b;
    } 
}
```

### Closure exercise 2: guessingGame

Write a function called guessingGame which takes in one parameter amount. The function should return another function that takes in a parameter called guess. In the outer function, you should create a variable called answer which is the result of a random number between 0 and 10 as well as a variable called guesses which should be set to 0.

In the inner function, if the guess passed in is the same as the random number (defined in the outer function) - you should return the string "You got it!". If the guess is too high return "Your guess is too high!" and if it is too low, return "Your guess is too low!". You should stop the user from guessing if the amount of guesses they have made is greater than the initial amount passed to the outer function.

You will have to make use of closure to solve this problem.

```
/* 
Examples (yours might not be like this, since the answer is random every time):

    var game = guessingGame(5)
    game(1) // "You're too low!"
    game(8) // "You're too high!"
    game(5) // "You're too low!"
    game(7) // "You got it!"
    game(1) // "You are all done playing!"

    var game2 = guessingGame(3)
    game2(5) // "You're too low!"
    game2(3) // "You're too low!"
    game2(1) // "No more guesses the answer was 0"
    game2(1) // "You are all done playing!"
*/
```

```
var game1 = guessingGame(5);
console.log(game1(3));

function guessingGame(amount){
    var guesses = 0;
    var answer = Math.floor(Math.random() * 11);
    var guessedOut = false;
    return function(guess){
        console.log("guesses: " + guesses);
        if(guessedOut === true){
            return "You are all done playing!";
        }
        if(guesses >= amount){
            return "No more guesses the answer was " + answer;
        }
        guesses++;
        console.log("guess: " + guess + ", answer: " + answer);
        if(guess > answer){
            return "You're too high!";
        }else if(guess < answer){
            return "You're too low!";
        }else if(guess === answer){// ===
            guessedOut = true;
            return "You got it!";
        }
    }
}
```


### `this` keyword

So what is 'this'?

1. A reserved keyword in JavaScript

2. Usually determined by how a function is called (what we call 'execution context')

3. Can be determined using four rules (global, object/implicit, explicit, new)

#### `this` 1 - Global Context

When 'this' is not inside of a declared object, `this` refers to the global object, which in the browser is the `window`.

```
console.log(this) // Window
var person = "Elie"
window.person === person // true
```

The `undefined` shows data object doesn't exist until I create it, or winsow.data is undefined before declaration.

```
var data = {}; //undefined
```

Below is still `window` because `whatIsThis` is actually `window.whatIsThis`

```
function whatIsThis(){
    return this;
}
whatIsThis() //Window
```

```
function variableInThis(){
    this.person = "Elie"; // this === window, this.person === window.person
}
variableInThis();
console.log(person) //"Elie", because person === window.person
```

Declare global variable in function is very terrible.

The best practice to use global variables, is to **declare global variables in the top, even assigning values later**.

It's easy to declare global varibles in a function.

```
function func1(){
    this.camera = "Sony";
}
func1();
console.log(camera);// Sony
```

### `this` 2 - Strict Mode

Once strict mode enabled, `this` in function is `undefined` instead of `window`. And you cannot add a property on `undefined`.

To use strict mode in Chrome dev tool console, you have to write "use strict", `function whatIsThis` and call `whatIsThis` in one slot.

```
"use strict"
function whatIsThis(){
    console.log("this inside a function: " + this);
}
whatIsThis(); // this inside a function: undefined
```

```
"use strict"
function func(){
    this.person = "Hang";
}
func();// VM3946:4 Uncaught TypeError: Cannot set property 'person' of undefined
```

### Implicit/Object

When the keyword 'this' IS inside of a declared object.

```
var person = {
    firstName: "Dorn",
    sayHi: function(){
        return "Hi " + this.firstName;
    },
    determineContext: function(){
        return this === person;
    }
}
```

```
person.determineContext(); //true
person.sayHi(); //"Hi Dorn"
```

#### this not inside a function

A keyword `this` is defined when a function is run! There is not a function being run here to create a new value of the keyword `this` so the value of `this` is still the `window`!

```
var person ={
    firstName: "Colt",
    determineContext: this
}
```

```
person.determineContext; // window
```

#### Nest Object

```
var person = {
    firstName: "Colt",
    sayHi: function(){
        return "Hi " + this.firstName;
    },
    determineContext: function(){
        return this === person;
    },
    dog: {
        sayHello: function(){
            return "Hello " + this.firstName;
        },
        determineContext: function(){
            return this === person;
        }        
    }
}
```

```
person.dog.sayHello(); // "Hello undefined"
person.dog.determineContext(); // false
```

### `this` 3 - Explicit Binding

Choose what we want the context of 'this' to be using call, apply or bind

```
NAME OF METHOD  PARAMETERS                  INVOKE IMMEDIATELY?
Call            thisArg, a, b, c, d , ...   Yes
Apply           thisArg, [a,b,c,d, ...]     Yes
Bind            thisArg, a, b, c, d , ...   No
```

#### `call`

```
var person = {
    firstName: "Colt",
    sayHi: function(){
        return "Hi " + this.firstName;
    },
    determineContext: function(){
        return this === person;
    },
    dog: {
        sayHello: function(){
            return "Hello " + this.firstName;
        },
        determineContext: function(){
            return this === person;
        }        
    }
}
```

```
person.dog.sayHello.call(person); // "Hello Colt"
person.dog.determineContext.call(person); // true

// Using call to change this inside dog to person worked! 
// Notice that we do NOT invoke sayHello or determineContext
```

#### Use `call` to refactor code

```
var colt = {
    firstName: "Colt",
    sayHi: function(){
        return "Hi " + this.firstName; 
    }
}

var elie = {
    firstName: "Elie",
    // Look at all this duplication :(
    sayHi: function(){
        return "Hi " + this.firstName; 
    }
}

colt.sayHi(); // Hi Colt
elie.sayHi(); // Hi Elie (but we had to copy and paste the function from above...)
```

How can we refactor the duplication using call?

How can we "borrow" the sayHi function from colt and set the value of 'this' to be elie?

##### Solution

```
var colt = {
    firstName: "Colt",
    sayHi: function(){
        return "Hi " + this.firstName; 
    }
}
var elie = {
    firstName: "Elie"
}
colt.sayHi(); // Hi Colt
colt.sayHi.call(elie); // Hi Elie 
// much better! 
```

##### Extract sayHi function

```
function sayHi(){
    return "Hi " + this.firstName; 
}
var colt = {
    firstName: "Colt"
}
var elie = {
    firstName: "Elie"
}
```

```
sayHi.call(colt); // Hi Colt
sayHi.call(elie); // Hi Elie 
```

#### Use `[].slice` upon array like object with `call`

```
var divs = document.getElementsByTagName('divs');
divs.filter // undefined
```

Unfortunately, divs is not an array, it's an array like object so filter won't work.

So how can we convert an array-like-object into an array?

```
var divsArray = [].slice.call(divs);
// you might also see this as Array.prototype.slice.call(divs) 
// they do the same thing
divsArray.filter(function(val){
    return val.innerText === 'Hello';
});
```

What we are doing is trying to slice something that is not actually an array! In JavaScript, slice will not work on all data types, but it works very well on array-like-objects


#### `apply`

```
function addNumbers(a,b,c,d){
    return this.firstName + " just calculated " + (a+b+c+d);
}

var colt = {
    firstName: "Colt"
}

var elie = {
    firstName: "Elie"
}
```

```
addNumbers.call(elie,1,2,3,4) // Elie just calculated 10
addNumbers.apply(elie,[1,2,3,4]) // Elie just calculated 10
```

#### Use apply to use array in comma separated argument

When a function does not accept an array, apply will spread out values in an array for us!

```
var nums = [5,7,1,4,2];
Math.max(nums); // NaN 
```

```
Math.max.apply(this, nums); // 7
```

### `bind`

```
function addNumbers(a,b,c,d){
    return this.firstName + " just calculated " + (a+b+c+d);
}
var elie = {
    firstName: "Elie"
}
```

```
var elieCalc = addNumbers.bind(elie,1,2,3,4); // function(){}...
elieCalc(); // Elie just calculated 10
```

```
// With bind - we do not need to know all the arguments up front!
var elieCalc = addNumbers.bind(elie,1,2); // function(){}... 
elieCalc(3,4); // Elie just calculated 10  
```

#### Use bind to set right context for setTimeout

Here, `this` in `setTimeout` refers to `window`, because `setTimeout` is `window.setTimeout`.

```
var colt = {
    firstName: "Colt",
    sayHi: function(){
        setTimeout(function(){
            console.log("Hi " + this.firstName);
        },1000);
    }
}
colt.sayHi(); // Hi undefined
```

`.bind(this)` is belongs to the first argument of `window.setTimeout`, therefore `this` inside `.bind(this)` refers to object `colt`. 

After using `bind` to set the correct context of `this`, `this` inside `this.firstName` now refers to object `colt`, and it just returns a new setTimeout function whose `this` is object `colt`.

```
var colt = {
    firstName: "Colt",
    sayHi: function(){
        setTimeout(function(){
            console.log("Hi " + this.firstName);
        }.bind(this),1000);
    }
}
colt.sayHi(); // Hi Colt
```


### `arguments`

The arguments object is an Array-like object corresponding to the arguments passed to a function.

```
function func1() {
  console.log(arguments[0], arguments[1], arguments[2], arguments[3]);
}
func1(1, 2, 3);// 1 2 3 undefined
```


### Exercise of closure, call, apply, and bind

```
/*
Write a function called arrayFrom which converts an array-like-object into an array.

Examples:
    var divs = document.getElementsByTagName('divs');
    divs.reduce // undefined
    var converted = arrayFrom(divs);
    converted.reduce // function(){}....
*/

function arrayFrom(arrayLikeObject){
    return [].slice.call(arrayLikeObject);
}

/* 
// Write a function called sumEvenArguments which takes all of the arguments passed to a function and returns the sum of the even ones.

Examples:
    sumEvenArguments(1,2,3,4) // 6
    sumEvenArguments(1,2,6) // 8
    sumEvenArguments(1,2) // 2
*/

function sumEvenArguments(){
    var sum = 0;
    var argArray = Array.prototype.slice.call(arguments);
    argArray.forEach(function(arg){
        if(arg%2 === 0){
            sum += arg;
        }
    });
    return sum;
}

/* 
Write a function called invokeMax which accepts a function and a maximum amount. invokeMax should return a function that when called increments a counter. If the counter is greater than the maximum amount, the inner function should return "Maxed Out"

Examples:

    function add(a,b){
        return a+b
    }

    var addOnlyThreeTimes = invokeMax(add,3);
    addOnlyThreeTimes(1,2) // 3
    addOnlyThreeTimes(2,2) // 4
    addOnlyThreeTimes(1,2) // 3
    addOnlyThreeTimes(1,2) // "Maxed Out!"

*/

function invokeMax(fn, num){
    return function(){
        num--;
        if(num<0){
            return "Maxed Out!";
        }
        return fn.apply(this, [].slice.call(arguments));// here arguments also works well, which is return fn.apply(this, arguments);
    };
}

/* 
Write a function called once which accepts two parameters, a function and a value for the keyword 'this'. Once should return a new function that can only be invoked once, with the value of the keyword this in the function set to be the second parameter.

Examples:

    function add(a,b){
        return a+b
    }

    var addOnce = once(add, this);
    addOnce(2,2) // 4
    addOnce(2,2) // undefined
    addOnce(2,2) // undefined
    
    function doMath(a,b,c){
        return this.firstName + " adds " + (a+b+c)
    }
    
    var instructor = {firstName: "Elie"}
    var doMathOnce = once(doMath, instructor);
    doMathOnce(1,2,3) // "Elie adds 6"
    doMathOnce(1,2,3) // undefined
    

*/
function once(fn, thisArg){
    var invokeNum = 1;
    return function(){
        invokeNum--;
        if(invokeNum<0){
            return undefined;
        }
        return fn.apply(thisArg, [].slice.call(arguments));
    };
}


// BONUSES! 

/* 
Write a function called bind which accepts a function and a value for the keyword this. Bind should return a new function that when invoked, will invoke the function passed to bind with the correct value of the keyword this. HINT - if you pass more than two parameters to bind, those parameters should be included as parameters to the inner function when it is invoked. You will have to make use of closure!

Examples:

    function firstNameFavoriteColor(favoriteColor){
        return this.firstName + "'s favorite color is " + favoriteColor
    }
    
    var person = {
        firstName: 'Elie'
    }
    
    var bindFn = bind(firstNameFavoriteColor, person);
    bindFn('green') // "Elie's favorite color is green"
    
    var bindFn2 = bind(firstNameFavoriteColor, person, 'blue');
    bindFn2('green') // "Elie's favorite color is blue" 
    
    function addFourNumbers(a,b,c,d){
        return a+b+c+d;
    }

    bind(addFourNumbers,this,1)(2,3,4) // 10
    bind(addFourNumbers,this,1,2)(3,4) // 10
    bind(addFourNumbers,this,1,2,3)(4) // 10
    bind(addFourNumbers,this,1,2,3,4)() // 10
    bind(addFourNumbers,this)(1,2,3,4) // 10
    bind(addFourNumbers,this)(1,2,3,4,5,6,7,8,9,10) // 10

*/

function bind(fn, thisArg){
    var argArray = [];
    for(var i=2; i<arguments.length; i++){
        argArray.push(arguments[i]);
    }
    return function(){
        [].slice.call(arguments).forEach(function(arg){
            argArray.push(arg);
        });
        return fn.apply(thisArg, argArray);
    };
}

// better bind

function bind(fn, thisArg){
    var outerArgs = [].slice.call(arguments, 2);
    return function(){
        var innerArgs = [].slice.call(arguments);
        var allArgs = outerArgs.concat(innerArgs);
        return fn.apply(thisArg, allArgs);
    };
}

/* 
Write a function called flip which accepts a function and a value for the keyword this. Flip should return a new function that when invoked, will invoke the function passed to flip with the correct value of the keyword this and all of the arguments passed to the function REVERSED. HINT - if you pass more than two parameters to flip, those parameters should be included as parameters to the inner function when it is invoked. You will have to make use of closure! 

Flip should return a new function that when invoked takes the correct number of required arguments to that function which are then reversed. HINT - you will need to use the .length property on functions to figure out the correct amount of arguments. For example:

flip(subtractFourNumbers,this,11,12,13,14,15)(1,2,3,4,5,6,7,8,9,10) 




Examples:

    function personSubtract(a,b,c){
        return this.firstName + " subtracts " + (a-b-c);
    }
    
    var person = {
        firstName: 'Elie'
    }
    
    var flipFn = flip(personSubtract, person);
    flipFn(3,2,1) // "Elie subtracts -4"
    
    var flipFn2 = flip(personSubtract, person, 5,6);
    flipFn2(7,8). // "Elie subtracts -4"
    
    function subtractFourNumbers(a,b,c,d){
        return a-b-c-d;
    }

    flip(subtractFourNumbers,this,1)(2,3,4) // -2
    flip(subtractFourNumbers,this,1,2)(3,4) // -2
    flip(subtractFourNumbers,this,1,2,3)(4) // -2
    flip(subtractFourNumbers,this,1,2,3,4)() // -2
    flip(subtractFourNumbers,this)(1,2,3,4) // -2
    flip(subtractFourNumbers,this,1,2,3)(4,5,6,7) // -2
    flip(subtractFourNumbers,this)(1,2,3,4,5,6,7,8,9,10) // -2
    flip(subtractFourNumbers,this,11,12,13,14,15)(1,2,3,4,5,6,7,8,9,10) // -22

*/


function flip(fn, thisArg){
    var argArray = [];
    for(var i=2; i<arguments.length; i++){
        argArray.push(arguments[i]);
    }
    return function(){
        for(var i=0; i< arguments.length; i++){
            argArray.push(arguments[i]);
        }
        argArray = argArray.slice(0, fn.length);
        argArray.reverse();
        return fn.apply(thisArg, argArray);
    }
}
```

### `this` 4 - The `new` keyword

`new` can change the context of `this`. 

```
function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
    console.log(this);
}
var elie = new Person("Elie", "Schoppik"); //Person {firstName: "Elie", lastName: "Schoppik"}
Person("Elie", "Schoppik"); //window
elie.firstName; // "Elie"
elie.lastName; // "Schoppik"
```

### OOP in Javascript

But JavaScript does not have "classes" built into it - so what do we do?

We use functions and objects!

### Constructor Functions

```
function House(bedrooms, bathrooms, numSqft){
    this.bedrooms = bedrooms;
    this.bathrooms = bathrooms;
    this.numSqft = numSqft;
}
```

Important: capitalization of the function name is a convention.

```
var firstHouse = House(2,2,1000);
firstHouse // undefined
```

Why is it not working?

1. We are not returning anything from the function so our `House` function returns `undefined`
2. We are not explicitly binding the keyword `this` or placing it inside a declared object. This means the value of the keyword `this` will be the ***global object***, which is not what we want!

### `new` keyword

```
var firstHouse = new House(2,2,1000);
firstHouse.bedrooms; // 2
firstHouse.bathrooms; // 2
firstHouse.numSqft; // 1000
```

So what does the new keyword do?

1. It first creates an empty object
2. It then sets the keyword `this` to be that empty object
3. It adds the line `return this` to the end of the function, which follows it
4. It adds a property onto the empty object called `__proto__`, which links the `prototype` property on the constructor function to the empty object

```
Person.prototype === person1.__proto__
//true
```

```
function Dog(name, age){
    this.name = name;
    this.age = age;
    this.bark = function(){
        console.log(this.name + " just barked!");
    }
}
dog1.bark(); // Rusty just barked!
```
 
### Refactor Car and Motorcycle

```
function Car(make, model, year){
    this.make = make;
    this.model = model;
    this.year = year;
    this.numWheels = 4;
}
function Motorcycle(make, model, year){
    this.make = make;
    this.model = model;
    this.year = year;
    this.numWheels = 2;
}
```

Solution:

```
function Car(make, model, year){
    this.make = make;
    this.model = model;
    this.year = year;
    this.numWheels = 4;
}
```

```
function Motorcycle(make, model, year){
    Car.call(this, make, model, year)
    this.numWheels = 2;
}
//Or
function Motorcycle(make, model, year){
    Car.apply(this, [make,model,year]);
    this.numWheels = 2;
}
//Or
function Motorcycle(){ 
    Car.apply(this, arguments);
    this.numWheels = 2;
}
```

Here `call`/`apply` set `this` inside `Car` to `this` inside `Motorcycle`.
And `new` can set `this` to new created object. As for `return this` and `__proto__`, we don't need the functions here. The function of `new` can be replaced here by `call`/`apply`.

### Prototype

Circle for function, and square for object.

![prototype diagram]({{ site.url }}/assets/posts_img/prototype-diagram.png)

Every constructor function has a property on it called "prototype", which is an object
The prototype object has a property on it called "constructor", which points back to the constructor function
Anytime an object is created using the 'new' keyword, a property called `__proto__` gets created, linking the object and the prototype property of the constructor function

```
function Person(name){   
    this.name = name;
}
var elie = new Person("Elie")
elie.__proto__ === Person.prototype; // true
Person.prototype.constructor === Person; // true
```

### Prototype Chain

```
Person.prototype.isInstructor = true;
elie.isInstructor; // true
colt.isInstructor; // true
```

How does JavaScript find methods and properties?

First search in its object, then traverse prototype, until no `__proto__`.

```
arr -> Array prototype -> Object prototype -> null
```

Objects created by the same constructor have a ***shared*** `prototype`.

### assign function to prototype to be more efficient

```
function Person(name){
    this.name = name;
    this.sayHi = function(){
        return "Hi " + this.name; 
    }
}
elie = new Person("Elie");
elie.sayHi(); // Hi Elie
```

The code works, but it is inefficient.

Every time we make an object using the new keyword we have to redefine the sayHi function!

```
function Person(name){
    this.name = name;
}
Person.prototype.sayHi = function(){
    return "Hi " + this.name; 
}
elie = new Person("Elie");
elie.sayHi(); // Hi Elie
```

### Exercise - Prototype

```

// 1 - Implement your own version of Array.prototype.map. The function should accept a callback and return a new array with the result of the callback for each value in the array. 
Array.prototype.map = function(callback){
    var res = [];
    this.forEach(function(ele, i, arr){
        res.push(callback(ele, i, arr));
    });
    return res;
}

/* 2 - Implement a function called reverse that reverses a string and place it on the String.prototype

Examples:
    "test".reverse() // "tset"
    "tacocat".reverse() // "tacocat"
*/
String.prototype.reverse = function(){
    var res = "";
    for(var i=this.length-1; i>=0; i--){
        res+=this[i];
    }
    return res;
}
```

### Prototypal Inheritance

The passing of methods and properties from one class to another

```
function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

Person.prototype.sayHi = function(){
    return "Hello " + this.firstName + " " + this.lastName;
}
function Student(firstName, lastName){
    Person.apply(this, arguments);
}

Student.prototype.sayHi = function(){
    return "Hello " + this.firstName + " " + this.lastName;
}
var s1 = new Student()
```

We have to define `sayHi` in `Student.prototype` otherwise `s1.sayHi is not a function`.

#### What about use `Student.prototype = Person.prototype`?

```
Student.prototype.getStudentInfo = function(){
    console.log("Student info: ...");
}
var p1 = new Person();
p1.getStudentInfo(); // Student info: ...
```

Then we find `Person` can access `Student`'s function in prototype, however, what we want is `Student` to inheritant `Person`. `Person` shouldn't have properties from `Student` prototype.

We can't assign one object to another - it will just create a reference!

This means if we change the Student.prototype, it will affect the Person.prototype!

We still want all of the methods and properties from the Parent.prototype, but we want two totally separate objects - not a reference!

### `Object.create`

The `Object.create()` method creates a new object, using an existing object to provide the newly created object's `__proto__` .

```
Student.prototype = Object.create(Person.prototype);
Student.prototype.status;
/*ƒ (){
    console.log("status");
}*/
Person.prototype.status; //undefined
```

```
var s = new Student();
console.log(s);
```

```
Student {firstName: undefined, lastName: undefined}
firstName: undefined
lastName: undefined
__proto__: Person
    __proto__: Object
```

`Person` now won't be influenced by `Student`'s new function, `Student` can have access to `Person`'s new function.

```
Person.prototype.funcPer = function(){
    console.log("funcPer");
}
Student.prototype.funcStu = function(){
    console.log("funcStu");
}

Person.prototype;
/*
{sayHi: ƒ, funcPer: ƒ, constructor: ƒ}
funcPer: ƒ ()
sayHi: ƒ ()
constructor: ƒ Person(firstName, lastName)
__proto__: Object
*/

Student.prototype;
/*
Person {constructor: ƒ, funcStu: ƒ}
constructor: ƒ Student(firstName, lastName)
funcStu: ƒ ()
__proto__: 
    funcPer: ƒ ()
    sayHi: ƒ ()
    constructor: ƒ Person(firstName, lastName)
    __proto__: Object
*/
```

### Why not `new`

```
function Student(firstName, lastName){
    Person.apply(this, arguments);
}
Student.prototype = new Person;
```

This will do almost the same thing, but add additional unnecessary properties on the prototype object (since it is creating an object with undefined properties just for the prototype).

```
var s = new Student();
console.log(s);
```

```
Student {firstName: undefined, lastName: undefined}
firstName: undefined
lastName: undefined
__proto__: Person
    firstName: undefined // redundant property
    lastName: undefined // redundant property
    __proto__: Object
```

### Reset the constructor

```
//previously Person because of Object.create, has to be set back to Student
Student.prototype.constructor = Student;
```

### Two parts of inheritance

Set the prototype to be an object created with another prototype

Reset the constructor property

```
function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}
Person.prototype.sayHi = function(){
    return "Hello " + this.firstName + " " + this.lastName;
}
function Student(firstName, lastName){
    Person.apply(this, arguments);
}
Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;
```

### Recap OOP
Every time the new keyword is used, a link between the object created and the prototype property of the constructor is established - this link can be accessed using `__proto__`

The prototype object contains a property called constructor, which points back to the constructor function

To share properties and methods for objects created by a constructor function, place them in the prototype as it is the most efficient

To pass methods and properties from one prototype object to another, we can use inheritance which involves setting the prototype property to be a newly created object using Object.create and reseting the constructor property

### jQuery

Why Use jQuery?
- Fixes "broken" DOM API
- Brevity and Clarity
- Ease of use
- Cross-Browser Support
- AJAX
- Lot's of people use jQuery!

Why Not Use jQuery?
- The DOM API is no longer "broken"
- It doesn't do anything you can't do on your own
- It's an unnecessary dependency
- Performance
- Lot's of people are moving away from jQuery!

#### Adding jQuery

Download jQuery and link to it locally:

```
<script type="text/javascript" src="jquery.js"></script>
```

OR

Link to a CDN(a hosted copy)

```
<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
```

#### Select `$("selector")`

```
//to select all img tags
$("img")  

//to select all elements with class 'sale'
$(".sale") 

//to select element with id "bonus"
$("#bonus") 

//to select all a tags inside of li's
$("li a")  
```

#### `.css(property, value)`

```
$("li").css("color", "yellow");
$(".big").css("border", "1px dashed orange");
```

#### Create style object

```
var style1 = {
    fontSize: "22px",
    border: "solid 1px black"
}
$("p a").css(style1)
```

Or code object inside `.css()`.

```
$("p").css({
    fontSize: "22px",
    border: "solid 1px black"
});
```

#### Style all `p`s

```
$("p").css(style1)
$("p").css("color", "yellow")
```

#### `.text()` works like `textContent`

```
$("h1").text();//"jQuery Demo"
$("h1").text("XXXXX");//h1 changed to "XXXXX"
$("div").text("Div !!");//loop through div to make the textContent "Div !!"
```

#### `.html()` works like innerHTML

```
$("ul").html();
/*
"
            <li>Dog</li>
            <li>Cat</li>
        "
*/
$("li").html("<strong>Hack<strong>");//loop through li to make the innerHTML "<strong>Hack<strong>"
```

#### `.attr()` works like get `getAttribute` and `setAttribute`

```
$("img").attr("src");
"https://images.unsplash.com/photo-1526364060191-dde130491ec8?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=11ddea0835059bc5276769a80c40fbcf&auto=format&fit=crop&w=1048&q=80"

$("img").attr({
    width: "300px",
    src: "https://images.unsplash.com/photo-1526364060191-dde130491ec8?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=11ddea0835059bc5276769a80c40fbcf&auto=format&fit=crop&w=1048&q=80"
});
```

#### `.val()` works like `value`

```
<select name="country" id="">
    <option value="German">German</option>
    <option value="France">France</option>
    <option value="Canada">Canada</option>
</select>
$("select").val();//"France"
$("select").val("German");//set selected value to "German"
$("select").val("US");//set selected value to null, because no "US" in option
```

#### `.addClass()` works like `.classList.add()`, `.removeClass()` works like `.classList.remove()`, `.toggleClass()` works like `.classList.toggle()`


```
$("li").addClass("done")
$("li").removeClass("done")
```

### jQuery Event

#### `.click(function)` works like `.addEventListener("click", function)`

```
document.querySelector("h1").addEventListener("click", function(){
    alert("click h1");
});
```

```
$("h1").click(function(){
    alert("click h1");
});
```

```
$("h1").click(function(){
    $(this).css("background-color", "red");
});
```

`$(this)` is the jQuery wrapper of `this`.

#### `.keypress(function)` equals `.addEventListener("keypress", function)`

```
window.addEventListener("keypress", function(eventObj){
    console.log(eventObj.key)
});
```

```
$("input").keypress(function(eventObj){
    console.log(eventObj.key);
});
```

Use `keyCode` to recognize key stroke `Enter`.

```
$("input").keydown(function(eventObj){
    if(eventObj.keyCode === 13){
        alert("enter!");
    }
});
```

#### Official solution for support of key, keyCode

```
window.addEventListener("keydown", function (event) {
  if (event.defaultPrevented) {
    return; // Should do nothing if the default action has been cancelled
  }

  var handled = false;
  if (event.key !== undefined) {
    // Handle the event with KeyboardEvent.key and set handled true.
  } else if (event.keyIdentifier !== undefined) {
    // Handle the event with KeyboardEvent.keyIdentifier and set handled true.
  } else if (event.keyCode !== undefined) {
    // Handle the event with KeyboardEvent.keyCode and set handled true.
  }

  if (handled) {
    // Suppress "double action" if event handled
    event.preventDefault();
  }
}, true);
```

### `.on()` works like `.addEventListener()`

- `.addEventListener()` only adds listeners for existing elements
- `.on()` will add listeners for all potential future elements

```
document.querySelector("h1").addEventListener("click", function(){
    this.style.color = "red";
})
```

```
$("h1").on("click", function(){
    $(this).css("color", "red");
});
```



#### hover bold effect with `mouseenter` and `mouseleave`

```
$("button").on("mouseenter", function(){
    $(this).css("font-weight", "bold");
});
$("button").on("mouseleave", function(){
    $(this).css("font-weight", "normal");
});
```

#### Difference between `click(function)` and `on('click', function)`

- click() only adds listeners for existing elements
- on() will add listeners for all potential future elements


### `fadeOut()`

The `.fadeOut()` method reduces the `opacity` of the matched elements. Once the opacity reaches 0, the `display` style property is set to `none`.


```
$("#fadeOutDivs").on("click", function(){
    $("div").fadeOut();
});
```

`.fadeOut()` is an asynchronous function.

```
$("#fadeout").on("click", function(){
    $("div").fadeOut(1000);//4s
    console.log("Fade out completed.");// this one happens before fadeOut finished, because JS won't wait for fadeOut function to complete
});
```

To ensure console.log is executed after fadeOut is done, but here we get 4 "Fade out completed." because there are 4 `div`s.

```
$("#fadeout").on("click", function(){
    $("div").fadeOut(1000, function(){
        console.log("Fade out completed.");
    });//4s
});
```

Remove all the `div`s after fadeOut

```
$("#fadeout").on("click", function(){
    $("div").fadeOut(1000, function(){
        $(this).remove();
    });
});
```

### `fadeIn()`

```
div {
    display: none;
}
```

```
$("button#fadeIn").on("click", function(){
    $("div").fadeIn(1000);
});
```

### `fadeToggle()`

Display or hide the matched elements by animating their opacity depending on their current status.

```
$("button#fadeout").on("click", function(){
    $("div").fadeToggle();
});
```

### `slideDown()`, `slideUp()`, `slideToggle()`

#### `.slideDown()`

***Display*** the matched elements with a sliding motion.(`display: none`)

```
$("button#slide").on("click", function(){
    $("div").slideDown();
});
```

#### `.slideUp()`

***Hide*** the matched elements with a sliding motion.(`display: block`))

```
$("button#slide").on("click", function(){
    $("div").slideUp();
});
```

#### `.slideToggle()`

slide also has `callback`.

```
$("button#slide").on("click", function(){
    $("div").slideToggle(1000, function(){
        console.log("slide is done.");//printed 4 times
    });
});
```

### Center element vertically and horizontally with flexbox

```
.box{
    display: flex;
    justify-content: center;/*horizontally*/
    align-items: center;/*vertically*/
}
```

### Convert string to number

```
Number("123");//123
Number("12.4");//12.4
```

### there is no way to stop/break forEach() other than throwing an exception

Even `return` won't return and terminate, `forEach` always returns `undefined`.

There is no way to stop or break a `forEach()` loop other than by throwing an exception. If you need such behavior, the `forEach()` method is the wrong tool.

Early termination may be accomplished with:

A simple loop
A for...of loop
`Array.prototype.every()`
`Array.prototype.some()`
`Array.prototype.find()`
`Array.prototype.findIndex()`

The other Array methods: `every()`, `some()`, `find()`, and `findIndex()` test the array elements with a predicate returning a truthy value to determine if further iteration is required.

### Remove bullet in `li`

```
li {
    list-style-type: none;    
}
```

### `li` menu with `span` delete icon and `span` text all stretched to the max and centered using `display`

```
li {
    display: flex;/*make sure icon and text are in one line*/
    list-style-type: none;
    height: 40px;
}
li span:nth-of-type(1) {/*delete icon*/
    display: flex;/*together with align-items and justify-content for centering*/
    align-items: center;/*vertical*/
    justify-content: center;/*horizontal*/
    width: 20px;
}
li span:nth-of-type(2) {/*text*/
    display: flex;/*together with align-items for centering*/
    align-items: center;/*vertical*/
    width: 100%;
    padding-left: 20px;
}
```


### position element `i` right while text remains left

```
div#header > i {
    float: right;
}
```

### transition not work in display

`display:none;` removes a block from the page as if it were never there. A block cannot be partially displayed; it’s either there or it’s not. The same is true for `visibility`; you can’t expect a block to be half  hidden which, by definition, would be visible! Fortunately, you can use `opacity` for fading effects instead.

### Use `opacity` and `transition` instead of `display:none;`

```
plusIcon.addEventListener("click", function(){
    if(todoInput.style.opacity && Number(todoInput.style.opacity) === 0){
        todoInput.style.height = null;
        todoInput.style.padding = null;
        todoInput.style.opacity = null;
    }else{
        todoInput.style.opacity = 0;
        todoInput.style.height = 0;
        todoInput.style.padding = 0;
    }
});
```

```
input#todoInput {
    transition: all 0.3s;
}
```

### delete style set by `element.style`

```
element.removeAttribute("style");
```

Or

Use `null` for number:

```
element.style.height = null;
```

Use `""` for string:

```
element.style.backgroundColor = "";
```

### DOM - Event Bubbling

First alert li, then ul, then div, finally body.

```
document.querySelector("li").addEventListener("click", function(){
    alert("li");
});
document.querySelector("ul").addEventListener("click", function(){
    alert("ul");
});
document.querySelector("div").addEventListener("click", function(){
    alert("div");
});
document.querySelector("body").addEventListener("click", function(){
    alert("body");
});
```

#### Use `eventObj.stopPropagation()` to stop event bubbling

Now only alert li.

```
document.querySelector("li").addEventListener("click", function(eventObj){
    alert("li");
    eventObj.stopPropagation();
});
document.querySelector("ul").addEventListener("click", function(){
    alert("ul");
});
document.querySelector("div").addEventListener("click", function(){
    alert("div");
});
document.querySelector("body").addEventListener("click", function(){
    alert("body");
});
```

### Make use of event bubbling and `eventObj.target`

`eventObj.target` is the ***first*** element interacted with.

`mouseover`: A pointing device is moved ***onto the element*** that has the listener attached or ***onto one of its children***. If `ul` is the element, then when a pointing device is moved onto `ul`/`li`, the event is triggered, and the `eventObj.target` is corresponding `li`.

`mouseenter`: A pointing device is moved ***onto the element*** that has the listener attached. If `ul` is the element, then only when a pointing device is moved onto `ul`, the event is triggered, and the `eventObj.target` is this `ul`.


#### element type

```
document.querySelector("li").nodeName; // "LI"
```

#### Problem encountered in Todo List

Note that a pointing device ***can jump***, not always being continuous.

1. 1st floor i to 2nd floor right span(mouseover), since 1st floor left span != 2nd floor right span, trigger left span to extend.
2. right span(mouseout) to left i, since right span != left span(the parent of left i), trigger left span to shrink.
3. left i to right span(mouseover), since left span(the parent of left i) != right span, trigger left span to extend.
4. go back to 2.

### eventObj.fromElement, eventObj.toElement

`fromElement` at first can be `null`.

### jQuery `.on()` that listens for all potential element

`$("li").on("click", function)` won't work on potential element, you have to listen on `ul`.

Listen to `click` event on `ul`'s `span`.

```
$("ul").on("click", "span", function(){
    $(this).parent().fadeOut(500, function(){
        $(this).remove();    
    });  
});
```

### check if element is inside another

```
function isDescendant(parent, child){
    if(child === null){
        return false;
    }
    if(child === parent){
        return true;
    }
    return isDescendant(parent, child.parentElement);
}
```

### return li which contains child, endNode contains li

Since endNode contains li, when child === endNode, it's time to end the regression and return null(no li found).

```
function liParent(child, endNode){//endNode is exclusive
    if(child === null){
        return null;
    }
    if(child === endNode){
        return null;
    }
    if(child.nodeName === "LI"){
        return child;
    }
    return liParent(child.parentElement);
}
```


### Make use of event bubbling

Listen on `ul` instead of `li` so that you only bind once for all existing and potential `li`.

Adv: bind once.

Dis: more difficult logic.

```
// listen to event on ul's li
ulDisplay.addEventListener("mouseover", function(eventObj){
    // if fromElement and toElement belongs to the same li, return
    // otherwise, execute
    var fromParent = liParent(eventObj.fromElement, this);
    var toParent = liParent(eventObj.toElement, this);
    /*
        null -> null,   not execute 
        null -> sth,    execute
        sth -> null,    execute
        sth -> sth,     the same li parent, not exeute; otherwise execute
    */
    if(fromParent === toParent){
        return;
    }
    var span = liParent(eventObj.target, this).querySelector("span:nth-of-type(1)");
    span.style.backgroundColor = "red";
    span.style.width = "40px";
});
// listen to event on ul's li
ulDisplay.addEventListener("mouseout", function(eventObj){
    var fromParent = liParent(eventObj.fromElement, this);
    var toParent = liParent(eventObj.toElement, this);
    if(fromParent === toParent){
        return;
    }
    var span = liParent(eventObj.target, this).querySelector("span:nth-of-type(1)");
    span.style.backgroundColor = "";
    span.style.width = "";
});
ulDisplay.addEventListener("click", function(eventObj){
    var target = eventObj.target;
    var liParentEle = liParent(target, this);
    if(target.classList.contains('taskName')){//text
        var task = activeTaskManager.taskList[activeTaskManager.findIndex(liParentEle.id)];
        task.completed = !task.completed;
        target.classList.toggle("completed");
    }
    if(isDescendant(liParentEle.querySelector("span:nth-of-type(1)"), target)){// left span
        var removedTask = activeTaskManager.removeTask(liParentEle.id);
        console.log(liParentEle.id, removedTask);
        trashTaskManager.addTask(removedTask);
        liParentEle.remove();
    }
});
```

#### Original Code

Bind event directly onto every `li` and `li`'s child spans. However, once a new `li` is created and appended to `ul`, you have to bind event for `it`.

Adv: easy logic.

Dis: bind multiple times.

`this.value` is also `eventObj.target.value` because `eventObj.target` and `this` here refers to the same object.

```
liDisplays.forEach(function(liDisplay){
    addELToLi(liDisplay);
});
todoInput.addEventListener("keydown", function(eventObj){
    if(eventObj.keyCode === 13 || eventObj.key === "Enter"){
        var task = activeTaskManager.createTask(this.value);
        var li = document.createElement("li");
        li.setAttribute("id", task.id);
        li.innerHTML += '<span><i class="far fa-trash-alt"></i></span>'
                      + '<span class="taskName">' + task.name + '</span>';
        ulDisplay.appendChild(li);
        this.value = "";
        addELToLi(li);
    }
});
function addELToLi(liDisplay){
    liDisplay.addEventListener("mouseover", function(eventObj){
        var span = this.querySelector("span:nth-of-type(1)");
        span.style.backgroundColor = "red";
        span.style.width = "40px";
    });
    liDisplay.addEventListener("mouseout", function(){
        var span = this.querySelector("span:nth-of-type(1)");
        span.style.backgroundColor = "";
        span.style.width = "";
    });
    liDisplay.querySelector("span:nth-of-type(1)").addEventListener("click", function(){
        var removedTask = activeTaskManager.removeTask(this.parentElement.id);
        console.log(this.parentElement.id, removedTask);
        trashTaskManager.addTask(removedTask);
        this.parentElement.remove();
    });
    liDisplay.querySelector(".taskName").addEventListener("click", function(){
        var task = activeTaskManager.taskList[activeTaskManager.findIndex(this.parentElement.id)];
        task.completed = !task.completed;
        this.classList.toggle("completed");
    });
}
```

### :focus

The `:focus` CSS pseudo-class represents an element (such as a form `input`) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's "tab" key.

```
input:focus {
  color: red;
}
```


### set `color` the same as `background-color`

```
div#todoList > ul > li i {
    color: transparent;
}
```

### Use css to implement hover effect on `li`

Use `li:hover span` and `li:hover i` to change style of span and i when li is hovered.

```
div#todoList > ul > li:hover span:nth-of-type(1) {
    width: 40px;
    background-color: red;
}

div#todoList > ul > li:hover i {
    color: white;
}
```

### Use Javascript to implement hover effect on `li`

```
// listen to event on ul's li
ulDisplay.addEventListener("mouseover", function(eventObj){
    // if fromElement and toElement belongs to the same li, return
    // otherwise, execute
    var fromParent = liParent(eventObj.fromElement, this);
    var toParent = liParent(eventObj.toElement, this);
    /*
        null -> null,   not execute 
        null -> sth,    execute
        sth -> null,    execute
        sth -> sth,     the same li parent, not exeute; otherwise execute
    */
    if(fromParent === toParent){
        return;
    }
    var span = liParent(eventObj.target, this).querySelector("span:nth-of-type(1)");
    span.style.backgroundColor = "red";
    span.style.width = "40px";
    var trashIcon = span.querySelector("i");
    trashIcon.style.color = "white";
});
// listen to event on ul's li
ulDisplay.addEventListener("mouseout", function(eventObj){
    var fromParent = liParent(eventObj.fromElement, this);
    var toParent = liParent(eventObj.toElement, this);
    if(fromParent === toParent){
        return;
    }
    var span = liParent(eventObj.target, this).querySelector("span:nth-of-type(1)");
    span.style.backgroundColor = "";
    span.style.width = "";
    var trashIcon = span.querySelector("i");
    trashIcon.style.color = "";
});
```

### Center element horizontally and vertically with position

```
.box {
    position: absolute;
    top: 50%;  /* position the top  edge of the element at the middle of the parent */
    left: 50%; /* position the left edge of the element at the middle of the parent */
    transform: translate(-50%, -50%); /* This is a shorthand of
                                         translateX(-50%) and translateY(-50%) */
}
```

Adding `top`/`left` of `50%` moves the `top`/`left` margin ***edge*** of the element to the middle of the parent, and `translate()` function with the (negative) value of `-50%` moves the element by the ***half of its size***. Hence the element will be positioned at the middle.

This is because a percentage value on `top`/`left` properties is relative to the height/width of the parent element (which is creating a containing block).

While a percentage value on `translate()` transform function is relative to width/height of the element itself (Actually it refers to the size of bounding box).

For unidirectional alignment, go with `translateX(-50%)` or `translateY(-50%)`instead.

### Bottom footer

```
footer {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translate(-50%, 0);
}
```

### 97 -> a

```
String.fromCharCode(97);// "a"
```

### canvas width and height

Use `window.innerWidth` and `window.innerHeight`.

```
(new paper.Path.Circle(new paper.Point(window.innerWidth, window.innerHeight), 50)).fillColor = "blue";
```

Or `paper.view.size.height` and `paper.view.size.width` in Paper.js.


### Http server

```
http-server 'path/to/your/directory' -o
```

```
cd path/to/your/directory
http-server . -o
```

### Failed to load `file://.mp3:` Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.

Use http server

### callback

A callback function is a function that is passed into another function as a parameter then invoked by that other function.

```
function callback(){
    console.log("coming from callback");
}
function higherOrder(fn){
    console.log("to call callback");
    fn();
    console.log("callback has been invoked");
}
higherOrder(callback);

console.js:35 to call callback
console.js:35 coming from callback
console.js:35 callback has been invoked
```

### A higher order function is...

a function that accept a callback as a parameter

#### What are callbacks used for?

- Advanced Array Methods
- Browser events
- AJAX Requests
- React Development

Duplicate Code Without Callbacks

```
function sendMessageConsole(message) {
  console.log(message);
}

function sendMessageAlert(message) {
  alert(message);
}

function sendMessageConfirm(message) {
  return confirm(message);
}

sendMessageAlert("Hi");
```

Code Reuse With Callbacks


```
function sendMessage(callback, message){
    return callback(message);
}
sendMessage(console.log, "Hi");
sendMessage(alert, "Hi");
var answer = sendMessage(confirm, "Do you accept?");
```

Callbacks With Function Declarations

```
function greet(name, formatter){
    console.log("Hello, " + formatter(name));
}
function upperCase(name){
    return name.toUpperCase();
}
greet("elie", upperCase);//Hello, ELIE
```

Callbacks With Anonymous Functions

```
function greet(name, formatter){
    console.log("Hello, " + formatter(name));
}
greet("elie", function(name){
    name.toUpperCase();
});
// Hello, undefined
greet("elie", function(name){
    return name.toUpperCase();
});
// Hello, ELIE
greet("elie", function(name){
    return name + "!";
});
// Hello, elie!
```

### myForEach

```
Array.prototype.myForEach = function(fn){
    for(var i=0; i<this.length; i++){
        fn(this[i], i, this); // item, index, array
    }
};
var sum = 0;
[1,3,4,1].myForEach(function(num, i){
    console.log(i);
    sum+=num;
});
console.log(sum);//9
```

`fn` is also known as `callback`, the below code's effect is the same as the previous one.

```
Array.prototype.myForEach = function(callback){
    for(var i=0; i<this.length; i++){
        callback(this[i], i, this);// item, index, array
    }
};
var sum = 0;
[1,3,4,1].myForEach(function(num, i){
    console.log(i);
    sum+=num;
});
console.log(sum);//9
```

```
var strings = ["my", "forEach", "example"];
var result = "";
strings.myForEach(function(str, index, array) {  
  if (array.length - 1 !== index){
    result += str + " ";
  } else {
    result += str + ".";
  }
});
console.log(result);//"my forEach example."
```

`return` / `break` won't work in forEach, because it breaks the execution of callback function. Specifically, it returns to callback(), never influencing the execution of for loop. If you want to stop the execution of for loop, use simple `for`.

### findIndex

Definition: returns the index of the first element in the array for which the callback returns a truthy value.  -1 is returned if the callback never returns a truthy value.

```
Array.prototype.myFindIndex = function(callback){
    for(var i=0; i<this.length; i++){
        if(callback(this[i], i, this)){// item, index, array
            return i;
        }
    }
    return -1;
};
```

```
[21,323,5,21,12,3].myFindIndex(function(item){
    if(item<5){
        return true;
    }else{
        return false;
    }
}); // 5
```

### Stack and Heap

Whenever you invoke a function, the details of the invocation are saved to the top of the stack (pushed to the top)

Whenever a function returns, the information about the invocation is taken off the top of the stack (popped off of the top)

```
1  function multiply(x, y) {
2    return x * y;
3  }
4 
5  var res = multiply(3,5);
```

Stack:
```
2  function: multiply
5  function: main
```

#### Stack Frame Contents

- The function that was invoked

- The parameters that were passed to the function

- Current line number

#### Stack Definition

An ordered set of stack frames

Most recently invoked function is on the top of the stack

The bottom of the stack is the first function invoked

The stack is processed from top to bottom

#### Heap

An area in memory where the your data is stored

```
// The object is created in the heap. obj is a reference to the object.
var obj = {firstName: "Tim", lastName: "Garcia"};
// New data is not created, only a copy of the reference
var referenceCopy = obj;
```

### `setTimeout` and `clearTimeout(timerId)`

```
var timerId = setTimeout(function(){
    alert("Run in 30s.");
}, 30000);
setTimeout(function(){
    console.log("Canceling the first setTimeout", timerId);
    clearTimeout(timerId);
}, 1000);
```

### `setInterval` and `clearInterval(intervalId)`

This works because `setInterval()` is executed and returns to intervalId earlier than the callback, which will be executed every coming second.

```
var time = 0;
var intervalId = setInterval(function(){
    time++;
    console.log("time: " + time);
    if(time >= 10){//clearInterval when time >= 10
        clearInterval(intervalId);
    }
}, 1000);// execute every second
```

```
time: 1
time: 2
time: 3
time: 4
time: 5
time: 6
time: 7
time: 8
time: 9
time: 10
```

Or

```
var time = 0;
var intervalId = setInterval(function(){
    time++;
    console.log("time: " + time);
}, 1000);// execute every second
setTimeout(function(){
    clearInterval(intervalId);
}, 10000);//clearInterval after 10s
```

```
time: 1
time: 2
time: 3
time: 4
time: 5
time: 6
time: 7
time: 8
time: 9
time: 10
```

### Assignment: Exercise: countDown Function

Your goal is to implement a function called countDown.  The function will accept 1 parameter which is a time in seconds for the count down.  The function should console.log the time remaining every second.  Once the timer gets to 0, the timer should be stopped and you should console.log "Ring Ring Ring!!!".

```
function countDown(time){
    var intervalId = setInterval(function(){
        time--;
        if(time <= 0){
            console.log("Ring Ring Ring!!!");
            clearInterval(intervalId);
        }else{
            console.log("Timer: " + time);
        }
    }, 1000);
}
countDown(3);
```

```
Timer: 2
Timer: 1
Ring Ring Ring!!!
```

### The Queue

An ordered list of functions waiting to be placed on the stack

Functions in the queue are processed on a first in, first out basis (FIFO)

### The Event Loop

Functionality in the JavaScript runtime that checks the queue when the stack is empty.

If the stack is empty, the front of the queue is placed in the stack.

#### Example 1

```
1 setTimeout(function() {
2   console.log("Hello World");
3 }, 0);
```

Stack
```
?  function: setTimeout
1  function: main
```

Queue:

```
callback function()
```

1. `function: main` placed in the stack and called
2. `function: setTimeout` placed in the stack and called
3. `function: setTimeout` takes the `callback function()` to the Queue
4. `function: setTimeout` ends and is popped
5. `function: main` ends and is popped
6. Stack is empty, event loop check the queue, and places `callback function()` in the stack
7. `callback function()` is called
8. `callback function()` ends and is popped
9. Stack empty and queue empty

When `setTimeout(callback, 0);` is executed, it takes the `callback` to the Queue.

When stack is empty, event loop will check the queue and see if anything there.

#### Example 2

```
1 function square(n) {
2   return n * n;
3 }
4 setTimeout(function() {
5   console.log("Callback was placed",
                "on the queue");
6 }, 0);
7 console.log(square(2));
```

```
4
Callback was placed on the queue
```

1. `4 function: main` is placed on the stack
2. `function: setTimeout` is placed on the stack
3. `function: setTimeout` is called, which places `function: callback` to the queue
4. `function: setTimeout` ends and is popped off
5. it's now `7 function: main`
6. `function: square` is placed on the stack
7. `function: square` is called, which returns 4
8. `function: square` ends and is popped off
9. `function: console.log` is placed on the stack
10. `function: console.log` is called, which prints 4
11. `function: console.log` ends and is popped off
12. `7 function: main` ends and is popped off
13. Stack is empty now, Event Loop checks the queue, and puts `function: callback` in the stack
14. `function: callback` is called
15. `function: console.log` is called, printing "Callback was placed on the queue"
16. `function: console.log` ends and is popped off
17. Stack empty and queue empty

#### Key point

Although delay is set 0 in setTimeout, the callback won't be executed immediately. It's executed, after Stack is empty, Event loop moves it from the queue to the Stack.(As placed on the Stack, since Stack is empty before, it's now the only frame in the stack, so it will be executed right now)

### JavaScript is Single Threaded

Single Threaded: Code execution is linear.  Code that is running cannot be interrupted by something else going on in the program.

So the callback, though whose delay is 0, cannot be run right now, not until other work finishes(Stack empty).

```
setTimeout(function() {
   console.log("Hello from the timeout");
 }, 0);

for (var i = 0; i < 1000000000; i++) {
var x = i * 2;
}
console.log("Done with loop");
```

```
Done with loop
Hello from the timeout
```

Though delay is 0, callback won't run until `for` loop and `console.log` finish.

### Promise

A one time guaranteed return of some future value

When that value is figured out - the promise is resolved/fulfilled or rejected

Friendly way to refactor callback code

Libraries have implemented Promises for a while, ES2015 is a little late to the game

#### Story time
You're hungry - so you go to McDonalds

You place your order and get a ticket (a promise)

After some time, you either get your food and the promise is resolved or you do not get your food and the promise is rejected

If you want another order - you need a new Promise!

#### Where have you seen promises before?
jQuery implemented its own version of a promise called a deferred. jQuery version 3 now supports native promises.

Many JavaScript libraries and frameworks (Node, Angular) use popular promise libraries like q and bluebird

#### We can now create our own promises!
Created using the new keyword
Every promise constructor accepts a callback function which contains two parameters, resolve and reject
You can call these parameters whatever you like, resolve and reject are most common
These parameters are both functions to be run if the promise is resolved or rejected

#### Returning promises
Since a promise always returns something that has a .then (thenable) - we can chain promises together and return values from one promise to another!

```
var years = [];
$.getJSON('https://omdbapi.com?t=titanic&apikey=thewdb')
.then(function(movie){
    years.push(movie.Year);
    return $.getJSON('https://omdbapi.com?t=shrek&apikey=thewdb');  
})
.then(function(movie){
    years.push(movie.Year);
    console.log(years);
})
console.log('ALL DONE!');

// "ALL DONE!"
// ["1997", "2001]
```

A `promise` is an object that represents a task that will be completed in the future.

Analogy: taking a number at a government office before you can get helped. The piece of paper is like your `promise`. The help you get at the counter is like the invocation of your `callback`.

```
var p1 = new Promise(function(resolve, reject) {
    resolve([1,2,3,4]);// when resolve is called, [1,2,3,4] is passed to data in then's callback and the callback is executed
});

p1.then(function(data) {
    console.log("Promise p1 resolved with data:", data);
});
```

```
Promise p1 resolved with data: (4) [1, 2, 3, 4]
```

```
var p1 = new Promise(function(resolve, reject) {
   reject("Error");// when reject is called, "Error" is passed to data in catch's callback and the callback is executed
 });
 p1.then(function(data) {
   console.log("Promise p1 resolved with data:", data);
 }).catch(function(data){
    console.log("Promise p1 rejected with data:", data);
});
```

```
Promise p1 rejected with data: Error
```

1. when resolve is called, [1,2,3,4] is passed to data in then's callback and the callback is executed.
2. when reject is called, "Error" is passed to data in catch's callback and the callback is executed.


```
var p1 = new Promise(function(resolve, reject){
    var num = Math.random();
    if(num < 0.5){
        resolve(num);
    }else{
        reject(num);
    }
});
p1.then(function(data){
    console.log("Success: " + data);
}).catch(function(data){
    console.log("Error: " + data);
});
```

```
Error: 0.8415900841407606
```


```
var promise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        var randomInt = Math.floor(Math.random() * 10);
        resolve(randomInt);
    }, 4000);
});
promise.then(function(data) {
    console.log("Random int passed to resolve:", data);
});
```

```
Random int passed to resolve: 4
```

### Promise Chaining

Hard to read Nested Async Callbacks(One callback depends on the another).

```
var counter = 0;
setTimeout(function() {
    counter++;
    console.log("Counter:", counter);
    setTimeout(function() {
        counter++;
        console.log("Counter:", counter);
        setTimeout(function() {
            counter++;
            console.log("Counter:", counter);
        }, 3000);
    }, 2000);
}, 1000);
514
```

```
Counter: 1
Counter: 2
Counter: 3
```

- The code is hard to read
- Logic is difficult to reason about
- The code is not modular

### Promise Chaining: Returning a Promise

`promise.then` wait for `Promise` p1 to finish, next then waits for the new `Promise` returned to finish.

```
var promise = new Promise(function(resolve, reject){
    var counter = 0;
    console.log("ASAP0");
    setTimeout(function(){
        counter++;
        console.log("Counter: " + counter);
        resolve(counter);
    }, 1000);
});
promise
.then(function(counter){
    return new Promise(function(resolve, reject){
        console.log("ASAP1");
        setTimeout(function(){
            counter++;
            console.log("Counter: " + counter);
            resolve(counter);
        }, 2000);
    });
})
.then(function(counter){
    return new Promise(function(resolve, reject){
        console.log("ASAP2");
        setTimeout(function(){
            counter++;
            console.log("Counter: " + counter);
            resolve(counter);
        }, 3000);
    });
})
.then(function(counter){})
.catch(function(data){
    console.log("Error: " + data);
});
console.log("last line");
```

```
ASAP0
last line
Counter: 1 //after 1 s
ASAP1      //after 1 s
Counter: 2 //after 1+2 s
ASAP2      //after 1+2 s
Counter: 3 //after 1+2+3 s
```

### Promise Chaining: Returning Data

```
var promise = new Promise(function(resolve, reject){
    resolve(3);
});
promise
.then(function(data){
    return data*2;
})
.then(function(data){
    return data + 10;
})
.then(function(data){
    console.log(data)
})
.catch(function(data){
    console.log("Error: " + data);
});;
```

```
16
```

### Refactor Nested Callback

```
function incCounter(){
    counter++;
    console.log("Counter: " + counter);
}
function runLater(callback, delay){
    return new Promise(function(resolve, reject){
        setTimeout(function(){
            var res = callback();
            resolve(res);
        }, delay);
    });
}
var counter = 0;
var promise = runLater(incCounter, 1000);
promise
.then(function(counter){
    return runLater(incCounter, 2000);
})
.then(function(counter){
    return runLater(incCounter, 3000)
})
.then(function(counter){})// the final .then is not necessary
.catch(function(error){
    console.log("Error: " + error);
});
```

### `.then()` is asynchronous

```
console.log('script0');
setTimeout(function(){
    console.log('setTimeout0')
}, 10);

new Promise(function(resolve) {
    console.log('promise1')
    resolve();
}).then(function() {
    console.log('promise2');
});
console.log('script1');
```

```
script0
promise1
script1
promise2
setTimeout0
```

### Promise.all
Accepts an array of promises and resolves all of them or rejects once a single one of the promises has been first rejected (fail fast).

If all of the passed-in promises fulfill, Promise.all is fulfilled with an array of the values from the passed-in promises, in the same order as the promises passed in.

You may have seen something like this when $.when in jQuery or Q

The promises don't resolve sequentially, but Promise.all waits for them to resolve.

All promises are passed in as an array, and the result is also an array.

```
function getMovie(title){
    return $.getJSON(`https://omdbapi.com?t=${title}&apikey=thewdb`);
}

var titanicPromise = getMovie('titanic');
var shrekPromise = getMovie('shrek');
var braveheartPromise = getMovie('braveheart');
Promise.all([titanicPromise, shrekPromise, braveheartPromise]).then(function(movies){
    return movies.forEach(function(value){
        console.log(value.Year);
    });
});

// 1997
// 2001
// 1995
```


### Promise exercises


```
1. Write a function called getMostFollowers, which accepts a variable number of arguments. You should then make an AJAX call to the Github User API (https://developer.github.com/v3/users/#get-a-single-user) to get the name and number of followers of each argument. The function should return a promise, which when resolved, returns a string which displays the username who has the most followers. 

Hint - Try to use Promise.all to solve this and remember that the jQuery AJAX methods ($.getJSON, $.ajax, etc.) return a promise.

getMostFollowers('elie','tigarcia','colt').then(function(data){
    console.log(data)
});
 
"Colt has the most followers with 424" 
```

Use `return new Promise` because Promise.all is asynchronous, things after it will be executed earlier, just like `setTimeout`.

```
function getMostFollowers(...args){
    var promiseArr = [];
    args.forEach(username => promiseArr.push($.getJSON(`https://api.github.com/users/${username}`)));
    return Promise.all(promiseArr)
    .then(function(users){
        var max = users[0];
        for(var i=1; i<users.length; i++){
            if(Number(users[i].followers) > Number(max.followers)){
                max = users[i];
            }
        }
        return `${max.login} has the most followers with ${max.followers}`;
    });
}
```


```
2. Write a function called starWarsString, which accepts a number. You should then make an AJAX call to the Star Wars API (https://swapi.co/ ) to search for a specific character by the number passed to the function. Your function should return a promise that when resolved will console.log the name of the character.

starWarsString(1).then(function(data){
    console.log(data)
})
 
"Luke Skywalker"
```

```
function starWarsString(num){
    return $.getJSON(`https://swapi.co/api/people/${num}`)
    .then(function(response){
        return `${response.name}`;
    });
}
```

```
Bonus 1 -  Using the data from the previous AJAX call above, make another AJAX request to get the first film that character is featured in and return a promise that when resolved will console.log the name of the character and the film they are featured in 

starWarsString(1).then(function(data){
    console.log(data)
})
 
"Luke Skywalker is featured in The Empire Strikes Back, directed by Irvin Kershner"
```

```
function starWarsString(num){
    return $.getJSON(`https://swapi.co/api/people/${num}`)
    .then(function(response){
        return $.getJSON(response.films[0])
        .then(function(filmRes){
            return [response.name, filmRes.title, filmRes.director];
        });            
    }).then(function([name, title, director]){
        return `${name} is featured in ${title}, directed by ${director}`;
    });
}
```

```
Bonus 2 -  Using the data from Bonus 1 - make another AJAX call to get the information about the first planet that the film contains. Your function should return a promise that when resolved will console.log the name of the character and the film they are featured in and the name of the planet. 

starWarsString(1).then(function(data){
    console.log(data)
})
 
"Luke Skywalker is featured in The Empire Strikes Back, directed by Irvin Kershner and it takes place on Hoth"
```

```
function starWarsString(num){
    return $.getJSON(`https://swapi.co/api/people/${num}`)
    .then(function(response){
        return $.getJSON(response.films[0])
        .then(function(filmRes){
            return $.getJSON(filmRes.planets[0]).then(function(planetRes){
                return [response.name, filmRes.title, filmRes.director, planetRes.name];
            });
        });            
    }).then(function([name, title, director, planet]){
        return `${name} is featured in ${title}, directed by ${director} and it takes place on ${planet}`;
    });
}
```

Use `res` to contains string, and refractor code to be better arranged.

```
function starWarsString(num){
    var res = ``;
    return $.getJSON(`https://swapi.co/api/people/${num}`)
    .then(function(response){
        res += `${response.name} is featured in `;
        return $.getJSON(response.films[0])
    })
    .then(function(filmRes){
        res += `${filmRes.title}, directed by ${filmRes.director} `;
        return $.getJSON(filmRes.planets[0]);
    })
    .then(function(planetRes){
        res += `and it takes place on ${planetRes.name}`;
        return res;
    });
}
```

### AJAX: Asynchronous JavaScript and XML

AJAX IS NOT...
A Library
A Framework
A Technology

AJAX IS... an approach

HTML, JavaScript, The DOM, CSS, XMLHTTP Requests

"Hey wait a minute, all the pieces are here for us to make web apps that can update without ***refreshing***!"

[http://adaptivepath.org/ideas/ajax-new-approach-web-applications/](ajax model)

With AJAX, websites can send and request data from a server in the background without disturbing the current page, leading to Today's Single Page Apps.

How does Pinterest keep loading new content forever?!(AJAX)

Compare that with Reddit...(Not AJAX) you have to click next button.

JavaScript: "The user scrolled to the bottom!"

JavaScript: "Quick, send a request to the server and get more content!"

Server: yeah, yeah here you go

JavaScript: "Now I'll just append the new data to the bottom of the page"

### XML and JSON

API's don't respond with HTML. API's respond with pure data, not structure.

They use more efficient data formats like XML and JSON

XML: Extended Markup Language

XML is syntacticly similar to HTML, but it does not describe presentation like HTML does

```
<pin>
  <title>Adorable Maine Coon</title>
  <author>Cindy S</author>
  <num-saves>1800</num-saves>
</pin>
```

JSON: JavaScript Object Notation

JSON looks (almost) exactly like JavaScript objects

```
'pin': {
  'title': 'Adorable Maine Coon',
  'author': 'Cindy S',
  'num-saves': 1800
}
```

### Making Requests with JavaScript:
1. XMLHTTP Request
2. The Fetch API
3. 3rd Party Libraries: jQuery, Axios, etc.

#### XMLHTTP Request: also known as XHR

```
var XHR =new XMLHttpRequest();//readyState: 0(UNSENT)
XHR.addEventListener("readystatechange", function(){
    if(this.readyState === 4){//DONE
        if(this.status === 200){//200
            console.log(this.responseText);
        }else{//other status
            console.log("A problem occurred.");
        }
    }
});
XHR.open("GET", "https://api.github.com/zen");//(type, url) readyState: 1(OPENED)
XHR.send();// readyState: 2(HEADERS_RECEIVED), 3(LOADING), 4(DONE)
```

### XMLHttpRequest and Promise

```
function getBTCData(){
    var p = new Promise(function(resolve, reject){
        var XHR = new XMLHttpRequest();
        XHR.addEventListener("readystatechange", function(){
            if(this.readyState === 4){
                if(XHR.status === 200){
                    var data = JSON.parse(XHR.responseText);
                    resolve(data);
                }else{
                    console.log("There was somthing wrong.")
                }
            }
        });
        XHR.open("GET", "https://api.coindesk.com/v1/bpi/currentprice.json");
        XHR.send();
        refreshButton.disabled = true;
    });
    p
    .then(function(data){
        rateDisplay.textContent = data.bpi[currency].rate;
        codeDisplay.textContent = data.bpi[currency].code;
        refreshButton.disabled = false;
    })
    .catch(function(err){
        console.log(err);
    });
}
```

### PROBLEMS WITH XHR
Ugly, Bulky Syntax
It's 16 Years Old
No Streaming

### fetch

`fetch(url)` returns a `Promise`.

```
var url = "https://api.coindesk.com/v1/bpi/currentprice.json";
fetch(url)
.then(function(data){
    console.log(data);
})
.catch(function(err){
    console.log("ERROR: " + err);
});
```

`response.json()` returns a Promise because it takes time to generate JSON from response

You can add `.then` after `return response.json()` because `.then` can be used on `Promise`, and `response.json()` returns a Promise object. Being used after the `.then(function(response){})` also works, because `.then(function(response){})` also returns the Promise object(`return response.json()`).

Putting `.then` outside is better for it prevents nested callback.

```
fetch(url)
.then(function(response){
    return response.json().then(function(data){
        console.log(data);
    });
});
```

### fetch solution

```
fetch(url)
.then(function(response){
    return response.json();
})
.then(function(data){
    console.log(data);
});
```

### fetch options

You can use string directly, `JSON.stringify` is not required. However, it's better to use `JSON.stringify` so that you don't have to convert object to string ***manually***, worrying about double/single quotes, etc

```
fetch(url, {  
    method: 'POST',// by default GET
    body: JSON.stringify({
        name: 'blue',
        login: 'bluecat',
    })
})    
.then(function (data) {  
  //do something 
})  
.catch(function (error) {  
  //handle error 
});
```

response.json() is a Promise, which takes time to generate JSON from response

```
fetch(url, {
    method: "POST",
    body: "This is body."
})
.then(function(response){
    return response.json();
})
.then(function(data){
    console.log(data.bpi.USD.rate);
});
```

In Request Playload below Request Headers, you can see "This is body."

```
fetch(url, {
    method: "POST",
    body: JSON.stringify({
        name: "colt",
        login: "123"
    })
})
.then(function(response){
    return response.json();
})
.then(function(data){
    console.log(data.bpi.USD.rate);
});
```

```
Request Playload
{name: "colt", login: "123"}
    login: "123"
    name: "colt"
```

### Handling Fetch Errors

`catch` works when internet is off, or credentials problem. It does nothing with status code like 404.

The `ok` read-only property of the `Response` interface contains a Boolean stating whether the response was successful (status in the range ***200-299***) or not.

coltdadfasa doesn't exist.

Error thrown inside Promise can be caught by `.catch()`. 

```
var url = "https://api.github.com/users/coltdadfasa";
fetch(url)
.then(function(response){
    if(!response.ok){
        throw Error(response.status);
    }else{
        return response;
    }
})
.then(function(response){
    return response.json();
})
.then(function(data){
    console.log(data);
})
.catch(function(err){
    console.log(err);
});
```

```
Error: 404
```

If it's network problem, `TypeError: Failed to fetch`.

### Fetch Final solution: `.catch(callback)` + `.json()`

use function `handleErrors` to handle status errors.

```
function handleErrors(response){
    if(!response.ok){
        throw Error(response.status);
    }else{
        return response;
    }
}

var url = "https://api.github.com/users/coltsasasa";
fetch(url)
.then(handleErrors)
.then(function(response){
    return response.json();
})
.then(function(data){
    console.log(data);
})
.catch(function(err){
    console.log(err);
});
```

```
 fetch(url)
  .then(handleErrors)
  .then(parseJSON)
  .then(updateProfile)
  .catch(printError);
```

```
function parseJSON(response){
    return response.json();
}
```

Note that `this` in function `handleErrors`/`parseJSON`/`updateProfile`/`printError` are all `window`.

### image and info in one line

26%+73% = 99%. Note if the two add up to 100%, it may exceed.

```
<img src="https://randomuser.me/api/portraits/women/11.jpg" alt="">
<div id="info">
    <span class="block" id="name">rachel petit</span>
    <span class="block" id="username">orangelion610</span>
    <span class="block">
        <span>Email: </span><span id="email">rachel.petit@example.com</span>
    </span>
    <span class="block">
        <span>City: </span><span id="city">montreuil</span>
    </span>
</div>
```

```
img {
    display: inline-block;
    border-radius: 50%;
    width: 26%;
    margin: 0;
}
```

```
#info {
    display: inline-block;
    width: 73%;
    padding-left: 10%;
    margin: 0;
}
```

### wait cursor when button is disabled

```
button:disabled {
    cursor: wait;
}
```

### THE ONLY PROBLEM of fetch

Browser compatibility, no support for IE.

### jQuery AJAX Methods

`$.ajax`, `$.get`, `$.post`, `$.getJSON`

`$.get`, `$.post`, `$.getJSON` are convenient Shorthand Methods of `$.ajax`.

What passed to `.done` callback as argument is Javacript object, you don't have to parse JSON by yourself.

jQuery `$.ajax` returns a promise, use you alse can use `.then()` and `.catch()`.

```
$.ajax({
    method: "GET",
    url: "https://baconipsum.com/api/?type=meat-and-filler"
})
.done(function(response){
    console.log(response);
})
```

```
$.ajax({
    method: "GET",
    url: "https://baconipsum.com/api/?type=meat-and-filler"
})
.then(function(response){
    console.log(response);
})
```


```
var years = [];
$.getJSON('https://omdbapi.com?t=titanic&apikey=thewdb')
.then(function(movie){
    years.push(movie.Year);
    return $.getJSON('https://omdbapi.com?t=shrek&apikey=thewdb');  
})
.then(function(movie){
    years.push(movie.Year);
    console.log(years);
})
console.log('ALL DONE!');
```

[https://github.com/jquery/jquery/blob/master/src/ajax/xhr.js?source=cc](inplement ajax with xhr, source code in github)

### ajax error handling

ajax's fail responds to network problem, and ***404***. if `dataType` not given, jQuery will use intelligent guessing.

```
$.ajax({
    method: "GET",
    url: "https://api.github.com/users/coltsasa",
    dataType: "json"
})
.done(function(response){
    console.log(response);
})
.fail(function(response){
    console.log("Error: " + response.status + " " + response.statusText);
});
```

```
Error: 404 Not Found
```

### `$.get`/`jQuery.get()`

method: "GET" by default.

```
$.get("https://api.github.com/users/colt")
.done(function(response){
    console.log(response);
})
.fail(function(response){
    console.log("Error: " + response.status + " " + response.statusText);
});
```

This is a shorthand Ajax function, which is equivalent to:

```
$.ajax({
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
```

### `$.post`/`jQuery.post()`

```
$.post("https://api.github.com/users/colt", {
    name: "Charlie",
    city: "Florence"
})
.done(function(response){
    console.log(response);
})
.fail(function(response){
    console.log("Error: " + response.status + " " + response.statusText);
});
```

F12 -> Network -> Headers -> Form Data

```
name: Charlie
city: Florence
```

`$.post` equals:

```
$.ajax({
  type: "POST",
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
```

### `$.getJSON`/`jQuery.getJSON()`

method: GET + dataType: "json"

This is a shorthand Ajax function, which is equivalent to:

```
getJSON: function( url, data, callback ) {
    return jQuery.get( url, data, callback, "json" );
},
```

```
$.getJSON("https://api.github.com/users/colt")
.done(function(response){
    console.log(response.login);
})
.fail(function(response){
    console.log("Error: " + response.status + " " + response.statusText);
});
```

[https://github.com/jquery/jquery/blob/master/src/ajax.js](Source Code in github)

### AXIOS

`response` is json.

CDN:

```
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
```

```
axios.get(url)
.then(function(res){
  console.log(res.data);
})
.catch(function(e){
  console.log(e);
})
```

### Handling Errors With Axios

The effect of `params` is the same as `https://jsonplaaskjldceholder.typicode.com/comments?postId=1`

```
axios.get("https://jsonplaaskjldceholder.typicode.com/comments", {
    params: {
      postId: 1
    }
})
.then(function(response){
    //...    
})
.catch(handleErrors)
```

`err.response`: 404, like `https://jsonplaaskjldceholder.typicode.com/commentssasda`

`err.request`: Problem With Request!, like `https://sadadjsonplaaskjldceholder.typicode.com/comments`

```
if (err.response) {
  console.log("Problem With Response");
} else if (err.request) {
  console.log("Problem With Request!");
} else {
  console.log('Error', err.message);
}
```

### Axios final solution

```
axios.get(url)
.then(function(response){
    return response.data;//return JSON data
})
.then(updateQuote)
.catch(function(error){
    console.log(error.message);
    enableAllButtons();
});
```

### 99.5% for width?

### shrink margin

```
* {
    margin: 0.8%;
}
```

### put an element by X Y

```
greenBox.style.position = "absolute";// or relative
greenBox.style.left = 471.00481; //x, can be relative to parent or absolute
greenBox.style.top = 25; //y, can be relative to parent or absolute
```

Or

```
greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + greenBox.offsetWidth + gBBorder;
greenBox.style.top = mousemoveEventObj.clientY - (redBox.offsetTop - redBox.offsetHeight/2);
```

### offsetLeft, offsetTop, offsetWidth, offsetHeight

Element's absolute/positive X, absolute/positive Y, width, height.

If you don't specify 

### get element's border

```
getComputedStyle(greenBox).borderWidth
```

### text unselectable

```
#distanceText {
    user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}
```


### "Click" and hold event

Use greenBox's `mousedown`, window's `mouseup`(use window because even mouse leaves redBox, it continues to drag greenBox) to determine when click and hold starts and ends. Use `mousemove` to track the mouse and use function `handleGreenBoxMouseMove` to change position of greenBox while the mouse moves. In function `handleGreenBoxMouseUp`, since click and hold ends, remove `mousemove` and `mouseup` event listeners to stop this round of listening.

`which === 1` happens when left mouse is down(pressed). `click` event is mouse pressed and also ***released***. When right mouse is down/up, `which` is 3.

```
greenBox.addEventListener("mousedown", function(eventObj){
    if(eventObj.which === 1){
        //startDragging
        greenBox.style.position = "";
        window.addEventListener("mousemove", handleGreenBoxMouseMove);
        //stopDragging
        window.addEventListener("mouseup", handleGreenBoxMouseUp);

    }
});
```


```
function handleGreenBoxMouseUp(eventObj){
    if(eventObj.which === 1){
        window.removeEventListener("mousemove", handleGreenBoxMouseMove);
        window.removeEventListener("mouseup", handleGreenBoxMouseUp);
    }
}
```

The page is divided to 9 areas, deal with them by whether greenBox's x or y changes, if not change, which line it should be adjacent.

```
function handleGreenBoxMouseMove(mousemoveEventObj){
    var x = mousemoveEventObj.clientX;
    var y = mousemoveEventObj.clientY;
    var xL = xLeft(x);
    var xR = xRight(x);
    var yT = yTop(y);
    var yB = yBottom(y);
    
    if(xL && !yT && !yB){//case 1
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + greenBox.offsetWidth + gBBorder;
        greenBox.style.top = mousemoveEventObj.clientY - (redBox.offsetTop - redBox.offsetHeight/2);
    }else if(xL && yB){//2
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + greenBox.offsetWidth + gBBorder;
        greenBox.style.top = redBox.offsetHeight - greenBox.offsetHeight/2 - 2 * gBBorder;
    }else if(yB && !xL && !xR){//3
        greenBox.style.left = x - (redBox.offsetLeft - redBox.offsetWidth/2);
        greenBox.style.top = greenBox.offsetHeight/2 + redBox.offsetHeight - greenBox.offsetHeight -2 * gBBorder;
    }else if(xR && yB){//4
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + redBox.offsetHeight -gBBorder;
        greenBox.style.top = redBox.offsetHeight - greenBox.offsetHeight/2 - 2 * gBBorder;
    }else if(xR && !yT && !yB){//5
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + redBox.offsetHeight -gBBorder;
        greenBox.style.top = y - (redBox.offsetTop - redBox.offsetHeight/2);
    }else if(xR && yT){//6
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + redBox.offsetHeight -gBBorder;
        greenBox.style.top = greenBox.offsetHeight/2;
    }else if(yT && !xL && !xR){//7
        greenBox.style.left = x - (redBox.offsetLeft - redBox.offsetWidth/2);
        greenBox.style.top = greenBox.offsetHeight/2;
    }else if(yT && xL){//8
        greenBox.style.left = redBox.offsetLeft - redBox.offsetWidth + greenBox.offsetWidth + gBBorder;
        greenBox.style.top = greenBox.offsetHeight/2;
    }else if(!xL && !xR && !yT && !yB){//9
        greenBox.style.left = x - (redBox.offsetLeft - redBox.offsetWidth/2);
        greenBox.style.top = y - (redBox.offsetTop - redBox.offsetHeight/2);
    }else{
        console.log("Error in dividing 9 slots in function handleGreenBoxMouseMove(mousemoveEventObj).");
    }
    //update distance between center of greenBox and center of redBox
    if((xL && yB) || (xR && yB) || (xR && yT) || (yT && xL)){
        //if case 2,4,6,8, no update
    }else{// otherwise, update
        distanceDisplay.textContent = calcDistance();   
    }
    
}
```


### const

`const` are like let declarations(block-scope, can't be re-declared) but, as their name implies, their value cannot be changed once they are bound. 

```
{
    const x=1;
}
console.log(x);//Uncaught ReferenceError: x is not defined
```

```
var name = "Colt";
name = "Elie";
```

You can't assign new value to a const or redeclare a const.

```
const name2 = "Colt";
name2 = "Elie"; //Uncaught TypeError: Assignment to constant variable.
const name2 = "Colt";//Uncaught SyntaxError: Identifier 'name2' has already been declared
```

Can change content inside any object, but can't change primitive. Because if arr points to an object, arr is just the reference/address to that object. As long as the address keeps the same, you can edit content in that address as you like. But primitive is what arr contains directly and immutable, so arr can't be changed means primitive can't be mutated.

```
const arr = [1,3,1];
arr.push(10);
console.log(arr);//(4) [1, 3, 1, 10]
```

Unless you take specific measures to avoid it, the internal state of a const variable is still modifiable. Fortunately, TypeScript allows you to specify that members of an object are readonly. The chapter on Interfaces has the details.

```
const numLivesForCat = 9;
const kitty = {
    name: "Aurora",
    numLives: numLivesForCat,
}

kitty = {
    name: "Danielle",
    numLives: numLivesForCat
};//Uncaught TypeError: Assignment to constant variable.

// all "okay"
kitty.name = "Rory";
kitty.name = "Kitty";
kitty.name = "Cat";
kitty.numLives--;//8
```

### difference between var and Java's int/double/boolean/etc

```
class TestInt{
public static void main(String[] args){
    {                                          
        int x=1;
    }
    System.out.println(x);
}
```

```
//cannot find symbol
//        System.out.println(x);
```

```
class TestInt{
    public static void main(String[] args){
        for(int i=0; i<5; i++){
            int z=1;
        }
        System.out.println(i);
        System.out.println(z);
    }
}
```

```
TestInt.java:6: error: cannot find symbol
        System.out.println(i);
                           ^
  symbol:   variable i
  location: class TestInt
TestInt.java:7: error: cannot find symbol
        System.out.println(z);
                           ^
  symbol:   variable z
  location: class TestInt
2 errors
```

```
for(var i=0; i<5; i++){
    var z=1;
}
i;//5
z;//1
```

### let

Three scopes: Global scope, function scope and block scope.

let can be re-assigned a new value, but cannot be re-declared.

#### Block scope with `let`

if, for, while, do, try, catch and {} is block.

We cannot access variables outside which is declared in a block with `let`.

```
{
    let x=1;
}
console.log(x);//Uncaught ReferenceError: x is not defined
```

### Hoist

Conceptually, for example, a strict definition of hoisting suggests that variable and function declarations are physically moved to the top of your code, but this is not in fact what happens. Instead, the variable and function declarations are put into memory during the compile phase, but stay exactly where you typed them in your coding.

#### hoist with `var`

You might think `hello()` will produce ReferenceError because elie is not defined.

```
function hello(){
    return elie;
    var elie = "Elie";
}
hello();//undefined
```

But what happens underhood is Javascript hoists var elie in the top and assign value in the third line, as below.

```
function hello(){
    var elie;
    return elie;
    elie = "Elie";
}
hello();//undefined
```

#### Only declarations are hoisted

```
num = 1;
console.log(num); // 1
var num = 0;
console.log(num); // 0
```

Equals

```
var num;
num = 1;
console.log(num); // 1
num = 0;
console.log(num); // 0
```

[https://developer.mozilla.org/en-US/docs/Glossary/Hoisting](Hoisting MDN Reference)

#### hoist with `function`

Even though we call the function in our code first, before the function is written, the code still works. This is because of how context execution works in JavaScript.

Hoisting works well with other data types and variables. The variables can be initialized and used before they are declared.

```
catName("Chloe");

function catName(name) {
  console.log("My cat's name is " + name);
}
```

Equals

```
function catName(name) {
  console.log("My cat's name is " + name);
}

catName("Chloe");
```

#### hoist with function 2

```
console.log(catName);
catName("Chloe");

var catName = function(name) {
  console.log("My cat's name is " + name);
}
```

```
undefined
Uncaught TypeError: catName is not a function
```

Equals

```
var catName;
console.log(catName);
catName("Chloe");

var catName = function(name) {
  console.log("My cat's name is " + name);
}
```

#### Hoist with `let`

`let` does hoist, but we cannot access the value because it's in a Temporal Dead Zone(TDZ).

Another property of block-scoped variables is that they can’t be read or written to before they’re actually declared. While these variables are “present” throughout their scope, all points up until their declaration are part of their temporal dead zone. This is just a sophisticated way of saying you can’t access them before the let statement, and luckily TypeScript will let you know that.

```
a++; // illegal to use 'a' before it's declared;
let a;
```

```
function hello(){
    return elie;
    let elie = "Elie";
}
hello();//Uncaught ReferenceError: elie is not defined
```

### Block scope with `let`: Usage

When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block or for-loop.

```
function f(input: boolean) {
    let a = 100;

    if (input) {
        // Still okay to reference 'a'
        let b = a + 1;
        return b;
    }

    // Error: 'b' doesn't exist here
    return b;
}
```

Here, we have two local variables a and b. a’s scope is limited to the body of f while b’s scope is limited to the containing if statement’s block.

Variables declared in a catch clause also have similar scoping rules.

```
try {
    throw "oh no!";
}
catch (e) {
    console.log("Oh well.");
}

// Error: 'e' doesn't exist here
console.log(e);
```

Useful in async environment.

```
for(var i=0; i<5; i++){
    setTimeout(function(){
        console.log(i);
    }, 1000);
}
// 5 (five times)
```

A common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture i at each iteration.

This odd-looking pattern is actually pretty common. The i in the parameter list actually shadows the i declared in the for loop, but since we named them the same, we didn’t have to modify the loop body too much.

```
for(var i=0; i<5; i++){
    (function(j){
        setTimeout(function(){
            console.log(j);
        }, 1000)
    })(i);
}
// 0
// 1
// 2
// 3
// 4
```

#### Block-scoped variable capturing

When we first touched on the idea of variable capturing with var declaration, we briefly went into how variables act once captured. To give a better intuition of this, each time a scope is run, it creates an “environment” of variables. That environment and its captured variables can exist even after everything within its scope has finished executing.

```
function theCityThatAlwaysSleeps() {
    let getCity;

    if (true) {
        let city = "Seattle";
        getCity = function() {
            return city;
        }
    }

    return getCity();
}
```

Because we’ve captured city from within its environment, we’re still able to access it despite the fact that the if block finished executing.

Recall that with our earlier setTimeout example, we ended up needing to use an IIFE to capture the state of a variable for every iteration of the for loop. In effect, what we were doing was ***creating a new variable environment for our captured variables***. That was a bit of a pain, but luckily, you’ll never have to do that again in TypeScript.

let declarations have drastically different behavior when declared as part of a loop. Rather than just introducing a new environment to the loop itself, these declarations sort of create a new scope per iteration. Since this is what we were doing anyway with our IIFE, we can change our old setTimeout example to just use a let declaration. Each setTimeout uses `i` in its own block scope.

```
for(let i=0; i<5; i++){
    setTimeout(function(){
        console.log(i);
    }, 1000);
}
// 0
// 1
// 2
// 3
// 4
```

### Shadowing

The act of introducing a new name in a more nested scope is called `shadowing`.


```
function f(con, x) {
    if(con){
        let x=100;
        console.log(x);
    }
    console.log(x);
}
```

```

f(true, 1);
//100
//1

f(false, 1);
//1
```

Shadowing is a bit of a double-edged sword in that it can introduce certain bugs on its own in the event of accidental shadowing, while also preventing certain bugs. For instance, imagine we had written our earlier sumMatrix function using let variables.

```
function sumMatrix(matrix: number[][]) {
    let sum = 0;
    for (let i = 0; i < matrix.length; i++) {
        var currentRow = matrix[i];
        for (let i = 0; i < currentRow.length; i++) {
            sum += currentRow[i];
        }
    }
    return sum;
}
```

Shadowing should usually be avoided in the interest of writing clearer code. While there are some scenarios where it may be fitting to take advantage of it, you should use your best judgement.

### Template Strings

Make your code easy to read.

Make sure you use backticks in Template Strings.

```
var firstName = "Elie";

var lastName = "Schoppik";

console.log("Hello " + firstName + " " + lastName); // error prone!
```

```
console.log(`Hello ${firstName} ${lastName}`); // Much nicer!
```

#### Multiline string with template strings

```
console.log(
"
Hello
"
);
//Uncaught SyntaxError: Invalid or unexpected token
```

```
console.log(
`
Hello
`
);
//Hello


console.log(
`
Hello
Multiline
Strings
`
);
/*
Hello
Multiline
Strings
*/
```

### Arrow Functions

`Arrow function` is an alternative to using the word `function`.

```
var add = function(a, b){
    return a + b;
}
```

- ***Replace*** keyword `function` with `=>`(equal sign and greater-than sign)
- `=>` be placed after the parameters
- If only ***one parameter***, remove the parenthesis `()` around this parameter as well.
- If no `=` between function name and parameter, add `=`.
- delete `;` if inside object or `()`
- 

```
var add = (a, b) => {
    return a + b;
}
```

```
[1,2,3].map(function(value){
    return value * 2;
});
```

```
[1,2,3].map(value => {
    return value * 2;
});
```

### One-line arrow functions

To put arrow functions on one line,  ***omit*** the ***return keyword*** as well as ***curly braces*** `{}`.

```
var add = function(a, b){
    return a + b;
}
```

To

```
var add = (a, b) => a+b;
```

```
[1,2,3].map(function(value){
    return value * 2;
});
```

To

```
[1,2,3].map(value => value * 2);
```

```
function doubleAndFilter(arr){
    return arr.map(function(value){
        return value * 2;
    }).filter(function(value){
        return value % 3 === 0;
    })
};
```

To

```
var doubleAndFilter = arr => arr.map(value => value * 2).filter(value => value%3 === 0);
```

#### If `=>` is followed by object declaration, add `()` around `{}`.

```
createStudentObj = (firstName, lastName) => {
    return {
        firstName: firstName,
        lastName: lastName
    };
}
```

```
createStudentObj = (firstName, lastName) => ({firstName: firstName, lastName: lastName});
```

#### If the return is longer than one line, use `()`


```
const FilterLink = ({ filter, children }) => (
   <NavLink
       to={filter === 'SHOW_ALL' ? '/' : `/${ filter }`}
       activeStyle={ {
       textDecoration: 'none',
           color: 'black'
       }}
   >
       {children}
   </NavLink>
)
```

### Difference between `=>` arrow function and `function`

1. Arrow functions do not get their own `this` keyword, therefore `this` refers to the ***enclosing context***.(outside context)
2. arrow functions do not get their own keyword `arguments`, use ***enclosing context*** `arguments`.

### Arrow functions do not get their own `this` keyword

```
function Instructor(firstName){
    this.firstName = firstName;
}
Instructor.prototype.sayHi = function(){
    setTimeout(function(){
        console.log("Hi " + this.firstName);
    }, 1000);
};
var elie = new Instructor("Elie");
elie.sayHi()

//Hi undefined
```

```
Instructor.prototype.sayHi = function(){
    setTimeout(function(){
        console.log("Hi " + this.firstName);
    }.bind(this), 1000);
};

//Hello Elie
```

Arrow functions do not have their own keyword `this`. The keyword `this` refers to its ***enclosing context*** (the Instructor).

```
Instructor.prototype.sayHi = function(){
    setTimeout(() => console.log(`Hello ${this.firstName}`), 1000);
};

//Hello Elie
```

Or

```
Instructor.prototype.sayHi = function(){
    setTimeout(() => {
        console.log(`Hello ${this.firstName}`);
    }, 1000);
};
```

### Arrow functions capture `this` where the function is created than invoked

```
let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function() {
        return function() {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);
```

```
Uncaught TypeError: Cannot read property '3' of undefined
```

Because cardPicker runs outside, and `this` refers to window or undefined if `use strict`.

Use `bind` to change this in the returned function.

```
var deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function () {
        return (function () {
            var pickedCard = Math.floor(Math.random() * 52);
            var pickedSuit = Math.floor(pickedCard / 13);
            return { suit: this.suits[pickedSuit], card: pickedCard % 13 };
        }).bind(this);
    }
};
var cardPicker = deck.createCardPicker();
var pickedCard = cardPicker();
alert("card: " + pickedCard.card + " of " + pickedCard.suit);
```

Or use arrow function to capture `this` where the function is created than invoked.

```
let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function() {
        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
        return () => {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();
alert("card: " + pickedCard.card + " of " + pickedCard.suit);
```


#### Why should we use both the function keyword and an arrow function

If we use two arrow functions, the sayHi function will not have its own keyword `this` - and the keyword this will refer to the ***enclosing context*** -- `window`.


```
Instructor.prototype.sayHi = () => setTimeout(() => console.log(`Hello ${this.firstName}`), 1000);

//Hello undefined
```

Or 

```
Instructor.prototype.sayHi = () => {
    setTimeout(() => {
        console.log(`Hello ${this.firstName}`);
    }, 1000);
};
```

### arrow functions do not get their own keyword `arguments`

Return inner arguments.

```
function outer(){
    return function inner(){
        return arguments;
    };
}
outer(1)(3);

// Arguments [3, callee: ƒ, Symbol(Symbol.iterator): ƒ]
```

Return outer(enclosing context) arguments.

```
function outer(){
    return inner = () => arguments;
}
outer(1)(3);

//Arguments [1, callee: ƒ, Symbol(Symbol.iterator): ƒ]
```

Return window(enclosing context) arguments.(Uncaught ReferenceError: arguments is not defined)

```
outer = () => inner = (a, b) => arguments;
outer(1)(3);

//Uncaught ReferenceError: arguments is not defined
```

If you REALLY need the arguments to an arrow function, use the rest operator.

### When NOT to use Arrow Functions

`Arrow functions` should NEVER be used as ***methods in objects*** since we will get the ***incorrect*** value of the keyword `this`. ES2015 provides a better alternative.

```
var instructor = {
    firstName: "Elie",
    sayHi: () => `Hello ${this.firstName}`
}

instructor.sayHi(); // "Hello undefined"
```

`this` in sayHi refers to window.(enclosing context)

### Default Parameters

```
function add(a, b){
    return a + b;
}
add();
//NaN
```

Assign default values to prevent that.

```
function add(a, b){
    if(a === undefined){
        a = 10;
    }
    if(b === undefined){
        b = 20;
    }
    return a + b;
}
add();
//30
```


```
function add(a=10, b=20){
    return a + b;
}
add();
//30
```

A parameter will be assigned if the user ***does not provide one***, or if the user ***passes undefined*** in its place.

```
function buildName(firstName, lastName = "Smith") {
    return firstName + " " + lastName;
}
buildName();//"undefined Smith"
buildName("Bob", undefined);//"Bob Smith"
```

### For...of loop

`for...of` can't access an index, can access value.

While `for...in` can access property(index).

Works with data types that are built with `Symbol.iterator()` function. Not work with normal `object` because normal object doesn't have `Symbol.iterator`.

The for...of statement creates a loop iterating over iterable objects (including the built-in String, Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, and user-defined iterables), invoking a custom iteration hook with statements to be executed for the value of each distinct property of the object.


```
for(let i of arr){
    console.log(i);
}
//1
//2
//3
```


```
for(let val of {}){
    console.log(val)
}
//Uncaught TypeError: {} is not iterable
```

### Rest operator

- The rest operator always returns an array 
- Is called the rest operator only when it is a ***parameter*** to a function
- Is accessed without the ... in a function
- A better alternative to using the arguments array-like object

```
function printRest(a,b,...c){
    console.log(a);
    console.log(b);
    console.log(c);
}

printRest(1,2,3,4,5); 

// 1
// 2
// [3,4,5]
```

### Rest operator usage example

```
function add(){
    var sum = 0;
    for(let i = 0; i < arguments.length; i++){
        sum += arguments[i];
    }
    return sum;
}
```

```
function add(a,b,c,...d){
    var sum = a + b + c;
    for(let x of d){
        sum += x;
    }
    return sum;
}
add(1,2,3,4,5,6,7,8,9,0,1,2,3)
//51
```

```
function add(){
    var argArr = [].slice.call(arguments);
    return argArr.reduce((acc, val) => acc + val);
}
```

#### Use rest operator to avoid converting arguments

`args` is Array.

```
var add = (...args) => args.reduce((acc, val) => acc + val);
```

### Spread Operator

The spread operator is the opposite of destructuring. It allows you to spread an array into another array, or an object into another object. For example:

```
let first = [1, 2];
let second = [3, 4];
let bothPlus = [0, ...first, ...second, 5];
```

This gives bothPlus the value [0, 1, 2, 3, 4, 5]. Spreading creates a shallow copy of first and second. They are not changed by the spread.

Spread each value in ***array*** to a ***comma separated value***.

```
var arr = [3,2,4,1,5];
Math.max(arr); // NaN
// ES5
Math.max.apply(this, arr); // 5
// ES2015
Math.max(...arr); // 5
```

```
// ES5
var arr1 = [1,2,3];
var arr2 = [4,5,6];
var arr3 = [7,8,9];

var combined = arr1.concat(arr2).concat(arr3);
```

```
// ES2015
var combined = [...arr1, ...arr2, ...arr3];
```

You get `[1,2,3,4,5,6,7,8,9]`.

```
function sumValues(a,b,c){
    return a+b+c;
}
var nums = [12,15,20];
// ES5
sumValues.apply(this, nums); // 47
// ES2015
sumValues(...nums); // 47
```

#### Object spread

```
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { ...defaults, food: "rich" };
console.log(search);//{food: "rich", price: "$$", ambiance: "noisy"}
```

Now search is { food: "rich", price: "$$", ambiance: "noisy" }. Object spreading is more complex than array spreading. Like array spreading, it proceeds from left-to-right, but the result is still an object. This means that properties that come later in the spread object overwrite properties that come earlier. So if we modify the previous example to spread at the end:

```
let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
let search = { food: "rich", ...defaults };
console.log(search);//{food: "spicy", price: "$$", ambiance: "noisy"}
```

Object spread also has a couple of other surprising limits. First, it only includes an objects’ own, enumerable properties. Basically, that means you lose methods when you spread instances of an object:

```
class C {
    constructor(p){
        this.p = p;
    }
    m(){
    }
}
let c = new C();
let clone = { ...c };

c.m(); // ok
c.p; // ok

clone.p; // ok
clone.m(); // Uncaught TypeError: clone.m is not a function
```

### Coding Exercise - Rest and Spread Exercises

```
/* 
Write a function called smallestValue which accepts a variable number of parameters and returns the smallest parameters passed to the function.

Examples:
    smallestValue(4,1,12,0) // 0
    smallestValue(5,4,1,121) // 1
    smallestValue(4,2) // 2
    smallestValue(99,12321,12.2) // 12.2
*/

function smallestValue(...args){
    return Math.min(...args);
}

/* 
Write a function called placeInMiddle which accepts two parameters, an array and another array. This function should return the first array with all of the values in the second array placed in the middle of the first array.

Examples:
    placeInMiddle([1,2,6,7],[3,4,5]) // [1,2,3,4,5,6,7]
    placeInMiddle([1],[3,4,5]) // [3,4,5,1]
    placeInMiddle([1,6],[2,3,4,5]) // [1,2,3,4,5,6]
    placeInMiddle([],[2,3,4,5]) // [2,3,4,5]
*/

function placeInMiddle(arr, vals){
    var len = Math.floor(arr.length/2);
    arr.splice(len, 0, ...vals);
    return arr;
}

/* 
Write a function called joinArrays which accepts a variable number of parameters (you can assume that each argument to this function will be an array) and returns an array of all of the parameters concatenated together

Examples:

    joinArrays([1],[2],[3]) // [1,2,3]
    joinArrays([1],[2],[3],[1],[2],[3]) // [1,2,3,1,2,3]
    joinArrays([1,2,3],[4,5,6],[7,8,9]) // [1,2,3,4,5,6,7,8,9]
    joinArrays([1],[3],[0],[7]) // [1,3,0,7]

*/

function joinArrays(...args){
    return args.reduce((acc, val) => [...acc, ...val]);
}

/* 
// Write a function called sumEvenArgs which takes all of the parameters passed to a function and returns the sum of the even ones.

Examples:
    sumEvenArgs(1,2,3,4) // 6
    sumEvenArgs(1,2,6) // 8
    sumEvenArgs(1,2) // 2
*/

function sumEvenArgs(...args){
    return args.reduce((acc, val) => acc + (val % 2 === 0 ? val : 0), 0);
}

/* 
Write a function called flip which accepts a function and a value for the keyword this. Flip should return a new function that when invoked, will invoke the function passed to flip with the correct value of the keyword this and all of the parameters passed to the function REVERSED. HINT - if you pass more than two parameters to flip, those parameters should be included as parameters to the inner function when it is invoked. You will have to make use of closure!



Examples:

    function personSubtract(a,b,c){
        return this.firstName + " subtracts " + (a-b-c);
    }
    
    var person = {
        firstName: 'Elie'
    }
    
    var flipFn = flip(personSubtract, person);
    flipFn(3,2,1) // "Elie subtracts -4"
    
    var flipFn2 = flip(personSubtract, person, 5,6);
    flipFn2(7,8). // "Elie subtracts -4"

    flip(subtractFourNumbers,this,1)(2,3,4) // -2
    flip(subtractFourNumbers,this,1,2)(3,4) // -2
    flip(subtractFourNumbers,this,1,2,3)(4) // -2
    flip(subtractFourNumbers,this,1,2,3,4)() // -2
    flip(subtractFourNumbers,this)(1,2,3,4) // -2
    flip(subtractFourNumbers,this,1,2,3)(4,5,6,7) // -2
    flip(subtractFourNumbers,this)(1,2,3,4,5,6,7,8,9,10) // -2
    flip(subtractFourNumbers,this,11,12,13,14,15)(1,2,3,4,5,6,7,8,9,10) // -22

*/


var flip = (fn, thisArg, ...outerArgs) => (...innerArgs) => fn.apply(thisArg, [...outerArgs, ...innerArgs].slice(0, fn.length).reverse());


/* 
Write a function called bind which accepts a function and a value for the keyword this. Bind should return a new function that when invoked, will invoke the function passed to bind with the correct value of the keyword this. HINT - if you pass more than two parameters to bind, those parameters should be included as parameters to the inner function when it is invoked. You will have to make use of closure!

Examples:

    function firstNameFavoriteColor(favoriteColor){
        return this.firstName + "'s favorite color is " + favoriteColor
    }
    
    var person = {
        firstName: 'Elie'
    }
    
    var bindFn = bind(firstNameFavoriteColor, person);
    bindFn('green') // "Elie's favorite color is green"
    
    var bindFn2 = bind(firstNameFavoriteColor, person, 'blue');
    bindFn2('green') // "Elie's favorite color is blue" 
    
    function addFourNumbers(a,b,c,d){
        return a+b+c+d;
    }

    bind(addFourNumbers,this,1)(2,3,4) // 10
    bind(addFourNumbers,this,1,2)(3,4) // 10
    bind(addFourNumbers,this,1,2,3)(4) // 10
    bind(addFourNumbers,this,1,2,3,4)() // 10
    bind(addFourNumbers,this)(1,2,3,4) // 10
    bind(addFourNumbers,this)(1,2,3,4,5,6,7,8,9,10) // 10

*/

var bind = (fn, thisArg, ...outerArgs) => (...innerArgs) => fn.call(thisArg,...outerArgs, ...innerArgs);
```
### Array.prototype.reduce()

```
function sumEvenArgs(...args){
    return args.reduce((acc, val) => acc + (val % 2 === 0 ? val : 0), 0);
}
```

`initialValue` of previous function is 0.

`initialValue`: Value to use as the first argument to the first call of the callback. If no initial value is supplied, the ***first element in the array*** will be used. Calling `reduce()` on an ***empty*** array without an initial value is an ***error***.

### Object Shorthand Notation

If key and value are the same, omit one.

```
var firstName = "Elie";
var lastName = "Schoppik";

// ES5
var instructor = {
    firstName: firstName,
    lastName: lastName
}
```


```
var firstName = "Elie";
var lastName = "Schoppik";

// ES2015
var instructor = {
    firstName,
    lastName
}
```

### Object Methods Shorthand Notation

Use arrow function in object because we may accidentally use don't use the right `this`.

```
// ES5
var instructor = {
    sayHello: function(){
        return "Hello!";
    }    
}
```

To be short, omit the colon `:` and `function` keyword.

```
// ES2015 - do NOT use arrow functions here!
var instructor = {
    sayHello(){
        return "Hello!";
    }
}
```

### Computed Property Names

Use brackets `[]` around a variable to let Javascript compute the variable.

```
// ES5
var firstName = "Elie";
var instructor = {};
instructor[firstName] = "That's me!";

instructor.Elie; // "That's me!"
```

```
// ES2015
var firstName = "Elie";
var instructor = {
    [firstName]: "That's me!"
}

instructor.Elie; // "That's me!"
```

### Object Destructuring

Extracting values from data stored in objects and arrays

```
var instructor = {
    firstName: "Elie",
    lastName: "Schoppik"
}
var firstName = instructor.firstName;
var lastName = instructor.lastName;

firstName; // "Elie"
lastName; // "Schoppik"
```

```
var {firstName: firstName, lastName: lastName} = instructor;
```

Omit repeated firstName, lastName and `:` like `Object Shorthand Notation`.

```
var {firstName, lastName} = instructor;
```

### Property renaming

You can also give different names to properties:

```
let o = {
    a: "foo",
    b: 12,
    c: "bar"
};
let { a: newName1, b: newName2 } = o;
```

Here the syntax starts to get confusing. You can read a: newName1 as “a as newName1”. The direction is left-to-right, as if you had written:

```
let newName1 = o.a;
let newName2 = o.b;
```

Another example:

```
var {firstName:first, lastName:last} = instructor;
```



### ignore some element

This creates new variables a and b from o.a and o.b. Notice that you can skip c if you don’t need it.

```
let o = {
    a: "foo",
    b: 12,
    c: "bar"
};
let { a, b } = o;
console.log(a);//foo
console.log(b);//12
```

Like array destructuring, you can have assignment without declaration:

```
({ a, b } = { a: "baz", b: 101 });
```

Notice that we had to surround this statement with `parentheses`. JavaScript normally parses a `{` as the start of block.

You can create a variable for the remaining items in an object using the syntax `...`:

```
let { a, ...passthrough } = o;
console.log(passthrough);//{b: 12, c: "bar"}
```



### Object Destructuring Usage

```
function createInstructor(options){
    var options = options || {};
    var name = options.name || {first: "Matt", last:"Lane"}
    var isHilarious = options.isHilarious || false; 
    return [name.first, name.last, isHilarious];
}
createInstructor(); // ["Matt", "Lane", false]
createInstructor({isHilarious:true}); // ["Matt", "Lane", true]
createInstructor({name: {first:"Tim", last:"Garcia"}}); // ["Tim", "Garcia", false]
```

#### Refactor

Destructure object accepted to name, isHilarious.

```
function createInstructor({name, isHilarious}){
    console.log(name, isHilarious);
}
```

Use default value for name and isHilarious.

```
function createInstructor({name={first: "Matt", last: "Lane"}, isHilarious=false}){
    console.log(name, isHilarious);
}
createInstructor();//Uncaught TypeError: Cannot destructure property `name` of 'undefined' or 'null'.
```

If pass nothing to `createInstructor`, `undefined.name` throws error, therefore use default value for the object that contains name, isHilarious.

```
function createInstructor({name={first: "Matt", last: "Lane"}, isHilarious=false}={}){
    console.log(name, isHilarious);
}
```

return array instead of console.log.

```
function createInstructor({name={first: "Matt", last: "Lane"}, isHilarious=false}={}){
    return [name.first, name.last, isHilarious];
}
```

### Object Destructure Usage: Object fields as parameters

Very common in React!

```
function displayInfo(obj) {
    return [obj.name, obj.favColor];
}
var instructor = { 
    name: "Elie",
    favColor: "Purple"
};

displayInfo(instructor); // ["Elie", "Purple"]
```

default value `{}` is required otherwise Uncaught TypeError: Cannot destructure property `name` of 'undefined' or 'null' if `displayInfo()
` is called.

```
function displayInfo({name, favColor}={}){
    return [name, favColor];
}
```

### Default value

```
function keepWholeObject(wholeObject) {
    let { a, b = 1001 } = wholeObject;
    console.log(a, b);
}
keepWholeObject({});//undefined 1001
```

```
function f({ a, b = 0 } = { a: "a" }) {
    console.log(a, b);
}
f({ a: "yes" }); // yes 0
f(); // a 0
f({}); // undefined 0
```

Use destructuring with care. As the previous example demonstrates, anything but the simplest destructuring expression is confusing. This is especially true with deeply nested destructuring, which gets really hard to understand even without piling on renaming, default values, and type annotations. Try to keep destructuring expressions small and simple. You can always write the assignments that destructuring would generate yourself.

### Array Destructuring

```
var arr = [1,2,3];

var a = arr[0];
var b = arr[1]; 
var c = arr[2];

a; // 1
b; // 2
c; // 3
```

```
var [a,b,c] = arr;
```

```
function returnNumbers(a,b) {
  return [a,b];
}

var first = returnNumbers(5,10)[0];
var second = returnNumbers(5,10)[1];

first; // 5
second; // 10
```

```
var [first, second] = returnNumbers(5, 10);
```

#### Swapping Values with array destructuring

Don't have to use `tmp`.

```
function reverseArray(arr){
    for(var i=0; i<arr.length/2; i++){
        var tmp = arr[i];
        arr[i] = arr[arr.length-1-i];
        arr[arr.length-1-i] = tmp;
    }
    return arr;
}
```

```
function reverseArray(arr){
    for(var i=0; i<arr.length/2; i++){
        [arr[i], arr[arr.length-1-i]] = [arr[arr.length-1-i], arr[i]];
    }
    return arr;
}
```

#### And with parameters to a function

```
function f([first, second]) {
    console.log(first);
    console.log(second);
}
f([1, 2]);
```

#### With rest operator

```
let [first, ...rest] = [1, 2, 3, 4];
console.log(first); // outputs 1
console.log(rest); // outputs [ 2, 3, 4 ]
```

#### Ignore trailing elements

```
let [first] = [1, 2, 3, 4];
console.log(first); // 1
```

```
let [, second, , fourth] = [1, 2, 3, 4];
console.log(second);//2
console.log(fourth);//4
```


### Refactor tips with ES 2015

1. Won't be changed word, use const
2. use let in loops
3. Use template strings instead of string
4. Refactor callback to arrow function
5. Change short function to one-line arrow function
6. Use `let` for arrow function declaration, to avoid function accidental override.
6. Other variables not mentioned, just use `var`

### `class` keyword

1. A new reserved keyword provided by ES2015
2. The class keyword creates a constant - can not be redeclared, but can be re-assigned
3. The class keyword is an abstraction of constructor functions and prototypes. JavaScript does not have built in support for object oriented programming. Under the hood, we are still using the functions and prototypes like we use them in ES5. ES2015 class syntax is an abstraction of using functions and objects!
4. The class keyword does not hoist
5. Still use `new` keyword to create objects

#### ES5 Object Oriented

```
function Student(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

var elie = new Student('Elie', 'Schoppik');
```

create a constructor function
use the new keyword to create objects

#### ES2015 Object Oriented

```
class Student { 
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

var elie = new Student('Elie', 'Schoppik'); // same as ES5
typeof Student; //"function"
typeof elie; //"object"
```

1. use the `class` keyword instead of creating a function
2. inside, use a special method `constructor` which is run when `new` is used
3. use the `new` keyword to create objects

#### ES5 Instance Methods

```
function Student(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

Student.prototype.sayHello = function(){
    return "Hello " + this.firstName + " " + this.lastName;
}
```

Shared methods and properties are placed directly on the function's `prototype` property

#### ES2015 Instance Methods

```
class Student { 
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    sayHello(){
        return `Hello ${this.firstName} ${this.lastName}`;
    }
}
```

placed inside of `class` keyword
no `function` keyword - similar to `object shorthand notation`
***under the hood*** it is placing methods on the prototype object

#### ES5 Class Methods

```
function Student(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

Student.prototype.sayHello = function(){
    return "Hello " + this.firstName + " " + this.lastName;
}

Student.isStudent = function(obj){
    return obj.constructor === Student;
}
```

Class methods are placed directly on the constructor function

#### ES2015 Class Methods(aka static methods)

```
class Student { 
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    sayHello(){
        return `Hello ${this.firstName} ${this.lastName}`;
    }
    static isStudent(obj){
        return obj.constructor === Student;
    }
}
```

Class methods are created using the `static` keyword

### Inheritance

Passing along methods and properties from one class to another

#### ES5 Inheritance

```
function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

Person.prototype.sayHello(){
    return "Hello " +  this.firstName + " " + this.lastName;
}

function Student(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}
Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;
```

Set the prototype property of a constructor to be an object created from another prototype property

Reset the constructor property on a constructor function

#### ES2015 Inheritance

Use the `extends` keyword

```
class Person {
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    sayHello(){
        return `Hello ${this.firstName} ${this.lastName}`;
    }
}

class Student extends Person { 

}
```

### super keyword

#### ES5 use `apply`


```
function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}

Person.prototype.sayHello(){
    return "Hello " +  this.firstName + " " + this.lastName;
}

function Student(){
    Person.apply(this, arguments);
}
```

Use call or apply in a constructor function - apply is handy when there are many arguments

#### ES2015 - super

```
class Person {
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    sayHello(){
        return `Hello ${this.firstName} ${this.lastName}`;
    }
}
class Student extends Person { 
    constructor(firstName, lastName){
        // use super to call constructor in parent class Person
        super(firstName, lastName);
    }
}
```

`super` can only be used if a method by the same name is implemented in the parent class.

### Map

Also called "hash maps" in other languages

Until ES2015 - objects `{}` were replacements for maps. In object, key is always ***string***.

Maps is similar to objects, except the keys can be ***ANY data type***!

Created using the `new` keyword

```
var firstMap = new Map;

firstMap.set(1, 'Elie');
firstMap.set(false, 'a boolean');
firstMap.set('nice', 'a string');
firstMap.delete('nice'); // true
firstMap.size; // 2
```

Keys can be any type!

```
var arrayKey = [];
firstMap.set(arrayKey, [1,2,3,4,5]);

var objectKey = {};
firstMap.set(objectKey, {a:1});
```

#### Extracting Values

```
firstMap.get(1); // 'Elie'
firstMap.get(false); // 'a boolean'
firstMap.get(arrayKey); // [1,2,3,4,5]
firstMap.get(objectKey); // {a:1}
```

#### iterate value over the map - forEach

```
firstMap.forEach(v => console.log(v));

// Elie
// a boolean
// [1,2,3,4,5]
// {a:1}
```

#### iterate value over the map - for...of 

maps implement a `Symbol.iterator` which means we can use a for...of loop!

```
for(let i of firstMap){
    console.log(i);
}
//(2) [1, "Elie"]
//(2) [false, "a boolean"]
//(2) [Array(0), Array(5)]
//(2) [{…}, {…}]
```

```
firstMap.values(); // MapIterator of values
firstMap.keys(); // MapIterator of keys
```

```
for(let i of firstMap.keys()){
    console.log(i);
}
//1
//false
//[]
//{}
```

```
for(let i of firstMap.values()){
    console.log(i);
}
//Elie
//a boolean
//(5) [1, 2, 3, 4, 5]
//{a: 1}
```

#### Accessing keys and values in a map

we can access everything with .entries() and destructuring!

```
var m = new Map;
m.set(1, 'Elie');
m.set(2, 'Colt');
m.set(3, 'Tim');

for(let [key,value] of m.entries()){
    console.log(key, value);
}

// 1 "Elie"
// 2 "Colt"
// 3 "Tim"
```

Each entry in `m.entries()` is an Array, so we can use array destructuring after for of.

#### Why use maps?

Finding the size is easy  - no more loops or Object.keys()

The keys can be any data type!

You can accidentally overwrite keys on the Object.prototype in an object you make - maps do not have that issue

Iterating over keys and values in a map is quite easy as well

#### When to use a map
If you need to look up keys dynamically (they are not hard coded strings), like `person[prop]` in object.
If you need keys that are not strings!
If you are frequently adding and removing key/value pairs
Are key-value pairs frequently added or removed?
If you are operating on multiple keys at a time

### WeakMap
Similar to a map, but all keys MUST be objects

Values in a WeakMap can be cleared from memory if there is no reference to them

More performant than maps, but can not be iterated over

### Set

All values in a set are ***unique***

***Any type of value*** can exist in a set

Created using the `new` keyword

Exist in quite a few other languages, ES2015 finally brings them to JavaScript


```
var s = new Set;

// can also be created from an array
var s2 = new Set([3,1,4,1,2,1,5]); // {3,1,4,2,5}, s2.size === 5
```

But `s2.add([1,2,3])` will only add an Array to s2, not every number added to s2 seperately.

```
s.add(10); // {10}
s.add(20); // {20, 10}
s.add(10); // {20, 10}

s.size; // 2
```

```
s.has(10); // true

s.delete(20); // true

s.size; // 1
```

```
s2[Symbol.iterator]; // function(){}...
// we can use a for...of loop!
```

### WeakSet

Similar to a set, but all values MUST be objects

Values in a WeakSet can be cleared from memory if there is no reference to them

More performant than sets, but can not be iterated over

### countPairs

Write a function called countPairs which accepts an array of numbers and a number. The function should return the number of unique pairs (two numbers) that sum up to the number passed to the function.

```
function countPairs(arr, num){
    var set = new Set();
    var count = 0;
    for(var i=0; i<arr.length; i++){
        if(set.has(num-arr[i])){
            count++;
            set.delete(num-arr[i]);
        }else{
            set.add(arr[i]);
        }
    }
    return count;
}
```

### Generators
A special kind of function which can pause execution and resume at any time
Created using a `*` after `function` keyword
When a generator function invoked, a `generator object` is returned to us, that  `generator object` has a `next` method, which returns another object to us if invoked with the property of `value` and `done`.
`value` is what is returned from the paused function using the `yield` keyword
`done` is a boolean which returns true when the function has completed

```
function* pauseAndReturnValues(num){
    for(let i = 0; i < num; i++){
        yield i;
    }
}
var gen = pauseAndReturnValues(5);
gen.next(); // {value: 0, done: false}, from yield i
gen.next(); // {value: 1, done: false}
gen.next(); // {value: 2, done: false}
gen.next(); // {value: 3, done: false}
gen.next(); // {value: 4, done: false}
gen.next(); // {value: undefined, done: true}
```

#### Yield Multiple Values

We can place multiple yield keywords inside of a generator function to pause multiple times!



```
function* printValues(){
    yield "First";
    yield "Second";
    yield "Third";
}

var g = printValues();
g.next(); // {value: "First", done: false}
g.next(); // {value: "Second", done: false}
g.next(); // {value: "Third", done: false}
g.next(); //{value: undefined, done: true}
```

### Iterating over a generator
Since generators implement a Symbol.iterator property we can use a for...of loop!

```
function* pauseAndReturnValues(num){
    for(let i = 0; i < num; i++){
        yield i;
    }
}
for(let val of pauseAndReturnValues(3)){
    console.log(val);
}
// 0
// 1
// 2
```

```
function* pauseAndReturnValues(num){
    yield "First";
    yield "Second";
    yield "Third";
}
for(let val of pauseAndReturnValues(3)){
    console.log(val);
}
//First
//Second
//Third
```

### Async Generators

We can use generators to pause asynchronous code.

The next().value returned is a `promise`.


```
function* getMovie(title){
    yield $.getJSON(`https://omdbapi.com?t=${title}&apikey=thewdb`);
}
getMovie("titanic").next().value.then(data => console.log(data));
//{Title: "Titanic", Year: "1997", Rated: "PG-13", Released: "19 Dec 1997", Runtime: "194 min", …}
```

Since titanic and colt are async, not sure which one comes first, but 1 is sure to come first.

```
function* getData(){
    yield $.getJSON("https://omdbapi.com?t=$titanic&apikey=thewdb");
    yield $.getJSON("https://api.github.com/users/colt");
    yield 1;
}
var gen = getData();
gen.next().value.then(data => console.log(data));
gen.next().value.then(data => console.log(data));
console.log(gen.next().value);
```

### Object.assign

Create shallow copies of objects.

```
// ES5
var o = {name: "Elie"};
var o2 = o;
o2.name = "Tim";
o.name; // "Tim"
```

`{}` is an empty object.

```
// ES2015
var o = {name: "Elie"};
var o2 = Object.assign({},o);
o2.name = "Tim";
o.name; // "Elie"
```

Although o and o2 are two different objects, `o.instructors === o2.instructors`

```
// ES2015
var o = {instructors: ["Elie", "Tim"]};
var o2 = Object.assign({},o);
o2.instructors.push("Colt");
o.instructors; // ["Elie", "Tim", "Colt"];
```

### Array.from

```
// ES5

var divs = document.getElementsByTagName("div"); // returns an array-like-object

divs.reduce // undefined, since it is not an actual array
```

### Current full url

This can work in client side, but as for React server side rendering, it won't work.

```
window.location.href
```

Base url: `window.location.origin`
