---
layout: post
author: Hang Hu
categories: frontend
tags: Blog FrontEnd 
cover: 
---

## use `ref` string to access DOM Element

```
<SubMenu
    title={ this.state.username }
    ref="user"
>
</SubMenu>
```


```
public componentDidMount(): void {
    const userDisplay = ReactDOM.findDOMNode(this.refs.user) as HTMLElement;
    console.log(userDisplay.offsetWidth);
}
```


## `ref` string is not encouraged 


```
<SubMenu
    title={ this.state.username }
    ref={ (ref) => this.userRef = ref }
>
</SubMenu>
```


Note that `this.user` is `SubMenu` and cannot find `offsetWidth` in it, so I have to use `ReactDOM.findDOMNode(this.userRef)` to get the `Element`.


```
private userRef: SubMenu|null = null;
public componentDidMount(): void {
    if (this.userRef) {
        const userDisplay = ReactDOM.findDOMNode(this.userRef) as HTMLElement;
        this.setState({userDisplayWidth: userDisplay.offsetWidth + 'px'});
    }
}
```


## After render


Use `componentDidMount()`.


## Use JSX in variable


Note that no `""` or `''` used around `<span>{ this.state.info }</span>`.


```
content = <span>{ this.state.info }</span>;
```


## avoid string being escaped: dangerouslySetInnerHTML


```
return <div dangerouslySetInnerHTML={ {__html: str} } />;
```


[React DOM Elements](https://reactjs.org/docs/dom-elements.html)


## export const


```
export const Info;
```


```
import { Info } from Info.js
```


## less hover inside a class selection


```
.user {
    font-size: 1rem;
    &:hover {
        color: blue;
    }
}
```


## statement in JSX: use parenthesis `()`


```
return (
    (typeof info === 'undefined') ?
    null : (
    <Popover
        content={ getContent() }
    >
        <h1>Hover me!</h1>
    </Popover>)
);
```


## comment in JSX


```
{ /* comments here */ }
```


## Compare before update


If not compare, the update of `this.state.caseName` will call `render()` even if it's the same as previous one. And the re-render times will dramatically increase, slowing down the page largely.


```
onCaseClick(caseName) {
    if (caseName !== this.state.caseName) {
        this.setState({
            caseName: caseName
        });
    }
}
```


If not compare, the execution of `this.formatDataAndExecuteChart()` will re-render chart even if `this.props.caseName` is `undefined` or the same as previous one. And the re-render times will dramatically increase, slowing down the page largely.


```
componentDidUpdate(prevProps) {
    if (this.props.caseName && this.props.caseName !== prevProps.caseName) {
        this.formatDataAndExecuteChart();
    }
}
```
