---
layout: post
author: Hang Hu
categories: react
tags: Blog FrontEnd React 
cover: 
---
## Install

```
npm install react-router-dom
```


## Define of Route


In `App.js`:


`BrowserRouter` creates `history` object, `Switch` iterates all `Route` and find the first one matching current location, when no one matches, at least NotFoundPage where no path defined will macth.


```
import { BrowserRouter, Route, Link, Switch } from "react-router-dom";
import NotFoundPage from "./components/NotFoundPage";

<BrowserRouter>
  <Switch>
    <Route exact path="/" component={TimeLine} />
    <Route path="/bundle" component={NewsBundlePage} />
    <Route path="/news" component={NewsPage} />
    <Route component={NotFoundPage} />
  </Switch>
</BrowserRouter>
```


## Change page in Material UI


```
import { Link } from 'react-router-dom'
import Button from '@material-ui/core/Button';

const MyLink = props => <Link to="/open-collective" {...props} />

<Button component={MyLink}>
  Link
</Button>
```


## Change page programmatically


```
import { withRouter } from "react-router-dom";
class TimeEvent extends Component {...}

export default withRouter(TimeEvent);
```


Inside component `TimeEvent`:


```
handleImageClick() {
  this.props.history.push({
    pathname: "/news",
    state: {
      newsId: this.state.mostPopularNewsId
    }
  });
}
```


In the component `/news` connecting to, use `this.props.location.state.newsId` to access it.


## Notes


1. For a new page, I think no `componentDidUpdate` is required, because it's not parent component and child component, everything is rendered again.


## A Better Way is to Use Url


### Define `Route` in App.js


```
<BrowserRouter>
  <Switch>
    <Route exact path="/" component={HomePage} />
    <Route path="/bundle/:date" component={NewsBundlePage} />
    <Route path="/news/:newsId" component={NewsPage} />
    <Route component={NotFoundPage} />
  </Switch>
</BrowserRouter>
```


### Change page programmatically


```
handleCardClick() {
  this.props.history.push({
    pathname: `/news/${this.props.newsId}`
  });
}
```


In the component `/news` connecting to, use `this.props.match.params.newsId` to access it.

