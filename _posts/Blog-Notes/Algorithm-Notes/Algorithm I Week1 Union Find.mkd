`id[i]` in the quick union and after is the parent of `i`.

PPT 36

Why is the depth of the weighted quick-union tree logN?

The depth of smaller tree increases 1 when it's merged into a larger tree. And it at least doubles because it's merged into a larger tree. 1 doubles x times to N, which is,

```
1 * 2^x = N
x = log2 N
```


Interview Questions: Unionâ€“Find (ungraded)


Social network connectivity. Given a social network containing n members and a log file containing mm timestamps at which times pairs of members formed friendships, design an algorithm to determine the earliest time at which all members are connected (i.e., every member is a friend of a friend of a friend ... of a friend). Assume that the log file is sorted by timestamp and that friendship is an equivalence relation. The running time of your algorithm should be m*logn or better and use extra space proportional to n.

```
class SocialNetworkConnectivity{
    private static final int N;
    private int[] id;
    private int[] size;
    private Log[] logs;
    private int numOfTrees;
    public SocialNetworkConnectivity() {
        id = new int[N];
        numOfTrees =
        for(int i=0; i<N; i++){
            id[i] = i;
            size[i] = 1;
        }
    }
    private int root(int i) {
        while(id[i] != i) {
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
    private boolean isConnected(int p, int q) {
        return root(p) == root(q);
    }
    private void union(int p, int q) {
        int i = root(p);
        int j = root(q);
        if(i == j) return;
        if(size[i] > size[j]){
            id[j] = id[i];
            size[i] += size[j]
        } else {
            id[i] = id[j];
            size[j] += size[i];
        }
    }
    public int earliestTime() {
        for(log in logs) {
            if(!isConnected(log.p, log.q)) {
                union(log.p, log.q);
                numOfTrees--;
            }
            if(numOfTrees == 1) {
                return log.timestamp;
            }
        }
        return -1;
    }
}
```

