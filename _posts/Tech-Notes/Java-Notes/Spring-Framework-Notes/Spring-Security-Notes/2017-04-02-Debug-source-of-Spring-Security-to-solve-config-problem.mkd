---
layout: post
author: Hang Hu
categories: java
tags: Java Spring-Framework Spring-Security 
cover: 
---

## Background

I had built an easy REST application using annotation and `OAuth2` to protect the rest api. However, the project I actually want to use `OAuth2` is based on `xml`. Then I had to convert annotation to `xml`. When I finally finished the work, I get a response `{"error":"invalid_grant","error_description":"Bad credentials"}` requested by postman. It likely to be a prolem caused by my `xml` config, because I didn't change anything but the annotation and Java config and my username, password, clientId, secret all works well in the annotation version. Unfortunately, I don't find any material useful to my case on the Internet, so I have to debug it to the the precise reason.
## Config related to security

>security.xml
```
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/security/oauth2
                           http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
    <http pattern="/oauth/token"
          create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager">
        <intercept-url pattern="/oauth/token" access="isFullyAuthenticated()"/>
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
        <access-denied-handler ref="accessDeniedHandler"/>
        <http-basic entry-point-ref="authenticationEntryPoint"></http-basic>
    </http>
    <http create-session="never" entry-point-ref="authenticationEntryPoint">
        <intercept-url pattern="/user/**" access="hasRole('ROLE_USER')"/>
        <anonymous enabled="false" />
        <access-denied-handler ref="accessDeniedHandler"/>
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
    </http>
    <beans:bean id="authenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="HUHANG_OAUTH_REALM/client"></beans:property>

    </beans:bean>
    <beans:bean id="accessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
    </beans:bean>

    <authentication-manager id="userAuthenticationManager">
        <authentication-provider user-service-ref="customUserDetailsService"/>
    </authentication-manager>
    <authentication-manager id="clientAuthenticationManager">
        <authentication-provider user-service-ref="clientDetailsUserDetailsService"/>
    </authentication-manager>
    <beans:bean id="clientDetailsUserDetailsService"
            class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">

        <beans:constructor-arg ref="customClientDetailsService"/>
    </beans:bean>
    <beans:bean id="inMemoryTokenStore"
                class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore">
    </beans:bean>
    <beans:bean id="tokenStoreUserApprovalHandler"
            class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="inMemoryTokenStore"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
        <beans:property name="clientDetailsService" ref="customClientDetailsService"/>
    </beans:bean>
    <beans:bean id="oAuth2RequestFactory" 
            class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">

        <beans:constructor-arg ref="customClientDetailsService"/>
    </beans:bean>
    <beans:bean id="tokenApprovalStore"
            class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
    </beans:bean>


    <oauth:authorization-server client-details-service-ref="customClientDetailsService"
                                token-services-ref="tokenServices"
                                user-approval-handler-ref="tokenStoreUserApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:password/>

    </oauth:authorization-server>
    <oauth:resource-server id="resourceServerFilter"
                           resource-id="huhang_rest_api"
                           stateless="false"
                            token-services-ref="tokenServices"/>
    <global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <expression-handler ref="oAuth2MethodSecurityExpressionHandler"/>
    </global-method-security>
    <oauth:expression-handler id="oAuth2MethodSecurityExpressionHandler"/>
    <beans:bean id="tokenServices"
            class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="inMemoryTokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="clientDetailsService" ref="customClientDetailsService"/>
    </beans:bean>
</beans:beans>
```
>class CustomClientDetailsService
```
@Service
public class CustomClientDetailsService implements ClientDetailsService{
    private String clientId="my_trusted_client";
    private String clientSecret="secret";
    @Override
    public ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException {
        if(clientId.equals(this.clientId)){
            List<String> authorizedGrantTypes=new LinkedList<>();
            authorizedGrantTypes.add("password");
            authorizedGrantTypes.add("authorization_code");
            authorizedGrantTypes.add("refresh_token");
            authorizedGrantTypes.add("implicit");
            List<GrantedAuthority> authorities=new LinkedList<>();
            authorities.add(new SimpleGrantedAuthority("ROLE_CLIENT"));
            authorities.add(new SimpleGrantedAuthority("ROLE_TRUSTED_CLIENT"));
            List<String> scopes=new LinkedList<>();
            scopes.add("read");
            scopes.add("write");
            scopes.add("trust");
            BaseClientDetails baseClientDetails=new BaseClientDetails();
            baseClientDetails.setClientId(clientId);
            baseClientDetails.setClientSecret(this.clientSecret);
            baseClientDetails.setAuthorizedGrantTypes(authorizedGrantTypes);
            baseClientDetails.setAuthorities(authorities);
            baseClientDetails.setScope(scopes);
            baseClientDetails.setAccessTokenValiditySeconds(120);
            baseClientDetails.setRefreshTokenValiditySeconds(600);
            return baseClientDetails;
        }else{
            throw new NoSuchClientException("");
        }
    }
}
```
>class CustomUserDetailsService
```
@Service
public class CustomUserDetailsService implements UserDetailsService{
    @Autowired
    private UserService userService;
    @Transactional(readOnly = true)
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserDto userDto = userService.findByName(username);
        Set<GrantedAuthority> grantedAuthorities=new HashSet<>();
        for(Iterator<String> i=userDto.getRoles().iterator(); i.hasNext(); ){
            grantedAuthorities.add(new SimpleGrantedAuthority(i.next()));
        }
        return new User(
                userDto.getName(),
                userDto.getPassword(),
                true, true, true, true,
                grantedAuthorities);
    }
}
```
## Proccess of debug source

1. Check of client is first so I add breakpoint in `CustomClientDetailsService`'s `loadClientByClientId` and check the result of it, which is ok.
2. Then I step over to reach the first exception which is `UsernameNotFoundException`, and I add breakpoint to the line causing it.
<img src="/home/joanna/Pictures/CodePic/Note/debug1.png" width=100%/>
3. I press F9 to resume program and request again using postman to go to the breakpoint I just added. Press F9 four times to skip the first breakpoint I have just checked and reach the new breakpoint.
4. Then I step into it using F7 to figure out what's wrong where I get a  exception called `UsernameNotFoundException` and add the third breakpoint there.
<img src="/home/joanna/Pictures/CodePic/Note/debug2.png" width=100%/>
5. Repeat to reach the third breakpoint and step into it, there I find the true reason of all these exceptions. Here is a method called `loadUserByUsername` which should call `loadUserByUsername` in class `CustomUserDetailsService`, but it calls `loadClientByClientId` in class `CustomClientDetailsService`, making the check of user to fail.
<img src="/home/joanna/Pictures/CodePic/Note/debug3.png" width=100%/>
## Look into security.xml

Now the reason of exceptions is that I use `CustomClientDetailsService` in where `CustomUserDetailsService` should be used. It's easy to find `<oauth:password/>` in `<oauth:authorization-server></oauth:authorization-server>` lacks `authentication-manager-ref` which should reference to `userAuthenticationManager` which uses `customUserDetailsService` as `authentication-provider`.
>The revised part in security.xml
```
<oauth:authorization-server client-details-service-ref="customClientDetailsService"
                            token-services-ref="tokenServices"
                            user-approval-handler-ref="tokenStoreUserApprovalHandler">
    <oauth:authorization-code/>
    <oauth:implicit/>
    <oauth:refresh-token/>
    <oauth:client-credentials/>
    <oauth:password authentication-manager-ref="userAuthenticationManager"/>
</oauth:authorization-server>
```
Restart server and it works well!
