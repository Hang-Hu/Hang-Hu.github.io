---
layout: post
author: Hang Hu
categories: springmvc
tags: Java Spring-Framework SpringMVC 
cover: 
---

## Dependency

```
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>5.3.4.Final</version>
</dependency>
```

## First Edition

Controller

In this edition, 400 will be sent back if validation fails, and method won't be executed.

```
@Controller
public class WeekController {
	@RequestMapping("/weeks")
	@ResponseBody public WeekDTO getWeekList(@Valid @RequestBody User user){
		System.out.println("weeks here.");
		System.out.println(user.getId()+" "+user.getName()+" "+user.getAge());
		return new WeekDTO();
	}
}
```

Class User

```
public class User {
    @NotNull
    private Integer id;
    @NotNull
    private String name;
    @NotNull
    //@Min(18)
    @Range(min=18)
    private Integer age;
    public Integer getId() {
        return id;
    }
    public void setId(Integer id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public Integer getAge() {
        return age;
    }
    public void setAge(Integer age) {
        this.age = age;
    }
}
```

## Second Edition

In this edition, if validations fails, 400 won't be sent back as response, and method will be executed, what will be sent back depends on code in method. Error handling can be done within `if(bindingResult.hasErrors()){}`.

```
@Controller
public class WeekController {
	//getWeekList
	@RequestMapping("/weeks")
	@ResponseBody public WeekDTO getWeekList(@Valid @RequestBody User user, BindingResult bindingResult){
		if(bindingResult.hasErrors())
			System.out.println("errors in binding");
		System.out.println("weeks here.");
		System.out.println(user.getId()+" "+user.getName()+" "+user.getAge());
		return new WeekDTO();
	}
}
```

## Third Edition

Handling errors in every controller is code duplication. Therefore, handle it in exception is a good idea. When the validation fails, `@Valid` throws a `MethodArgumentNotValidException`, then what to do is to write an `ExceptionHandler` for this specific exception. This time the method won't be executed and a custom Json response will back using `ResponseEntity`.

```
@Controller
public class WeekController {
	//getWeekList
	@RequestMapping("/weeks")
	@ResponseBody public WeekDTO getWeekList(@Valid @RequestBody User user){
		System.out.println("weeks here.");
		System.out.println(user.getId()+" "+user.getName()+" "+user.getAge());
		return new WeekDTO();
	}
	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseBody
	public ResponseEntity<String> handleValidationException(MethodArgumentNotValidException e) {
        List<ObjectError> objectErrors = e.getBindingResult().getAllErrors();
        List<ErrorDTO> errorDTOs = new LinkedList<>();
        for (Iterator i = objectErrors.listIterator(); i.hasNext(); ) {
            ObjectError objectError = (ObjectError) i.next();
            ErrorDTO errorDTO = new ErrorDTO();
            errorDTO.setObjectName(objectError.getObjectName());
            errorDTO.setMessage(objectError.getDefaultMessage());
            errorDTOs.add(errorDTO);
        }
        return new ResponseEntity<String>(errorDTOs.toString(), HttpStatus.BAD_REQUEST);
    }
}
```

```
public class ErrorDTO {
    private String objectName;
    private String message;
    public String getObjectName() {
        return objectName;
    }
    public void setObjectName(String objectName) {
        this.objectName = objectName;
    }
    public String getMessage() {
        return message;
    }
    public void setMessage(String message) {
        this.message = message;
    }
    @Override
    public String toString() {
        String json=null;
        try {
            json=new ObjectMapper().writeValueAsString(this);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        return json;
    }
}
```
