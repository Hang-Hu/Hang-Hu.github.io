---
layout: post
author: Hang Hu
categories: leetcode
tags: Java Leetcode 
cover: 
---

## Description

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree `[1,2,2,3,4,4,3]` is symmetric:

```
    1
   / \
  2   2
 / \ / \
3  4 4  3
```


But the following `[1,2,2,null,3,null,3]` is not:


```
    1
   / \
  2   2
   \   \
   3    3
```


Note: Bonus points if you could solve it both recursively and iteratively.


## Idea


1. Do level order traverse

2. For each level, add each number including null into the List

3. Check if the list is symmetric


## Solution


```
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private List<Integer> valList;
    public boolean isSymmetric(TreeNode root) {
        //System.out.println(height(root));
        for(int i=1; i<=height(root); i++){
            valList=new LinkedList<>();
            givenLevel(root, i);
            //System.out.println(valList);
            if(checkSymmetric()==false){
                return false;
            }
        }
        return true;
    }
    private boolean checkSymmetric(){
        int l=0;
        int r=valList.size()-1;
        while(l<=r){
            if(valList.get(l)!=valList.get(r)){
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
    private void givenLevel(TreeNode root, int level){
        if(level==1){
            if(root==null){
                valList.add(null);
            }else{
                valList.add(root.val);
            }
        }else{
            if(root==null){
                return;
            }
            givenLevel(root.left, level-1);
            givenLevel(root.right, level-1);
        }
    }
    private int height(TreeNode root){
        int height=0;
        if(root!=null){
            height=1+Math.max(height(root.left), height(root.right));
        }
        return height;
    }
}
```
