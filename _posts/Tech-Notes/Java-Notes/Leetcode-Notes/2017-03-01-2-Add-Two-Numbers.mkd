---
layout: post
author: Hang Hu
categories: leetcode
tags: Java Leetcode 
cover: 
---

## Idea

1. Two linked lists add together
2. Add number from start to end
3. Use carry(进位)
4. The result may be one bit longer than the longer one, even when l1 and l2 are of the same length.
5. Two cases: l1.length==l2.length or one is longer.
## Code

```
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode newListNode=new ListNode(0);
        ListNode curListNode=newListNode;
        ListNode preListNode=null;
        while((l1!=null)&&(l2!=null)){
            curListNode.val=(l1.val+l2.val+carry)%10;
            carry=(l1.val+l2.val+carry)/10;
            curListNode.next=new ListNode(0);
            preListNode=curListNode;
            curListNode=curListNode.next;
            l1=l1.next;
            l2=l2.next;
        }
        ListNode longerList;
        if(l1!=null){
            longerList=l1;
        }else if(l2!=null){
            longerList=l2;
        }else{//l1, l2 are null, which shows they have the same length
            if(carry!=0)
                curListNode.val=carry;
            else
                preListNode.next=null;
            return newListNode;
        }
        while(longerList!=null){
            curListNode.val=(longerList.val+carry)%10;
            carry=(longerList.val+carry)/10;
            curListNode.next=new ListNode(0);
            preListNode=curListNode;
            curListNode=curListNode.next;
            longerList=longerList.next;
        }
        if(carry!=0)
            curListNode.val=carry;
        else
            preListNode.next=null;
        return newListNode;
    }
}
```
