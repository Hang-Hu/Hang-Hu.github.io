---
layout: post
author: Hang Hu
categories: java
tags: Java Java-Core 
cover: 
---

## Project

SimpleController-Config
## Code

```
private String invokeActionClassMethod(Action matchedAction,HttpServletRequest request,HttpServletResponse response){
	Class[] parameterTypes=new Class[2];
	parameterTypes[0]=HttpServletRequest.class;
	parameterTypes[1]=HttpServletResponse.class;
	String resultString=null;
	try {
		Class cls = Class.forName(matchedAction.getActionClass().getName());
		Object obj=cls.newInstance();
		Method method=cls.getDeclaredMethod(matchedAction.getActionClass().getMethod(), parameterTypes);
		resultString=(String) method.invoke(obj,request,response);
	} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return resultString;
}
```
## Improvement

SimpleController-7-DI
```
private Object contructObjectByReflection(String className) {
    Object obj=null;
    try {
        Class cls=Class.forName(className);
        obj=cls.newInstance();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
    return obj;
}
```
```
/**
 *
 * @param object is the object which will be set property/field
 * @param propertyName is the name of object's property/field
 * @param propertyValue is the value of object's property/field
 */
private void setPropertyByReflection(Object object, String propertyName, UserBean propertyValue) {
    try {
        Field field=object.getClass().getDeclaredField(propertyName);
        field.setAccessible(true);
        field.set(object, propertyValue);
    } catch (NoSuchFieldException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
}
```
```
private String invokeMethodByReflection(Object obj, String methodName,
                                    HttpServletRequest request, HttpServletResponse response){
    Class[] parameterTypes=new Class[2];
    parameterTypes[0]=HttpServletRequest.class;
    parameterTypes[1]=HttpServletResponse.class;
    String resultString=null;
    try {
        Method method=obj.getClass().getDeclaredMethod(methodName, parameterTypes);
        resultString= (String) method.invoke(obj,request,response);
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
    return resultString;
}
```
