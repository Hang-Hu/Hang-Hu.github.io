#Secret Phase in Bomb Lab
##Find the entrance
Search "secret_phase" and find its entrance in phase_defused.
```
08049694 <phase_defused>:
 8049694:	55                   	push   %ebp
 8049695:	89 e5                	mov    %esp,%ebp
 8049697:	83 ec 78             	sub    $0x78,%esp
 804969a:	a1 8c a8 04 08       	mov    0x804a88c,%eax
 804969f:	83 f8 06             	cmp    $0x6,%eax
 80496a2:	75 6e                	jne    8049712 <phase_defused+0x7e>
 80496a4:	b8 90 a9 04 08       	mov    $0x804a990,%eax
 80496a9:	89 c2                	mov    %eax,%edx
 80496ab:	8d 45 ac             	lea    -0x54(%ebp),%eax
 80496ae:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496b2:	8d 45 a8             	lea    -0x58(%ebp),%eax
 80496b5:	89 44 24 08          	mov    %eax,0x8(%esp)
 80496b9:	c7 44 24 04 60 9e 04 	movl   $0x8049e60,0x4(%esp)
 80496c0:	08 
 80496c1:	89 14 24             	mov    %edx,(%esp)
 80496c4:	e8 9f f1 ff ff       	call   8048868 <sscanf@plt>
 80496c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
 80496cc:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
 80496d0:	75 34                	jne    8049706 <phase_defused+0x72>
 80496d2:	c7 44 24 04 66 9e 04 	movl   $0x8049e66,0x4(%esp)
 80496d9:	08 
 80496da:	8d 45 ac             	lea    -0x54(%ebp),%eax
 80496dd:	89 04 24             	mov    %eax,(%esp)
 80496e0:	e8 be f9 ff ff       	call   80490a3 <strings_not_equal>
 80496e5:	85 c0                	test   %eax,%eax
 80496e7:	75 1d                	jne    8049706 <phase_defused+0x72>
 80496e9:	c7 04 24 74 9e 04 08 	movl   $0x8049e74,(%esp)
 80496f0:	e8 d3 f0 ff ff       	call   80487c8 <puts@plt>
 80496f5:	c7 04 24 9c 9e 04 08 	movl   $0x8049e9c,(%esp)
 80496fc:	e8 c7 f0 ff ff       	call   80487c8 <puts@plt>
 8049701:	e8 25 f8 ff ff       	call   8048f2b <secret_phase>
 8049706:	c7 04 24 d4 9e 04 08 	movl   $0x8049ed4,(%esp)
 804970d:	e8 b6 f0 ff ff       	call   80487c8 <puts@plt>
 8049712:	c9                   	leave  
 8049713:	c3                   	ret    
 8049714:	90                   	nop
 8049715:	90                   	nop
 8049716:	90                   	nop
 8049717:	90                   	nop
 8049718:	90                   	nop
 8049719:	90                   	nop
 804971a:	90                   	nop
 804971b:	90                   	nop
 804971c:	90                   	nop
 804971d:	90                   	nop
 804971e:	90                   	nop
 804971f:	90                   	nop
```
It first compares 6 with number in `0x804a88c`, which is the phase level. So add break in phase_defused and use many `n` in gdb to go to phase_defused in phase_6.
Then it uses `0x804a990`, `0x8049e60`, `ebp-0x58`, `ebp-0x54` as arguments to call sscanf, which is a function for reading a string. Examine contents in them:
```
(gdb) x/s 0x804a990
0x804a990 <input_strings+240>:	"8"
(gdb) x/s 0x8049e60
0x8049e60:	"%d %s"
```
8 is the solution for phase_4, and %d %s may indicate two input consisting of one decimal and one string is required.After sscanf returns, find its return value is 2. Check contents in `ebp-0x58` and `ebp-0x54`.
```
(gdb) x/s $ebp-0x58
0xffffc850:	"\b"
(gdb) x/s $ebp-0x54
0xffffc854:	"austinpowers"
```
Try austinpowers after 8 in line4 of `solution.txt`, and enter secret_phase seccesfully.  
##Solve the Problem with secret_phase
```
08048f2b <secret_phase>:
 8048f2b:	55                   	push   %ebp
 8048f2c:	89 e5                	mov    %esp,%ebp
 8048f2e:	83 ec 18             	sub    $0x18,%esp
 8048f31:	e8 a8 03 00 00       	call   80492de <read_line>
 8048f36:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048f3c:	89 04 24             	mov    %eax,(%esp)
 8048f3f:	e8 14 f9 ff ff       	call   8048858 <atoi@plt>
 8048f44:	89 45 f8             	mov    %eax,-0x8(%ebp)
 8048f47:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
 8048f4b:	7e 09                	jle    8048f56 <secret_phase+0x2b>
 8048f4d:	81 7d f8 e9 03 00 00 	cmpl   $0x3e9,-0x8(%ebp)
 8048f54:	7e 05                	jle    8048f5b <secret_phase+0x30>
 8048f56:	e8 0f 07 00 00       	call   804966a <explode_bomb>
 8048f5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
 8048f5e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f62:	c7 04 24 20 a7 04 08 	movl   $0x804a720,(%esp)
 8048f69:	e8 4f ff ff ff       	call   8048ebd <fun7>
 8048f6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 8048f71:	83 7d fc 05          	cmpl   $0x5,-0x4(%ebp)
 8048f75:	74 05                	je     8048f7c <secret_phase+0x51>
 8048f77:	e8 ee 06 00 00       	call   804966a <explode_bomb>
 8048f7c:	c7 04 24 c4 99 04 08 	movl   $0x80499c4,(%esp)
 8048f83:	e8 40 f8 ff ff       	call   80487c8 <puts@plt>
 8048f88:	e8 07 07 00 00       	call   8049694 <phase_defused>
 8048f8d:	c9                   	leave  
 8048f8e:	c3                   	ret    
 8048f8f:	90                   	nop
```
Test case:222 3.  
`read_line` returns `134523520`, which is an address containing an inputs string, "222 3" in this case.  
Use 134523520 as argument to call function `atoi`, which return input0 or 0 if no input for secret_phase.  
The following two comparisons indicate `0<input0<=0x3e9`.    
Use `0x804a720` and input0 as arg1 and arg2 to call function fun7, which must return 5, otherwise bomb explodes.  
##Deal with fun7
```
08048ebd <fun7>:
 8048ebd:	55                   	push   %ebp
 8048ebe:	89 e5                	mov    %esp,%ebp
 8048ec0:	83 ec 0c             	sub    $0xc,%esp
 8048ec3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8048ec7:	75 09                	jne    8048ed2 <fun7+0x15>
 8048ec9:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
 8048ed0:	eb 54                	jmp    8048f26 <fun7+0x69>
 8048ed2:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ed5:	8b 00                	mov    (%eax),%eax
 8048ed7:	3b 45 0c             	cmp    0xc(%ebp),%eax
 8048eda:	7e 1c                	jle    8048ef8 <fun7+0x3b>
 8048edc:	8b 45 08             	mov    0x8(%ebp),%eax
 8048edf:	8b 50 04             	mov    0x4(%eax),%edx
 8048ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048ee5:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048ee9:	89 14 24             	mov    %edx,(%esp)
 8048eec:	e8 cc ff ff ff       	call   8048ebd <fun7>
 8048ef1:	01 c0                	add    %eax,%eax
 8048ef3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 8048ef6:	eb 2e                	jmp    8048f26 <fun7+0x69>
 8048ef8:	8b 45 08             	mov    0x8(%ebp),%eax
 8048efb:	8b 00                	mov    (%eax),%eax
 8048efd:	3b 45 0c             	cmp    0xc(%ebp),%eax
 8048f00:	75 09                	jne    8048f0b <fun7+0x4e>
 8048f02:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
 8048f09:	eb 1b                	jmp    8048f26 <fun7+0x69>
 8048f0b:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f0e:	8b 50 08             	mov    0x8(%eax),%edx
 8048f11:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048f14:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f18:	89 14 24             	mov    %edx,(%esp)
 8048f1b:	e8 9d ff ff ff       	call   8048ebd <fun7>
 8048f20:	01 c0                	add    %eax,%eax
 8048f22:	40                   	inc    %eax
 8048f23:	89 45 fc             	mov    %eax,-0x4(%ebp)
 8048f26:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8048f29:	c9                   	leave  
 8048f2a:	c3                   	ret    
```
```
//arg1 is an adress, arg2 is an int exactly the same as input0
fun7(arg1,arg2){
    if(*arg1==0)
        return 0xffffffff;
    else{
        if(*arg1<=arg2){
            if(*arg1==arg2)
                return 0;
            else//*arg1<arg2
                return 1+2*fun7(*(arg1+8),arg2);
        }
        else//*arg1>arg2
            return 2*fun7(*(arg1+4),arg2);
    }
}
```
5 can only be counted as `1+2*(2*(1+2*0))`.  
Initial arg1 is 0x804a720.  
Fisrt fetch `*(arg1+8)`:  
```
(gdb) x/w 0x804a720+8
0x804a728 <n1+8>:	134522632
```
For fun7(0x804a720,arg2)  
return 1+2*fun7(134522632,arg2);  
Second fetch `*(arg1+4)`:  
```
(gdb) x/w 134522632+4
0x804a70c <n22+4>:	134522608
```
For fun7(134522632,arg2)  
return 2*fun7(134522608,arg2);  
Third fetch `*(arg1+8)`:  
```
(gdb) x/w 134522608+8
0x804a6f8 <n33+8>:	134522500
```
For fun7(134522608,arg2)  
return 1+2*fun7(134522500,arg2);  
Fouth fetch `*arg1`:  
```
(gdb) x/d 134522500
0x804a684 <n46>:	47
```
For fun7(134522500,arg2)  
return 0.  
To make it return 0, `*(arg1)` must equal arg2. Based on data above, *(134522500) equals 47, so arg2 must be 47.  
Try 47, defuse the bomb!  